Firmware Error (ACPI): Could not resolve symbol [^PCI0.LPCB.EC0.ECMX], AE_NOT_FOUND (20210930/dswload-495)
Firmware Error (ACPI): Could not resolve symbol [^PCI0.LPCB.EC0.ECRG], AE_NOT_FOUND (20210930/dswload-495)
Firmware Error (ACPI): Could not resolve symbol [^PCI0.LPCB.EC0.PSCF], AE_NOT_FOUND (20210930/dswload-495)
Firmware Error (ACPI): Could not resolve symbol [^PCI0.LPCB.EC0.BCSC], AE_NOT_FOUND (20210930/dswload-495)
Firmware Error (ACPI): Could not resolve symbol [^^^PLTF.C000._PSS], AE_NOT_FOUND (20210930/dswload-495)
Firmware Error (ACPI): Could not resolve symbol [^^^PLTF.C001._PSS], AE_NOT_FOUND (20210930/dswload-495)
Firmware Error (ACPI): Could not resolve symbol [^^^PLTF.C002._PSS], AE_NOT_FOUND (20210930/dswload-495)
Firmware Error (ACPI): Could not resolve symbol [^^^PLTF.C003._PSS], AE_NOT_FOUND (20210930/dswload-495)
Firmware Error (ACPI): Could not resolve symbol [^^^PLTF.C004._PSS], AE_NOT_FOUND (20210930/dswload-495)
Firmware Error (ACPI): Could not resolve symbol [^^^PLTF.C005._PSS], AE_NOT_FOUND (20210930/dswload-495)
Firmware Error (ACPI): Could not resolve symbol [^^^PLTF.C006._PSS], AE_NOT_FOUND (20210930/dswload-495)
Firmware Error (ACPI): Could not resolve symbol [^^^PLTF.C007._PSS], AE_NOT_FOUND (20210930/dswload-495)
Firmware Error (ACPI): Could not resolve symbol [^^^PLTF.C008._PSS], AE_NOT_FOUND (20210930/dswload-495)
Firmware Error (ACPI): Could not resolve symbol [^^^PLTF.C009._PSS], AE_NOT_FOUND (20210930/dswload-495)
Firmware Error (ACPI): Could not resolve symbol [^^^PLTF.C00A._PSS], AE_NOT_FOUND (20210930/dswload-495)
Firmware Error (ACPI): Could not resolve symbol [^^^PLTF.C00B._PSS], AE_NOT_FOUND (20210930/dswload-495)
Firmware Error (ACPI): Could not resolve symbol [^^^PLTF.C00C._PSS], AE_NOT_FOUND (20210930/dswload-495)
Firmware Error (ACPI): Could not resolve symbol [^^^PLTF.C00D._PSS], AE_NOT_FOUND (20210930/dswload-495)
Firmware Error (ACPI): Could not resolve symbol [^^^PLTF.C00E._PSS], AE_NOT_FOUND (20210930/dswload-495)
Firmware Error (ACPI): Could not resolve symbol [^^^PLTF.C00F._PSS], AE_NOT_FOUND (20210930/dswload-495)
Firmware Error (ACPI): Could not resolve symbol [^^^PLTF.C000.PPCV], AE_NOT_FOUND (20210930/dswload-495)
Firmware Error (ACPI): Could not resolve symbol [^^^PLTF.C001.PPCV], AE_NOT_FOUND (20210930/dswload-495)
Firmware Error (ACPI): Could not resolve symbol [^^^PLTF.C002.PPCV], AE_NOT_FOUND (20210930/dswload-495)
Firmware Error (ACPI): Could not resolve symbol [^^^PLTF.C003.PPCV], AE_NOT_FOUND (20210930/dswload-495)
Firmware Error (ACPI): Could not resolve symbol [^^^PLTF.C004.PPCV], AE_NOT_FOUND (20210930/dswload-495)
Firmware Error (ACPI): Could not resolve symbol [^^^PLTF.C005.PPCV], AE_NOT_FOUND (20210930/dswload-495)
Firmware Error (ACPI): Could not resolve symbol [^^^PLTF.C006.PPCV], AE_NOT_FOUND (20210930/dswload-495)
Firmware Error (ACPI): Could not resolve symbol [^^^PLTF.C007.PPCV], AE_NOT_FOUND (20210930/dswload-495)
Firmware Error (ACPI): Could not resolve symbol [^^^PLTF.C008.PPCV], AE_NOT_FOUND (20210930/dswload-495)
Firmware Error (ACPI): Could not resolve symbol [^^^PLTF.C009.PPCV], AE_NOT_FOUND (20210930/dswload-495)
Firmware Error (ACPI): Could not resolve symbol [^^^PLTF.C00A.PPCV], AE_NOT_FOUND (20210930/dswload-495)
Firmware Error (ACPI): Could not resolve symbol [^^^PLTF.C00B.PPCV], AE_NOT_FOUND (20210930/dswload-495)
Firmware Error (ACPI): Could not resolve symbol [^^^PLTF.C00C.PPCV], AE_NOT_FOUND (20210930/dswload-495)
Firmware Error (ACPI): Could not resolve symbol [^^^PLTF.C00D.PPCV], AE_NOT_FOUND (20210930/dswload-495)
Firmware Error (ACPI): Could not resolve symbol [^^^PLTF.C00E.PPCV], AE_NOT_FOUND (20210930/dswload-495)
Firmware Error (ACPI): Could not resolve symbol [^^^PLTF.C00F.PPCV], AE_NOT_FOUND (20210930/dswload-495)
Firmware Error (ACPI): Could not resolve symbol [^PCI0.LPCB.EC0.ECMX], AE_NOT_FOUND (20210930/dswload2-480)
Firmware Error (ACPI): Could not resolve symbol [^PCI0.LPCB.EC0.ECRG], AE_NOT_FOUND (20210930/dswload2-480)
Firmware Error (ACPI): Could not resolve symbol [^PCI0.LPCB.EC0.PSCF], AE_NOT_FOUND (20210930/dswload2-480)
Firmware Error (ACPI): Could not resolve symbol [^PCI0.LPCB.EC0.BCSC], AE_NOT_FOUND (20210930/dswload2-480)
Firmware Error (ACPI): Could not resolve symbol [^^^PLTF.C000._PSS], AE_NOT_FOUND (20210930/dswload2-480)
Firmware Error (ACPI): Could not resolve symbol [^^^PLTF.C001._PSS], AE_NOT_FOUND (20210930/dswload2-480)
Firmware Error (ACPI): Could not resolve symbol [^^^PLTF.C002._PSS], AE_NOT_FOUND (20210930/dswload2-480)
Firmware Error (ACPI): Could not resolve symbol [^^^PLTF.C003._PSS], AE_NOT_FOUND (20210930/dswload2-480)
Firmware Error (ACPI): Could not resolve symbol [^^^PLTF.C004._PSS], AE_NOT_FOUND (20210930/dswload2-480)
Firmware Error (ACPI): Could not resolve symbol [^^^PLTF.C005._PSS], AE_NOT_FOUND (20210930/dswload2-480)
Firmware Error (ACPI): Could not resolve symbol [^^^PLTF.C006._PSS], AE_NOT_FOUND (20210930/dswload2-480)
Firmware Error (ACPI): Could not resolve symbol [^^^PLTF.C007._PSS], AE_NOT_FOUND (20210930/dswload2-480)
Firmware Error (ACPI): Could not resolve symbol [^^^PLTF.C008._PSS], AE_NOT_FOUND (20210930/dswload2-480)
Firmware Error (ACPI): Could not resolve symbol [^^^PLTF.C009._PSS], AE_NOT_FOUND (20210930/dswload2-480)
Firmware Error (ACPI): Could not resolve symbol [^^^PLTF.C00A._PSS], AE_NOT_FOUND (20210930/dswload2-480)
Firmware Error (ACPI): Could not resolve symbol [^^^PLTF.C00B._PSS], AE_NOT_FOUND (20210930/dswload2-480)
Firmware Error (ACPI): Could not resolve symbol [^^^PLTF.C00C._PSS], AE_NOT_FOUND (20210930/dswload2-480)
Firmware Error (ACPI): Could not resolve symbol [^^^PLTF.C00D._PSS], AE_NOT_FOUND (20210930/dswload2-480)
Firmware Error (ACPI): Could not resolve symbol [^^^PLTF.C00E._PSS], AE_NOT_FOUND (20210930/dswload2-480)
Firmware Error (ACPI): Could not resolve symbol [^^^PLTF.C00F._PSS], AE_NOT_FOUND (20210930/dswload2-480)
Firmware Error (ACPI): Could not resolve symbol [^^^PLTF.C000.PPCV], AE_NOT_FOUND (20210930/dswload2-480)
Firmware Error (ACPI): Could not resolve symbol [^^^PLTF.C001.PPCV], AE_NOT_FOUND (20210930/dswload2-480)
Firmware Error (ACPI): Could not resolve symbol [^^^PLTF.C002.PPCV], AE_NOT_FOUND (20210930/dswload2-480)
Firmware Error (ACPI): Could not resolve symbol [^^^PLTF.C003.PPCV], AE_NOT_FOUND (20210930/dswload2-480)
Firmware Error (ACPI): Could not resolve symbol [^^^PLTF.C004.PPCV], AE_NOT_FOUND (20210930/dswload2-480)
Firmware Error (ACPI): Could not resolve symbol [^^^PLTF.C005.PPCV], AE_NOT_FOUND (20210930/dswload2-480)
Firmware Error (ACPI): Could not resolve symbol [^^^PLTF.C006.PPCV], AE_NOT_FOUND (20210930/dswload2-480)
Firmware Error (ACPI): Could not resolve symbol [^^^PLTF.C007.PPCV], AE_NOT_FOUND (20210930/dswload2-480)
Firmware Error (ACPI): Could not resolve symbol [^^^PLTF.C008.PPCV], AE_NOT_FOUND (20210930/dswload2-480)
Firmware Error (ACPI): Could not resolve symbol [^^^PLTF.C009.PPCV], AE_NOT_FOUND (20210930/dswload2-480)
Firmware Error (ACPI): Could not resolve symbol [^^^PLTF.C00A.PPCV], AE_NOT_FOUND (20210930/dswload2-480)
Firmware Error (ACPI): Could not resolve symbol [^^^PLTF.C00B.PPCV], AE_NOT_FOUND (20210930/dswload2-480)
Firmware Error (ACPI): Could not resolve symbol [^^^PLTF.C00C.PPCV], AE_NOT_FOUND (20210930/dswload2-480)
Firmware Error (ACPI): Could not resolve symbol [^^^PLTF.C00D.PPCV], AE_NOT_FOUND (20210930/dswload2-480)
Firmware Error (ACPI): Could not resolve symbol [^^^PLTF.C00E.PPCV], AE_NOT_FOUND (20210930/dswload2-480)
Firmware Error (ACPI): Could not resolve symbol [^^^PLTF.C00F.PPCV], AE_NOT_FOUND (20210930/dswload2-480)
/*
 * Intel ACPI Component Architecture
 * AML/ASL+ Disassembler version 20210930 (64-bit version)
 * Copyright (c) 2000 - 2021 Intel Corporation
 * 
 * Disassembling to symbolic ASL+ operators
 *
 * Disassembly of acpdump.din, Wed Mar 30 16:10:33 2022
 *
 * Original Table Header:
 *     Signature        "DSDT"
 *     Length           0x000227D2 (141266)
 *     Revision         0x02
 *     Checksum         0x91
 *     OEM ID           "HPQOEM"
 *     OEM Table ID     "8730    "
 *     OEM Revision     0x00000000 (0)
 *     Compiler ID      "INTL"
 *     Compiler Version 0x20160527 (538314023)
 */
DefinitionBlock ("", "DSDT", 2, "HPQOEM", "8730    ", 0x00000000)
{
    /*
     * iASL Warning: There were 47 external control methods found during
     * disassembly, but only 46 were resolved (1 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (_GPE, DeviceObj)
    External (_GPE.SP00, MethodObj)    // 0 Arguments
    External (_GPE.SP01, MethodObj)    // 0 Arguments
    External (_GPE.SP02, MethodObj)    // 0 Arguments
    External (_GPE.SP03, MethodObj)    // 0 Arguments
    External (_GPE.SP04, MethodObj)    // 0 Arguments
    External (_GPE.SP05, MethodObj)    // 0 Arguments
    External (_GPE.SP06, MethodObj)    // 0 Arguments
    External (_GPE.SP07, MethodObj)    // 0 Arguments
    External (_SB_.ALIB, MethodObj)    // 2 Arguments
    External (_SB_.APTS, MethodObj)    // 1 Arguments
    External (_SB_.AWAK, MethodObj)    // 1 Arguments
    External (_SB_.CAGS, MethodObj)    // 1 Arguments
    External (_SB_.GPIO, DeviceObj)
    External (_SB_.IPTS, MethodObj)    // 1 Arguments
    External (_SB_.IWAK, MethodObj)    // 1 Arguments
    External (_SB_.M263, MethodObj)    // 1 Arguments
    External (_SB_.M264, MethodObj)    // 1 Arguments
    External (_SB_.M284, MethodObj)    // 1 Arguments
    External (_SB_.PCI0, DeviceObj)
    External (_SB_.PCI0.ACEL.GATH, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.BUSA.ACP_, DeviceObj)
    External (_SB_.PCI0.BUSA.GFX0.G01F, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.BUSA.HDEF, DeviceObj)
    External (_SB_.PCI0.BUSB.SAT1, DeviceObj)
    External (_SB_.PCI0.BUSB.SATA, DeviceObj)
    External (_SB_.PCI0.G0BA, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.G0BB, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.G0CA, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GP13, DeviceObj)
    External (_SB_.PCI0.GP13.NCRD, DeviceObj)
    External (_SB_.PCI0.HGME, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.LPCB, DeviceObj)
    External (_SB_.PCI0.LPCB.EC0_, DeviceObj)
    External (_SB_.PCI0.LPCB.EC0_.ACPR, IntObj)
    External (_SB_.PCI0.LPCB.EC0_.ACS1, IntObj)
    External (_SB_.PCI0.LPCB.EC0_.ADP_, IntObj)
    External (_SB_.PCI0.LPCB.EC0_.BDC_, IntObj)
    External (_SB_.PCI0.LPCB.EC0_.BDV_, IntObj)
    External (_SB_.PCI0.LPCB.EC0_.CLID, IntObj)
    External (_SB_.PCI0.LPCB.EC0_.EC10, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.LPCB.EC0_.EC12, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.LPCB.EC0_.EC13, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.LPCB.EC0_.ECMX, MutexObj)
    External (_SB_.PCI0.LPCB.EC0_.ECRG, IntObj)
    External (_SB_.PCI0.LPCB.EC0_.ECRM, OpRegionObj)
    External (_SB_.PCI0.LPCB.EC0_.KBBL, FieldUnitObj)
    External (_SB_.PCI0.LPCB.EC0_.PSSB, FieldUnitObj)
    External (_SB_.PCI0.LPCB.EC0_.WWP_, FieldUnitObj)
    External (_SB_.PCXX.GPXX.SAXX.TPTS, MethodObj)    // 1 Arguments
    External (_SB_.PCXX.GPXX.SAXX.TWAK, MethodObj)    // 1 Arguments
    External (_SB_.PCXX.SAXX.TPTS, MethodObj)    // 1 Arguments
    External (_SB_.PCXX.SAXX.TWAK, MethodObj)    // 1 Arguments
    External (_SB_.PLTF, DeviceObj)
    External (_SB_.PLTF.C008.PPCV, UnknownObj)
    External (_SB_.PLTF.C009.PPCV, UnknownObj)
    External (_SB_.PLTF.C00A.PPCV, UnknownObj)
    External (_SB_.PLTF.C00B.PPCV, UnknownObj)
    External (_SB_.PLTF.C00C.PPCV, UnknownObj)
    External (_SB_.PLTF.C00D.PPCV, UnknownObj)
    External (_SB_.PLTF.C00E.PPCV, UnknownObj)
    External (_SB_.PLTF.C00F.PPCV, UnknownObj)
    External (_SB_.TPM_.PTS_, MethodObj)    // 1 Arguments
    External (_SB_.UBTC, DeviceObj)
    External (_SB_.WMIV.GVWE, MethodObj)    // 2 Arguments
    External (_TZ_.BOTT, MethodObj)    // 0 Arguments
    External (_TZ_.RETD, MethodObj)    // 0 Arguments
    External (ADP_, IntObj)
    External (BDC_, IntObj)
    External (BDV_, IntObj)
    External (CDP1, UnknownObj)
    External (DS21, FieldUnitObj)
    External (DS22, FieldUnitObj)
    External (DS23, FieldUnitObj)
    External (DS24, FieldUnitObj)
    External (DS25, FieldUnitObj)
    External (DS26, FieldUnitObj)
    External (DS27, FieldUnitObj)
    External (DS28, FieldUnitObj)
    External (DS29, FieldUnitObj)
    External (DS2A, FieldUnitObj)
    External (DS31, FieldUnitObj)
    External (DS32, FieldUnitObj)
    External (DS33, FieldUnitObj)
    External (DS34, FieldUnitObj)
    External (DS35, FieldUnitObj)
    External (DS36, FieldUnitObj)
    External (DS37, FieldUnitObj)
    External (DS38, FieldUnitObj)
    External (DS39, FieldUnitObj)
    External (DS3A, FieldUnitObj)
    External (DS41, FieldUnitObj)
    External (DS42, FieldUnitObj)
    External (DS43, FieldUnitObj)
    External (DS44, FieldUnitObj)
    External (DS45, FieldUnitObj)
    External (DS46, FieldUnitObj)
    External (DS47, FieldUnitObj)
    External (DS48, FieldUnitObj)
    External (DS49, FieldUnitObj)
    External (DS4A, FieldUnitObj)
    External (DWNS, FieldUnitObj)
    External (DWRS, FieldUnitObj)
    External (EC14, FieldUnitObj)
    External (EC15, FieldUnitObj)
    External (ECRG, IntObj)
    External (ECRM, MethodObj)    // Warning: Unknown method, guessing 4 arguments
    External (FDRS, FieldUnitObj)
    External (GSWS, MethodObj)    // 1 Arguments
    External (M000, MethodObj)    // 1 Arguments
    External (M017, MethodObj)    // 6 Arguments
    External (M019, MethodObj)    // 4 Arguments
    External (M037, DeviceObj)
    External (M038, MethodObj)    // 1 Arguments
    External (M039, MethodObj)    // 2 Arguments
    External (M046, DeviceObj)
    External (M047, DeviceObj)
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M082, FieldUnitObj)
    External (M083, FieldUnitObj)
    External (M084, FieldUnitObj)
    External (M085, FieldUnitObj)
    External (M086, FieldUnitObj)
    External (M087, FieldUnitObj)
    External (M088, FieldUnitObj)
    External (M089, FieldUnitObj)
    External (M090, FieldUnitObj)
    External (M091, FieldUnitObj)
    External (M092, FieldUnitObj)
    External (M093, FieldUnitObj)
    External (M094, FieldUnitObj)
    External (M095, FieldUnitObj)
    External (M096, FieldUnitObj)
    External (M097, FieldUnitObj)
    External (M098, FieldUnitObj)
    External (M099, FieldUnitObj)
    External (M100, FieldUnitObj)
    External (M101, FieldUnitObj)
    External (M102, FieldUnitObj)
    External (M103, FieldUnitObj)
    External (M104, FieldUnitObj)
    External (M105, FieldUnitObj)
    External (M106, FieldUnitObj)
    External (M107, FieldUnitObj)
    External (M108, FieldUnitObj)
    External (M109, FieldUnitObj)
    External (M110, FieldUnitObj)
    External (M115, BuffObj)
    External (M116, BuffFieldObj)
    External (M117, BuffFieldObj)
    External (M118, BuffFieldObj)
    External (M119, BuffFieldObj)
    External (M120, BuffFieldObj)
    External (M122, FieldUnitObj)
    External (M127, DeviceObj)
    External (M128, FieldUnitObj)
    External (M131, FieldUnitObj)
    External (M132, FieldUnitObj)
    External (M133, FieldUnitObj)
    External (M134, FieldUnitObj)
    External (M135, FieldUnitObj)
    External (M136, FieldUnitObj)
    External (M220, FieldUnitObj)
    External (M221, FieldUnitObj)
    External (M226, FieldUnitObj)
    External (M227, DeviceObj)
    External (M229, FieldUnitObj)
    External (M231, FieldUnitObj)
    External (M233, FieldUnitObj)
    External (M235, FieldUnitObj)
    External (M249, MethodObj)    // 4 Arguments
    External (M250, MethodObj)    // 5 Arguments
    External (M251, FieldUnitObj)
    External (M276, MethodObj)    // 0 Arguments
    External (M277, MethodObj)    // 0 Arguments
    External (M280, FieldUnitObj)
    External (M290, FieldUnitObj)
    External (M310, FieldUnitObj)
    External (M320, FieldUnitObj)
    External (M321, FieldUnitObj)
    External (M322, FieldUnitObj)
    External (M323, FieldUnitObj)
    External (M324, FieldUnitObj)
    External (M325, FieldUnitObj)
    External (M326, FieldUnitObj)
    External (M327, FieldUnitObj)
    External (M328, FieldUnitObj)
    External (M329, DeviceObj)
    External (M32A, DeviceObj)
    External (M32B, DeviceObj)
    External (M330, DeviceObj)
    External (M331, FieldUnitObj)
    External (M378, FieldUnitObj)
    External (M379, FieldUnitObj)
    External (M380, FieldUnitObj)
    External (M381, FieldUnitObj)
    External (M382, FieldUnitObj)
    External (M383, FieldUnitObj)
    External (M384, FieldUnitObj)
    External (M385, FieldUnitObj)
    External (M386, FieldUnitObj)
    External (M387, FieldUnitObj)
    External (M388, FieldUnitObj)
    External (M389, FieldUnitObj)
    External (M390, FieldUnitObj)
    External (M391, FieldUnitObj)
    External (M392, FieldUnitObj)
    External (M404, DeviceObj)
    External (M414, FieldUnitObj)
    External (MOEM, MethodObj)    // 3 Arguments
    External (NF2A, FieldUnitObj)
    External (NF2B, FieldUnitObj)
    External (NF2M, FieldUnitObj)
    External (NF5A, FieldUnitObj)
    External (NF5B, FieldUnitObj)
    External (NF5M, FieldUnitObj)
    External (NJ2A, FieldUnitObj)
    External (NJ2B, FieldUnitObj)
    External (NJ2M, FieldUnitObj)
    External (NJ5A, FieldUnitObj)
    External (NJ5B, FieldUnitObj)
    External (NJ5M, FieldUnitObj)
    External (NR2A, FieldUnitObj)
    External (NR2B, FieldUnitObj)
    External (NR2M, FieldUnitObj)
    External (NR5A, FieldUnitObj)
    External (NR5B, FieldUnitObj)
    External (NR5M, FieldUnitObj)
    External (RFCR, IntObj)
    External (TPLD, MethodObj)    // 2 Arguments
    External (TPM_._STA, UnknownObj)
    External (WGEN, FieldUnitObj)
    External (WGR1, FieldUnitObj)
    External (WGR2, FieldUnitObj)
    External (WGR3, FieldUnitObj)
    External (WGR4, FieldUnitObj)
    External (WRD1, FieldUnitObj)
    External (WRD2, FieldUnitObj)
    External (WTX0, FieldUnitObj)
    External (WTX1, FieldUnitObj)
    External (WTX2, FieldUnitObj)
    External (WTX3, FieldUnitObj)
    External (WTX4, FieldUnitObj)
    External (WTX5, FieldUnitObj)
    External (WTX6, FieldUnitObj)
    External (WTX7, FieldUnitObj)
    External (WTX8, FieldUnitObj)
    External (WTX9, FieldUnitObj)
    External (WTXE, FieldUnitObj)

    OperationRegion (HPSA, SystemMemory, 0xB82EF000, 0x00000008)
    Field (HPSA, AnyAcc, Lock, Preserve)
    {
        SFG1,   4, 
        SFG2,   4, 
        Offset (0x04), 
        LPDP,   16, 
        OSIF,   8, 
        PRDT,   8
    }

    Name (GOSI, 0xFF)
    Method (GTOS, 0, Serialized)
    {
        If ((GOSI == 0xFF))
        {
            GOSI = Zero
            If (CondRefOf (\_OSI))
            {
                If (_OSI ("Linux"))
                {
                    GOSI = One
                }

                If (_OSI ("Windows 2001"))
                {
                    GOSI = 0x04
                }

                If (_OSI ("Windows 2001 SP1"))
                {
                    GOSI = 0x04
                }

                If (_OSI ("Windows 2001 SP2"))
                {
                    GOSI = 0x05
                }

                If (_OSI ("Windows 2006"))
                {
                    GOSI = 0x06
                }

                If (_OSI ("Windows 2009"))
                {
                    GOSI = 0x07
                }

                If (_OSI ("Windows 2012"))
                {
                    GOSI = 0x08
                }

                If (_OSI ("Windows 2013"))
                {
                    GOSI = 0x09
                }

                If (_OSI ("Windows 2015"))
                {
                    GOSI = 0x0A
                }

                If (_OSI ("Windows 2016"))
                {
                    GOSI = 0x0B
                }

                If (_OSI ("Windows 2017"))
                {
                    GOSI = 0x0C
                }
            }

            OSIF = GOSI /* \GOSI */
        }

        Return (GOSI) /* \GOSI */
    }

    Method (B2I4, 3, Serialized)
    {
        Name (INTE, 0xFFFFFFFF)
        INTE &= Zero
        Local2 = Arg2
        If ((Local2 > 0x04))
        {
            Local2 = 0x04
        }

        Local1 = (Arg1 * 0x08)
        Local3 = (Local2 * 0x08)
        CreateField (Arg0, Local1, Local3, TINT)
        INTE = TINT /* \B2I4.TINT */
        Return (INTE) /* \B2I4.INTE */
    }

    Name (B2SD, "                                                                                                                                                                                                                                                               ")
    Name
    Method (B2ST, 2, Serialized)
    {
        If ((Arg1 > Zero))
        {
            Local0 = Buffer (Arg1){}
            Local0 = Arg0
            If ((Arg1 > 0x0100))
            {
                B2S4 = Local0
                Local1 = B2S4 /* \B2S4 */
            }
            Else
            {
                B2SD = Local0
                Local1 = B2SD /* \B2SD */
            }
        }
        Else
        {
            B2SD = Arg0
            Local1 = B2SD /* \B2SD */
        }

        Return (Local1)
    }

    Method (CPBF, 5, Serialized)
    {
        Local7 = Zero
        Local1 = DerefOf (Arg1)
        Local3 = DerefOf (Arg3)
        If ((((Local1 + Arg4) <= SizeOf (Arg0)) && (
            (Local3 + Arg4) <= SizeOf (Arg2))))
        {
            CreateField (Arg0, (Local1 * 0x08), (Arg4 * 0x08), DEST)
            CreateField (Arg2, (Local3 * 0x08), (Arg4 * 0x08), SRCE)
            DEST = SRCE /* \CPBF.SRCE */
            Local7 = One
            Local1 += Arg4
            Local3 += Arg4
            Arg1 = Local1
            Arg3 = Local3
        }

        Return (Local7)
    }

    OperationRegion (HPMA, SystemMemory, 0xB82D1000, 0x0000005C)
    Field (HPMA, AnyAcc, Lock, Preserve)
    {
        RVD2,   4, 
        LEGF,   1, 
        KCDB,   1, 
        KLDB,   1, 
        TPMX,   1, 
        FOAL,   1, 
        AEDA,   1, 
        ALSF,   1, 
        HSED,   1, 
        HDEN,   1, 
        MDEN,   1, 
        ICPT,   1, 
        PMCS,   1, 
        RVD1,   3, 
        ITPS,   1, 
        FCIN,   1, 
        RSVD,   11, 
        TBDO,   8, 
        TBRB,   32, 
        TJMX,   8, 
        TRCN,   8, 
        LOTR,   160, 
        HITR,   160, 
        DTCD,   32, 
        SMHO,   32, 
        IVPS,   8, 
        BLPS,   8, 
        UR0B,   32, 
        AC10,   32, 
        AC11,   32, 
        AC12,   32, 
        CFAP,   8, 
        CFIG,   32, 
        CFPG,   32, 
        AMFR,   32, 
        SNMT,   8, 
        SZMD,   8
    }

    OperationRegion (HPEC, SystemMemory, 0xB82EC000, 0x00000004)
    Field (HPEC, AnyAcc, Lock, Preserve)
    {
        EC14,   16, 
        EC15,   16
    }

    OperationRegion (HPGF, SystemMemory, 0xB82EB000, 0x0000026E)
    Field (HPGF, AnyAcc, Lock, Preserve)
    {
        G03E,   2048, 
        G07D,   32, 
        G07E,   8, 
        G07F,   8, 
        G080,   8, 
        G081,   8, 
        G082,   88, 
        G083,   216, 
        G084,   200, 
        G085,   400, 
        G086,   16, 
        G087,   16, 
        G088,   8, 
        G089,   88, 
        G08A,   176, 
        G08B,   32, 
        G08C,   32, 
        G08D,   8, 
        G08E,   8, 
        G08F,   16, 
        G090,   16, 
        G091,   16, 
        G092,   16, 
        G093,   8, 
        G045,   8, 
        G094,   8, 
        G03F,   32, 
        G040,   8, 
        G041,   32, 
        G042,   32, 
        G043,   32, 
        G044,   32, 
        G046,   8, 
        G047,   8, 
        G048,   32, 
        G049,   8, 
        G04A,   8, 
        G04B,   32, 
        G04C,   8, 
        G04D,   8, 
        G04E,   32, 
        G04F,   8, 
        G050,   8, 
        G051,   32, 
        G052,   8, 
        G076,   32, 
        G077,   32, 
        G078,   32, 
        G079,   224, 
        G095,   32, 
        G096,   32, 
        G053,   8, 
        G054,   32, 
        G055,   8, 
        G056,   8, 
        G057,   32, 
        G058,   8, 
        G059,   8, 
        G05A,   32, 
        G05B,   8, 
        G05C,   8, 
        G05D,   32, 
        G05E,   8, 
        G05F,   8, 
        G060,   8, 
        G064,   8, 
        G065,   8, 
        G066,   8, 
        G061,   32, 
        G062,   32, 
        G067,   32, 
        G068,   32, 
        G069,   8, 
        G06A,   8, 
        G06B,   8, 
        G06C,   8, 
        G06D,   32, 
        G063,   8, 
        G06E,   8, 
        G06F,   8, 
        G070,   8, 
        G071,   8, 
        G072,   8, 
        G073,   16, 
        G074,   32, 
        G07A,   32, 
        G07B,   32, 
        G07C,   32, 
        G0BD,   16, 
        G0B7,   8, 
        G0C2,   8, 
        G0C3,   8, 
        G0C4,   32, 
        G0C5,   8, 
        G0C6,   8, 
        G0C7,   8, 
        G0C8,   8, 
        G0A0,   8, 
        G0C9,   8
    }

    OperationRegion (HPCD, SystemMemory, 0xB82ED000, 0x000000FF)
    Field (HPCD, AnyAcc, Lock, Preserve)
    {
        CDP1,   32, 
        CDP2,   32, 
        WDDA,   896, 
        WFLS,   8, 
        WLID,   8, 
        BTID,   8, 
        WWID,   8, 
        W2ID,   8, 
        GSID,   8, 
        WGID,   8, 
        WRD1,   16, 
        WRD2,   16, 
        WTXE,   8, 
        WTX0,   8, 
        WTX1,   8, 
        WTX2,   8, 
        WTX3,   8, 
        WTX4,   8, 
        WTX5,   8, 
        WTX6,   8, 
        WTX7,   8, 
        WTX8,   8, 
        WTX9,   8, 
        WGEN,   8, 
        WGR1,   8, 
        WGR2,   8, 
        WGR3,   8, 
        WGR4,   8, 
        DSDG,   8, 
        DWRS,   8, 
        DWNS,   8, 
        DS21,   8, 
        DS22,   8, 
        DS23,   8, 
        DS24,   8, 
        DS25,   8, 
        DS26,   8, 
        DS27,   8, 
        DS28,   8, 
        DS29,   8, 
        DS2A,   8, 
        DS31,   8, 
        DS32,   8, 
        DS33,   8, 
        DS34,   8, 
        DS35,   8, 
        DS36,   8, 
        DS37,   8, 
        DS38,   8, 
        DS39,   8, 
        DS3A,   8, 
        DS41,   8, 
        DS42,   8, 
        DS43,   8, 
        DS44,   8, 
        DS45,   8, 
        DS46,   8, 
        DS47,   8, 
        DS48,   8, 
        DS49,   8, 
        DS4A,   8, 
        DSCS,   32, 
        NF2M,   8, 
        NF2A,   8, 
        NF2B,   8, 
        NF5M,   8, 
        NF5A,   8, 
        NF5B,   8, 
        NJ2M,   8, 
        NJ2A,   8, 
        NJ2B,   8, 
        NJ5M,   8, 
        NJ5A,   8, 
        NJ5B,   8, 
        NR2M,   8, 
        NR2A,   8, 
        NR2B,   8, 
        NR5M,   8, 
        NR5A,   8, 
        NR5B,   8, 
        WOWA,   8, 
        WWIG,   8, 
        UGPS,   8, 
        WWBR,   32, 
        WPPE,   32, 
        WPWK,   32, 
        WCLN,   16, 
        CDKP,   192, 
        RFGN,   32, 
        RFCR,   32, 
        WPWN,   32
    }

    OperationRegion (HPWM, SystemMemory, 0xB82D7000, 0x00009018)
    Field (HPWM, AnyAcc, NoLock, Preserve)
    {
        PWOT,   32, 
        PWOI,   32, 
        PUWB,   294912, 
        PUWS,   32, 
        STIC,   16, 
        INIC,   16, 
        ENIC,   16, 
        OLIC,   16, 
        PWIC,   16, 
        BUIC,   16
    }

    Field (HPWM, AnyAcc, NoLock, Preserve)
    {
        Offset (0x08), 
        PWBL,   8000
    }

    Field (HPWM, AnyAcc, NoLock, Preserve)
    {
        Offset (0x08), 
        PWBM,   3200
    }

    Field (HPWM, AnyAcc, NoLock, Preserve)
    {
        Offset (0x08), 
        PWBS,   1200
    }

    Device (_SB.WMIB)
    {
        Name (_HID, EisaId ("PNP0C14") /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
        Name (_UID, One)  // _UID: Unique ID
        Mutex (PUMX, 0x00)
        Name (WDG, Buffer (0xF0)
        {
            /* 0000 */  0xE3, 0x08, 0x8D, 0x98, 0xF4, 0x68, 0x35, 0x4C,  // .....h5L
            /* 0008 */  0xAF, 0x3E, 0x6A, 0x1B, 0x81, 0x06, 0xF8, 0x3C,  // .>j....<
            /* 0010 */  0x53, 0x54, 0x00, 0x00, 0x3D, 0xDE, 0x32, 0x82,  // ST..=.2.
            /* 0018 */  0x3D, 0x66, 0x27, 0x43, 0xA8, 0xF4, 0xE2, 0x93,  // =f'C....
            /* 0020 */  0xAD, 0xB9, 0xBF, 0x05, 0x49, 0x4E, 0x00, 0x00,  // ....IN..
            /* 0028 */  0x49, 0x4B, 0x11, 0x2D, 0xFB, 0x2D, 0x30, 0x41,  // IK.-.-0A
            /* 0030 */  0xB8, 0xFE, 0x4A, 0x3C, 0x09, 0xE7, 0x51, 0x33,  // ..J<..Q3
            /* 0038 */  0x45, 0x4E, 0x00, 0x00, 0x46, 0x97, 0xEA, 0x14,  // EN..F...
            /* 0040 */  0x1F, 0xCE, 0x98, 0x40, 0xA0, 0xE0, 0x70, 0x45,  // ...@..pE
            /* 0048 */  0xCB, 0x4D, 0xA7, 0x45, 0x4F, 0x4C, 0x00, 0x00,  // .M.EOL..
            /* 0050 */  0x28, 0x20, 0x2F, 0x32, 0x84, 0x0F, 0x01, 0x49,  // ( /2...I
            /* 0058 */  0x98, 0x8E, 0x01, 0x51, 0x76, 0x04, 0x9E, 0x2D,  // ...Qv..-
            /* 0060 */  0x50, 0x57, 0x00, 0x00, 0xB6, 0x63, 0x4E, 0xDF,  // PW...cN.
            /* 0068 */  0xBC, 0x3B, 0x58, 0x48, 0x97, 0x37, 0xC7, 0x4F,  // .;XH.7.O
            /* 0070 */  0x82, 0xF8, 0x21, 0xF3, 0x42, 0x55, 0x00, 0x00,  // ..!.BU..
            /* 0078 */  0x2D, 0x7C, 0x22, 0x41, 0xE1, 0x80, 0x3F, 0x42,  // -|"A..?B
            /* 0080 */  0x8B, 0x8E, 0x87, 0xE3, 0x27, 0x55, 0xA0, 0xEB,  // ....'U..
            /* 0088 */  0x50, 0x45, 0x02, 0x00, 0x36, 0x64, 0x1F, 0x8F,  // PE..6d..
            /* 0090 */  0x42, 0x9F, 0xC8, 0x42, 0xBA, 0xDC, 0x0E, 0x94,  // B..B....
            /* 0098 */  0x24, 0xF2, 0x0C, 0x9A, 0x53, 0x53, 0x00, 0x00,  // $...SS..
            /* 00A0 */  0xEB, 0x91, 0x4C, 0x1F, 0x5C, 0xDC, 0x0B, 0x46,  // ..L.\..F
            /* 00A8 */  0x95, 0x1D, 0xC7, 0xCB, 0x9B, 0x4B, 0x8D, 0x5E,  // .....K.^
            /* 00B0 */  0x42, 0x53, 0x01, 0x02, 0x61, 0xA6, 0x91, 0x73,  // BS..a..s
            /* 00B8 */  0x3A, 0x22, 0xDB, 0x47, 0xA7, 0x7A, 0x7B, 0xE8,  // :".G.z{.
            /* 00C0 */  0x4C, 0x60, 0x82, 0x2D, 0x55, 0x49, 0x01, 0x02,  // L`.-UI..
            /* 00C8 */  0x18, 0x43, 0x81, 0x2B, 0xE8, 0x4B, 0x07, 0x47,  // .C.+.K.G
            /* 00D0 */  0x9D, 0x84, 0xA1, 0x90, 0xA8, 0x59, 0xB5, 0xD0,  // .....Y..
            /* 00D8 */  0x80, 0x00, 0x01, 0x08, 0x21, 0x12, 0x90, 0x05,  // ....!...
            /* 00E0 */  0x66, 0xD5, 0xD1, 0x11, 0xB2, 0xF0, 0x00, 0xA0,  // f.......
            /* 00E8 */  0xC9, 0x06, 0x29, 0x10, 0x5A, 0x5A, 0x01, 0x00   // ..).ZZ..
        })
        Name (WDUN, Ones)
        Method (_WDG, 0, Serialized)
        {
            If (WDUN)
            {
                Acquire (PUMX, 0xFFFF)
                WDUN = Zero
                GSWS (0x04F3)
                UWIC (Zero, STIC)
                UWIC (One, INIC)
                UWIC (0x02, ENIC)
                UWIC (0x03, OLIC)
                If ((PWIC == Zero))
                {
                    Local0 = One
                }
                Else
                {
                    Local0 = PWIC /* \PWIC */
                }

                UWIC (0x04, Local0)
                UWIC (0x05, BUIC)
                UWIC (0x06, SizeOf (CBWE))
                UWIC (0x07, WSSC)
                Release (PUMX)
            }

            Return (WDG) /* \_SB_.WMIB.WDG_ */
        }

        Method (UWIC, 2, Serialized)
        {
            Local0 = (Arg0 * 0x14)
            Local0 += 0x12
            WDG [Local0] = Arg1
        }

        Name (WQZZ, Buffer (0x1CF5)
        {
            /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
            /* 0008 */  0xE5, 0x1C, 0x00, 0x00, 0x18, 0x96, 0x00, 0x00,  // ........
            /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
            /* 0018 */  0x28, 0xB9, 0x86, 0x00, 0x01, 0x06, 0x18, 0x42,  // (......B
            /* 0020 */  0x10, 0x3D, 0x10, 0x92, 0x64, 0x82, 0x42, 0x04,  // .=..d.B.
            /* 0028 */  0x12, 0x01, 0x61, 0x18, 0x14, 0x01, 0x01, 0x92,  // ..a.....
            /* 0030 */  0x0B, 0x0E, 0x45, 0x82, 0x42, 0xF5, 0x27, 0x90,  // ..E.B.'.
            /* 0038 */  0x1C, 0x10, 0x99, 0x14, 0xA0, 0x5B, 0x80, 0x73,  // .....[.s
            /* 0040 */  0x01, 0xD2, 0x05, 0x18, 0x06, 0x91, 0x63, 0x01,  // ......c.
            /* 0048 */  0x96, 0x05, 0xE8, 0x44, 0x91, 0x6D, 0x10, 0x11,  // ...D.m..
            /* 0050 */  0x18, 0x2B, 0x41, 0x07, 0x10, 0x02, 0xF5, 0x00,  // .+A.....
            /* 0058 */  0x3C, 0x0A, 0xEE, 0x1A, 0x50, 0xE6, 0x47, 0x40,  // <...P.G@
            /* 0060 */  0x20, 0x0A, 0x82, 0x43, 0xC9, 0x80, 0x90, 0x72,  //  ..C...r
            /* 0068 */  0x38, 0x4D, 0xA0, 0xE4, 0x91, 0x50, 0x88, 0xC2,  // 8M...P..
            /* 0070 */  0x46, 0x83, 0x12, 0x02, 0x21, 0x87, 0x93, 0x91,  // F...!...
            /* 0078 */  0x4D, 0x01, 0x52, 0x05, 0x98, 0x15, 0x20, 0x54,  // M.R... T
            /* 0080 */  0x80, 0x45, 0x20, 0x8D, 0xC7, 0xD0, 0x4D, 0xCF,  // .E ...M.
            /* 0088 */  0x47, 0x9E, 0x21, 0x89, 0xFC, 0x41, 0xA0, 0x46,  // G.!..A.F
            /* 0090 */  0x66, 0x68, 0x1B, 0x9C, 0x96, 0x30, 0x43, 0xD6,  // fh...0C.
            /* 0098 */  0x3E, 0x2C, 0x2A, 0x16, 0x42, 0x0A, 0x20, 0x34,  // >,*.B. 4
            /* 00A0 */  0x1E, 0xF0, 0x2B, 0x14, 0xE0, 0x1B, 0x41, 0xB2,  // ..+...A.
            /* 00A8 */  0xB1, 0xC9, 0x80, 0x12, 0x0C, 0x34, 0x70, 0xF4,  // .....4p.
            /* 00B0 */  0x28, 0x3C, 0x68, 0x5C, 0x80, 0x41, 0x53, 0x51,  // (<h\.ASQ
            /* 00B8 */  0x20, 0x94, 0xC0, 0x52, 0x20, 0xE4, 0x15, 0x51,  //  ..R ..Q
            /* 00C0 */  0xF3, 0x2A, 0x11, 0x55, 0x47, 0x00, 0x8F, 0x24,  // .*.UG..$
            /* 00C8 */  0xCA, 0x63, 0x01, 0x1B, 0x37, 0xF0, 0x59, 0x85,  // .c..7.Y.
            /* 00D0 */  0x81, 0xFD, 0xFF, 0x1F, 0x18, 0x17, 0x03, 0xA2,  // ........
            /* 00D8 */  0xB1, 0x1C, 0x45, 0xD0, 0x03, 0x0F, 0x6A, 0xE1,  // ..E...j.
            /* 00E0 */  0x33, 0x27, 0x93, 0x3C, 0x46, 0x47, 0x85, 0x90,  // 3'.<FG..
            /* 00E8 */  0x04, 0x08, 0xCD, 0x21, 0x34, 0x46, 0x12, 0x84,  // ...!4F..
            /* 00F0 */  0x9C, 0x8E, 0x02, 0x05, 0x17, 0x3E, 0xCC, 0xF1,  // .....>..
            /* 00F8 */  0x19, 0xE7, 0xF8, 0x0C, 0xCF, 0x47, 0xDB, 0xFA,  // .....G..
            /* 0100 */  0xAC, 0x85, 0x10, 0x10, 0x8F, 0x73, 0x7C, 0x6C,  // .....s|l
            /* 0108 */  0xC0, 0xE0, 0x38, 0x18, 0x00, 0x87, 0x01, 0xE3,  // ..8.....
            /* 0110 */  0x13, 0x0D, 0x58, 0x4E, 0x06, 0x8C, 0x1A, 0x8F,  // ..XN....
            /* 0118 */  0xA1, 0x4F, 0x8B, 0x21, 0x1E, 0x5F, 0xD8, 0xB7,  // .O.!._..
            /* 0120 */  0x0A, 0x13, 0x54, 0x0F, 0x2A, 0x0B, 0x43, 0x03,  // ..T.*.C.
            /* 0128 */  0x0D, 0xA0, 0x87, 0x06, 0x5F, 0xE4, 0xD0, 0x4C,  // ...._..L
            /* 0130 */  0xE9, 0x21, 0x50, 0xAD, 0x78, 0x9A, 0xF7, 0x91,  // .!P.x...
            /* 0138 */  0xC7, 0x3C, 0xB7, 0x28, 0x6F, 0x03, 0xCF, 0x01,  // .<.(o...
            /* 0140 */  0xFC, 0xB4, 0xE0, 0xE1, 0xF8, 0x58, 0xE0, 0x71,  // .....X.q
            /* 0148 */  0xDA, 0x18, 0x84, 0x94, 0x41, 0xC8, 0x19, 0x84,  // ....A...
            /* 0150 */  0xA4, 0x41, 0x28, 0xD9, 0x10, 0x50, 0x83, 0xF5,  // .A(..P..
            /* 0158 */  0x10, 0x30, 0x53, 0x4D, 0xE0, 0x24, 0x23, 0x40,  // .0SM.$#@
            /* 0160 */  0x65, 0x80, 0x90, 0xD5, 0xE9, 0xEA, 0x2C, 0x12,  // e.....,.
            /* 0168 */  0xE2, 0x34, 0x7B, 0x3F, 0x16, 0x90, 0xB1, 0x3E,  // .4{?...>
            /* 0170 */  0x18, 0x58, 0xB3, 0x80, 0xFF, 0xFF, 0x08, 0xCF,  // .X......
            /* 0178 */  0x35, 0xF6, 0x99, 0x3D, 0x1D, 0x60, 0x56, 0x11,  // 5..=.`V.
            /* 0180 */  0xAE, 0xE8, 0x1B, 0x06, 0x41, 0x7B, 0xB6, 0xF0,  // ....A{..
            /* 0188 */  0x35, 0x23, 0x60, 0xB8, 0x08, 0xE1, 0xD8, 0x1D,  // 5#`.....
            /* 0190 */  0xE0, 0x24, 0x3D, 0x92, 0x08, 0x2F, 0x08, 0xEC,  // .$=../..
            /* 0198 */  0xC4, 0x10, 0xE4, 0x6D, 0xC5, 0x93, 0x37, 0xAC,  // ...m..7.
            /* 01A0 */  0xA7, 0xDC, 0x27, 0x94, 0x40, 0x83, 0x19, 0xDB,  // ..'.@...
            /* 01A8 */  0x97, 0x01, 0x36, 0x2A, 0x5F, 0x0C, 0xE0, 0xCF,  // ..6*_...
            /* 01B0 */  0x24, 0xAC, 0x91, 0x4F, 0xF4, 0x50, 0x4D, 0x30,  // $..O.PM0
            /* 01B8 */  0xF9, 0xC5, 0x00, 0xCA, 0x2C, 0x7C, 0x3D, 0xF1,  // ....,|=.
            /* 01C0 */  0x15, 0xC1, 0xA8, 0x2F, 0x06, 0x2C, 0xE5, 0xC5,  // .../.,..
            /* 01C8 */  0x00, 0x54, 0x37, 0x0C, 0x5F, 0x0C, 0xE0, 0xCB,  // .T7._...
            /* 01D0 */  0xBD, 0x18, 0x80, 0x42, 0xDC, 0x3D, 0x80, 0x7A,  // ...B.=.z
            /* 01D8 */  0x80, 0x90, 0xAC, 0x71, 0x52, 0x6B, 0x37, 0x03,  // ...qRk7.
            /* 01E0 */  0x72, 0x36, 0x60, 0x30, 0x9E, 0x61, 0x18, 0x63,  // r6`0.a.c
            /* 01E8 */  0x84, 0xF1, 0x28, 0xC3, 0x98, 0x60, 0xEE, 0xDB,  // ..(..`..
            /* 01F0 */  0x01, 0xF4, 0x9C, 0xC3, 0x40, 0x25, 0xBC, 0x1D,  // ....@%..
            /* 01F8 */  0x40, 0x39, 0x07, 0x74, 0x79, 0x34, 0xA1, 0xA7,  // @9.ty4..
            /* 0200 */  0x80, 0xA7, 0x03, 0xCF, 0xEE, 0x8D, 0xC0, 0xBE,  // ........
            /* 0208 */  0xC6, 0x2A, 0x98, 0x40, 0x11, 0x1F, 0x34, 0xF8,  // .*.@..4.
            /* 0210 */  0xD4, 0xA2, 0xF8, 0x54, 0xE0, 0xB5, 0xD4, 0x08,  // ...T....
            /* 0218 */  0x27, 0x9C, 0x33, 0xF1, 0x54, 0x0D, 0x67, 0xA0,  // '.3.T.g.
            /* 0220 */  0xAA, 0xE1, 0x10, 0xFF, 0x7F, 0x38, 0xEC, 0xA9,  // .....8..
            /* 0228 */  0xE0, 0x35, 0x80, 0x41, 0xBC, 0xB1, 0x9C, 0x96,  // .5.A....
            /* 0230 */  0x11, 0x61, 0x1C, 0x52, 0x1E, 0x19, 0x6C, 0x0B,  // .a.R..l.
            /* 0238 */  0x87, 0x40, 0x86, 0x79, 0x27, 0x60, 0x90, 0x15,  // .@.y'`..
            /* 0240 */  0x9F, 0x77, 0x08, 0xF0, 0x2B, 0x42, 0x9C, 0x08,  // .w..+B..
            /* 0248 */  0xEF, 0x0C, 0xEC, 0xB2, 0x00, 0xBE, 0x48, 0x97,  // ......H.
            /* 0250 */  0x05, 0x34, 0xB4, 0x4F, 0x32, 0xBE, 0x20, 0x18,  // .4.O2. .
            /* 0258 */  0xF6, 0xC4, 0x59, 0x80, 0xBB, 0x02, 0xA8, 0x40,  // ..Y....@
            /* 0260 */  0x7D, 0x57, 0x80, 0x7F, 0x21, 0x78, 0x57, 0x00,  // }W..!xW.
            /* 0268 */  0xC3, 0xBC, 0x7C, 0x2B, 0xE0, 0x9A, 0x0E, 0x25,  // ..|+...%
            /* 0270 */  0xE8, 0x33, 0x89, 0xAF, 0x0B, 0xB8, 0x29, 0xB2,  // .3....).
            /* 0278 */  0x54, 0x47, 0x05, 0xE8, 0x29, 0x26, 0x81, 0xD2,  // TG..)&..
            /* 0280 */  0x7F, 0x54, 0x80, 0x34, 0xC3, 0x27, 0x92, 0xD7,  // .T.4.'..
            /* 0288 */  0x00, 0x9F, 0x16, 0xF8, 0x59, 0x88, 0x5D, 0x47,  // ....Y.]G
            /* 0290 */  0x70, 0x57, 0x12, 0x86, 0xF2, 0x6C, 0xE0, 0x4B,  // pW...l.K
            /* 0298 */  0x16, 0x3F, 0x1C, 0xC0, 0x00, 0xF7, 0x2C, 0x0E,  // .?....,.
            /* 02A0 */  0x31, 0x42, 0x6C, 0x76, 0xE0, 0x7A, 0x35, 0x78,  // 1Blv.z5x
            /* 02A8 */  0x2F, 0xF0, 0x85, 0x88, 0xFF, 0xFF, 0x4F, 0x06,  // /.....O.
            /* 02B0 */  0xE0, 0x13, 0x08, 0x8C, 0x3E, 0x1A, 0xD8, 0xAF,  // ....>...
            /* 02B8 */  0x00, 0x84, 0xE0, 0x65, 0x8E, 0x43, 0x73, 0x89,  // ...e.Cs.
            /* 02C0 */  0xF0, 0xA4, 0x63, 0xF8, 0x48, 0xCF, 0x2C, 0x7C,  // ..c.H.,|
            /* 02C8 */  0x06, 0xA7, 0xE5, 0x11, 0x98, 0xC0, 0x07, 0x1E,  // ........
            /* 02D0 */  0x32, 0x00, 0x7A, 0xCE, 0xF1, 0x00, 0xF8, 0x31,  // 2.z....1
            /* 02D8 */  0x22, 0xFE, 0xE1, 0x84, 0x0D, 0x1C, 0x3E, 0xCA,  // ".....>.
            /* 02E0 */  0x39, 0x1C, 0x8F, 0xAF, 0x24, 0x11, 0xEA, 0x82,  // 9...$...
            /* 02E8 */  0xD0, 0x21, 0xC2, 0x08, 0x07, 0x10, 0xE5, 0xBC,  // .!......
            /* 02F0 */  0xDF, 0x14, 0x4C, 0xE0, 0xE3, 0x80, 0x0F, 0x0C,  // ..L.....
            /* 02F8 */  0xFC, 0x14, 0xE7, 0x21, 0xC1, 0x98, 0x72, 0x14,  // ...!..r.
            /* 0300 */  0x7B, 0x9C, 0x14, 0x19, 0x1E, 0x3B, 0x35, 0x78,  // {....;5x
            /* 0308 */  0x3C, 0x1C, 0x1A, 0x87, 0xF8, 0x40, 0x70, 0xAE,  // <....@p.
            /* 0310 */  0x56, 0x3A, 0x43, 0xE4, 0x29, 0xC2, 0x93, 0x3A,  // V:C.)..:
            /* 0318 */  0xC2, 0x03, 0xC4, 0x0E, 0x80, 0xCB, 0x7B, 0x55,  // ......{U
            /* 0320 */  0x19, 0xC8, 0x3F, 0x04, 0x09, 0x82, 0x41, 0x5D,  // ..?...A]
            /* 0328 */  0x64, 0x7C, 0xD2, 0xC3, 0x0F, 0x81, 0x1D, 0x26,  // d|.....&
            /* 0330 */  0xD8, 0x39, 0xC9, 0x70, 0xFC, 0x00, 0xE0, 0x51,  // .9.p...Q
            /* 0338 */  0xBD, 0xE1, 0xBC, 0x74, 0x79, 0x98, 0x3E, 0x22,  // ...ty.>"
            /* 0340 */  0x84, 0x64, 0x47, 0x31, 0xDC, 0xA9, 0xC2, 0x57,  // .dG1...W
            /* 0348 */  0x05, 0x5F, 0x45, 0x8C, 0xF8, 0xB0, 0xE2, 0x53,  // ._E....S
            /* 0350 */  0x83, 0xA1, 0x60, 0x1C, 0x06, 0x30, 0x37, 0x42,  // ..`..07B
            /* 0358 */  0xDF, 0x13, 0x0C, 0xF5, 0x9E, 0x74, 0x18, 0x8F,  // .....t..
            /* 0360 */  0x84, 0x26, 0xF0, 0xA5, 0xE1, 0x28, 0x30, 0x47,  // .&...(0G
            /* 0368 */  0x0E, 0xDF, 0x96, 0x0C, 0xEF, 0xFF, 0x3F, 0x81,  // ......?.
            /* 0370 */  0xDD, 0x9F, 0x13, 0x84, 0xFF, 0x94, 0xF3, 0x7E,  // .......~
            /* 0378 */  0xF1, 0x16, 0xF0, 0xA8, 0x10, 0x23, 0xCA, 0x83,  // .....#..
            /* 0380 */  0x4A, 0x94, 0x48, 0xA7, 0x1B, 0x85, 0x79, 0xBB,  // J.H...y.
            /* 0388 */  0x39, 0x08, 0x22, 0x4A, 0x73, 0x73, 0x13, 0x52,  // 9."Jss.R
            /* 0390 */  0xA0, 0x28, 0x47, 0x1E, 0x33, 0x4E, 0xAC, 0x20,  // .(G.3N. 
            /* 0398 */  0x81, 0xDE, 0x37, 0xA2, 0x84, 0x8D, 0x11, 0x2E,  // ..7.....
            /* 03A0 */  0x50, 0xFB, 0xC7, 0x04, 0x36, 0x64, 0x7A, 0x56,  // P...6dzV
            /* 03A8 */  0xC0, 0x9D, 0x1D, 0xE0, 0x4E, 0x8F, 0x9F, 0x1E,  // ....N...
            /* 03B0 */  0x00, 0x27, 0x40, 0x4F, 0x0F, 0x60, 0x3B, 0x6F,  // .'@O.`;o
            /* 03B8 */  0xC0, 0x3D, 0x10, 0x20, 0xBE, 0x2B, 0x06, 0xA2,  // .=. .+..
            /* 03C0 */  0xC1, 0xAF, 0x2C, 0x14, 0x8E, 0x87, 0xBE, 0x59,  // ..,....Y
            /* 03C8 */  0xD1, 0x63, 0x09, 0xEE, 0x70, 0xE0, 0x23, 0x83,  // .c..p.#.
            /* 03D0 */  0x0F, 0x90, 0xB8, 0xA1, 0xF8, 0x50, 0x81, 0x3C,  // .....P.<
            /* 03D8 */  0x0B, 0x80, 0x62, 0xF4, 0x6C, 0x04, 0xEC, 0x06,  // ..b.l...
            /* 03E0 */  0xF3, 0xD2, 0xF2, 0xDE, 0xE0, 0xFF, 0xFF, 0x1C,  // ........
            /* 03E8 */  0x7C, 0x4A, 0xC1, 0x1D, 0x04, 0xC0, 0x77, 0x0C,  // |J....w.
            /* 03F0 */  0x00, 0xEF, 0x60, 0xB8, 0xAC, 0x31, 0xA3, 0x84,  // ..`..1..
            /* 03F8 */  0xC0, 0x68, 0xCC, 0xB8, 0x43, 0x08, 0x3F, 0x11,  // .h..C.?.
            /* 0400 */  0xE0, 0xC6, 0xEC, 0x71, 0x7B, 0xCC, 0xB8, 0xE3,  // ...q{...
            /* 0408 */  0x2C, 0x1F, 0xD5, 0x53, 0x46, 0x28, 0x1F, 0x38,  // ,..SF(.8
            /* 0410 */  0xD8, 0x39, 0xE3, 0x8D, 0x80, 0x0F, 0x1D, 0x78,  // .9.....x
            /* 0418 */  0x1C, 0x60, 0x70, 0x47, 0x0A, 0x30, 0x5E, 0x0E,  // .`pG.0^.
            /* 0420 */  0xD8, 0xD8, 0xC1, 0x1D, 0x84, 0x9C, 0x02, 0x59,  // .......Y
            /* 0428 */  0x3A, 0x8C, 0xC6, 0x8E, 0x93, 0x0D, 0xA4, 0x63,  // :......c
            /* 0430 */  0x8C, 0x0F, 0xB9, 0x1E, 0x3B, 0x6E, 0xB0, 0x1E,  // ....;n..
            /* 0438 */  0x3B, 0xEE, 0xF8, 0x82, 0xFF, 0xFF, 0x1F, 0x5F,  // ;......_
            /* 0440 */  0xE0, 0x8F, 0x81, 0x8B, 0x1F, 0x06, 0xFA, 0xE6,  // ........
            /* 0448 */  0xE7, 0xD1, 0x19, 0xDC, 0xC3, 0xF6, 0x09, 0x26,  // .......&
            /* 0450 */  0xC6, 0x1B, 0x4C, 0x88, 0x47, 0x96, 0x97, 0x96,  // ..L.G...
            /* 0458 */  0x08, 0x0F, 0x2D, 0xBE, 0xB9, 0xBC, 0xB4, 0xF8,  // ..-.....
            /* 0460 */  0x16, 0x63, 0x94, 0x10, 0x11, 0x0E, 0x26, 0xCE,  // .c....&.
            /* 0468 */  0x13, 0x8C, 0x11, 0x0E, 0x3C, 0x8A, 0x21, 0x22,  // ....<.!"
            /* 0470 */  0x9C, 0x40, 0x88, 0x93, 0x3E, 0xD9, 0x20, 0xE1,  // .@..>. .
            /* 0478 */  0x63, 0x84, 0x8D, 0x16, 0xE5, 0x09, 0x86, 0x8D,  // c.......
            /* 0480 */  0x85, 0x9F, 0x57, 0x3C, 0x78, 0x7E, 0x5A, 0xF3,  // ..W<x~Z.
            /* 0488 */  0x5D, 0xD0, 0x93, 0x39, 0xC7, 0x87, 0x2C, 0x4F,  // ]..9..,O
            /* 0490 */  0xED, 0x71, 0xD2, 0x87, 0x59, 0xDC, 0xA0, 0x1E,  // .q..Y...
            /* 0498 */  0x1C, 0xD9, 0x5D, 0xC7, 0xC7, 0x6B, 0xEC, 0x29,  // ..]..k.)
            /* 04A0 */  0xC8, 0x43, 0xE0, 0x27, 0x02, 0x5F, 0x10, 0x3D,  // .C.'._.=
            /* 04A8 */  0x59, 0xDF, 0xF5, 0xD8, 0xBD, 0xCC, 0x18, 0xD5,  // Y.......
            /* 04B0 */  0x4F, 0x01, 0x75, 0x4C, 0x39, 0x83, 0x57, 0x08,  // O.uL9.W.
            /* 04B8 */  0x76, 0xCF, 0xF3, 0x21, 0xDB, 0x77, 0x49, 0x36,  // v..!.wI6
            /* 04C0 */  0x0A, 0xDC, 0x21, 0xC1, 0x67, 0x24, 0x7E, 0xAA,  // ..!.g$~.
            /* 04C8 */  0xF0, 0x30, 0x3C, 0x0A, 0x18, 0x33, 0x78, 0x47,  // .0<..3xG
            /* 04D0 */  0x38, 0xB4, 0x10, 0x07, 0xFC, 0xBE, 0xCB, 0x86,  // 8.......
            /* 04D8 */  0x1A, 0xE3, 0xF4, 0x7C, 0xFE, 0x60, 0x83, 0x80,  // ...|.`..
            /* 04E0 */  0x0F, 0x75, 0xA8, 0x1E, 0xE6, 0x51, 0xBD, 0x14,  // .u...Q..
            /* 04E8 */  0x32, 0x9C, 0xB3, 0x83, 0x3B, 0x08, 0xEC, 0xF1,  // 2...;...
            /* 04F0 */  0xC3, 0x83, 0xE0, 0x37, 0x4B, 0x3E, 0x08, 0x76,  // ...7K>.v
            /* 04F8 */  0xBE, 0x79, 0x83, 0x33, 0xC8, 0x31, 0xFC, 0xFF,  // .y.3.1..
            /* 0500 */  0x8F, 0x01, 0xEE, 0x99, 0xCA, 0x47, 0x13, 0xC4,  // .....G..
            /* 0508 */  0x11, 0x10, 0x7D, 0xFE, 0xF0, 0x18, 0xDE, 0xE4,  // ..}.....
            /* 0510 */  0xF8, 0x70, 0xB0, 0x47, 0x0F, 0xDC, 0x49, 0x04,  // .p.G..I.
            /* 0518 */  0xEE, 0xB1, 0xEB, 0xA0, 0x7D, 0x8D, 0xF3, 0x45,  // ....}..E
            /* 0520 */  0x0B, 0xC6, 0x7D, 0xEF, 0x59, 0x04, 0xFC, 0x18,  // ..}.Y...
            /* 0528 */  0x8F, 0x2D, 0xE0, 0x38, 0x94, 0x80, 0x3B, 0xD8,  // .-.8..;.
            /* 0530 */  0x71, 0x8D, 0x43, 0x28, 0x0A, 0x8C, 0x0E, 0x25,  // q.C(...%
            /* 0538 */  0xB8, 0x18, 0x40, 0x82, 0x71, 0x8C, 0x33, 0x1A,  // ..@.q.3.
            /* 0540 */  0xFA, 0x12, 0xE9, 0x43, 0x1A, 0x9C, 0x41, 0xC3,  // ...C..A.
            /* 0548 */  0x9E, 0xE7, 0x13, 0x0A, 0xB7, 0x27, 0x40, 0xD1,  // .....'@.
            /* 0550 */  0x09, 0x05, 0x64, 0xB8, 0xCF, 0x20, 0xD8, 0x13,  // ..d.. ..
            /* 0558 */  0x02, 0x3F, 0x83, 0xF0, 0xFF, 0x3F, 0xF4, 0x71,  // .?...?.q
            /* 0560 */  0xBF, 0x37, 0xFA, 0xD4, 0xC8, 0xE6, 0xFE, 0x10,  // .7......
            /* 0568 */  0x70, 0x02, 0xE7, 0xCE, 0x4E, 0xCD, 0xB8, 0x33,  // p...N..3
            /* 0570 */  0x03, 0xF6, 0xFC, 0xE1, 0x21, 0xF0, 0x73, 0x81,  // ....!.s.
            /* 0578 */  0x87, 0xEF, 0x21, 0xE0, 0x07, 0xFF, 0xC0, 0x6C,  // ..!....l
            /* 0580 */  0x70, 0x30, 0x9E, 0x22, 0x7C, 0xED, 0xE0, 0xE0,  // p0."|...
            /* 0588 */  0xFC, 0x34, 0x60, 0x70, 0xFE, 0x0A, 0xF5, 0x79,  // .4`p...y
            /* 0590 */  0x9E, 0x81, 0x63, 0x4F, 0xBD, 0xBE, 0x77, 0x78,  // ..cO..wx
            /* 0598 */  0xBE, 0x3E, 0x54, 0xE0, 0x6F, 0x7A, 0x3E, 0x54,  // .>T.oz>T
            /* 05A0 */  0x80, 0xE3, 0xF0, 0xC0, 0x0F, 0x2B, 0x6C, 0x08,  // .....+l.
            /* 05A8 */  0x8F, 0x02, 0xF8, 0x53, 0x8B, 0x8F, 0x7F, 0x71,  // ...S...q
            /* 05B0 */  0x9E, 0x22, 0xD8, 0x6D, 0x04, 0x7B, 0xB8, 0x00,  // .".m.{..
            /* 05B8 */  0x1C, 0x45, 0x3B, 0x8B, 0xA1, 0xC2, 0x9C, 0xC5,  // .E;.....
            /* 05C0 */  0xE8, 0xFF, 0xFF, 0x1C, 0x85, 0x38, 0x8B, 0xD1,  // .....8..
            /* 05C8 */  0xC3, 0x05, 0xE0, 0x42, 0xF0, 0xF1, 0x00, 0x34,  // ...B...4
            /* 05D0 */  0x07, 0x81, 0xC7, 0x05, 0x5F, 0x08, 0x8E, 0xE4,  // ...._...
            /* 05D8 */  0x40, 0x9E, 0x0E, 0x00, 0x9F, 0xF2, 0x48, 0xE8,  // @.....H.
            /* 05E0 */  0xF9, 0xC8, 0x82, 0x60, 0x50, 0xE7, 0x03, 0x9F,  // ...`P...
            /* 05E8 */  0x50, 0x7C, 0xEC, 0xE0, 0x67, 0x03, 0xDF, 0xC8,  // P|..g...
            /* 05F0 */  0x3D, 0x54, 0x7E, 0x6A, 0xF6, 0x49, 0x9B, 0x07,  // =T~j.I..
            /* 05F8 */  0xFF, 0x49, 0xCB, 0x06, 0x8C, 0x02, 0x0D, 0x03,  // .I......
            /* 0600 */  0x35, 0x22, 0x1F, 0x91, 0xFC, 0xFF, 0x3F, 0xB7,  // 5"....?.
            /* 0608 */  0xE1, 0x02, 0x0C, 0x8D, 0x9E, 0xC3, 0x61, 0x1C,  // ......a.
            /* 0610 */  0x70, 0x7D, 0x0E, 0xC7, 0x0E, 0xC8, 0xE7, 0x70,  // p}.....p
            /* 0618 */  0xF8, 0xE7, 0x68, 0xF8, 0x63, 0x63, 0xA7, 0x7B,  // ..h.cc.{
            /* 0620 */  0x3E, 0x30, 0x58, 0xD7, 0x6F, 0xCC, 0xC0, 0xC0,  // >0X.o...
            /* 0628 */  0xF6, 0x2D, 0xF2, 0xC0, 0x80, 0x23, 0xEA, 0xD9,  // .-...#..
            /* 0630 */  0xF8, 0x0A, 0xE1, 0x81, 0x81, 0x0D, 0xD0, 0x03,  // ........
            /* 0638 */  0x03, 0x3E, 0xB1, 0x20, 0xE4, 0x64, 0x60, 0xA8,  // .>. .d`.
            /* 0640 */  0x53, 0x86, 0x91, 0x63, 0x3E, 0x71, 0x78, 0x18,  // S..c>qx.
            /* 0648 */  0x3E, 0x54, 0x44, 0x7D, 0x06, 0x78, 0xC4, 0x63,  // >TD}.x.c
            /* 0650 */  0x63, 0xE3, 0xFF, 0xFF, 0xB1, 0x81, 0xE3, 0xD8,  // c.......
            /* 0658 */  0xE2, 0xB1, 0x81, 0xFF, 0x08, 0x8F, 0x1F, 0x1B,  // ........
            /* 0660 */  0x9C, 0xB1, 0x3C, 0x9A, 0xF8, 0x32, 0x73, 0x64,  // ..<..2sd
            /* 0668 */  0xA7, 0x71, 0x66, 0xAF, 0x21, 0x3E, 0xDA, 0x3D,  // .qf.!>.=
            /* 0670 */  0x7E, 0x7B, 0x6C, 0xE0, 0xB2, 0x30, 0x36, 0xA0,  // ~{l..06.
            /* 0678 */  0x14, 0x72, 0x6C, 0xE8, 0x43, 0x8A, 0x4F, 0x01,  // .rl.C.O.
            /* 0680 */  0x36, 0x8E, 0x4A, 0xE6, 0xE1, 0xE3, 0x95, 0x4F,  // 6.J....O
            /* 0688 */  0x0C, 0x47, 0x17, 0xE4, 0x0D, 0xDD, 0x97, 0x0B,  // .G......
            /* 0690 */  0x1F, 0x69, 0x0C, 0xE6, 0x4B, 0x8B, 0xCF, 0xA0,  // .i..K...
            /* 0698 */  0x7C, 0x88, 0xE0, 0xD2, 0x30, 0x44, 0xA0, 0x14,  // |...0D..
            /* 06A0 */  0x6A, 0x88, 0xE8, 0xF1, 0xF8, 0xFF, 0x7F, 0x99,  // j.......
            /* 06A8 */  0x39, 0x44, 0x36, 0x34, 0xF0, 0x7E, 0x63, 0x34,  // 9D64.~c4
            /* 06B0 */  0x34, 0x20, 0x14, 0x6E, 0x68, 0xE8, 0xC3, 0x9A,  // 4 .nh...
            /* 06B8 */  0x0F, 0x01, 0x0C, 0xC2, 0xB7, 0x01, 0x76, 0x15,  // ......v.
            /* 06C0 */  0xF0, 0x55, 0xC8, 0x03, 0x7C, 0x12, 0x65, 0xC3,  // .U..|.e.
            /* 06C8 */  0x03, 0xDF, 0xA0, 0x3C, 0x3C, 0xE0, 0x13, 0x1E,  // ...<<...
            /* 06D0 */  0xD8, 0xAB, 0xF0, 0xF0, 0xE8, 0x59, 0xC9, 0xC3,  // .....Y..
            /* 06D8 */  0x83, 0x07, 0xF2, 0x18, 0xC1, 0xCE, 0x21, 0x1E,  // ......!.
            /* 06E0 */  0x1C, 0x38, 0x4C, 0x0C, 0x0E, 0x14, 0x47, 0x7F,  // .8L...G.
            /* 06E8 */  0xDC, 0x10, 0xD8, 0x65, 0xD6, 0x13, 0xE7, 0x57,  // ...e...W
            /* 06F0 */  0x16, 0x0F, 0x0A, 0xC6, 0xFF, 0xFF, 0x08, 0x00,  // ........
            /* 06F8 */  0xE7, 0x38, 0x03, 0xBE, 0x60, 0x87, 0x03, 0xF4,  // .8..`...
            /* 0700 */  0x31, 0x91, 0x8D, 0xE1, 0x21, 0xE2, 0xC1, 0xD5,  // 1...!...
            /* 0708 */  0x03, 0xF1, 0xB5, 0xE3, 0xB5, 0x18, 0x77, 0x34,  // ......w4
            /* 0710 */  0x00, 0x97, 0x8A, 0xA3, 0x01, 0x50, 0x3A, 0xD8,  // .....P:.
            /* 0718 */  0x82, 0xE3, 0x9E, 0xE6, 0xA3, 0x1D, 0x66, 0x8E,  // ......f.
            /* 0720 */  0x1E, 0xC0, 0xF3, 0x9B, 0x47, 0xCB, 0xCF, 0x6F,  // ....G..o
            /* 0728 */  0x80, 0xA3, 0xA0, 0x07, 0x5B, 0x3A, 0x70, 0x47,  // ....[:pG
            /* 0730 */  0x83, 0x41, 0x9D, 0xDF, 0x70, 0xFF, 0xFF, 0xF3,  // .A..p...
            /* 0738 */  0x1B, 0xFC, 0x08, 0xE0, 0x3A, 0xD3, 0xF8, 0xFC,  // ....:...
            /* 0740 */  0x02, 0x67, 0xA8, 0x07, 0xED, 0x6B, 0x82, 0x67,  // .g...k.g
            /* 0748 */  0xED, 0x1B, 0x17, 0x3B, 0x27, 0x80, 0x6B, 0x40,  // ...;'.k@
            /* 0750 */  0x3E, 0xE9, 0x00, 0x47, 0xE0, 0x93, 0x78, 0xC0,  // >..G..x.
            /* 0758 */  0x3F, 0x34, 0x30, 0x0F, 0xCB, 0x43, 0x03, 0x3E,  // ?40..C.>
            /* 0760 */  0x47, 0x03, 0xDC, 0x89, 0x02, 0x3C, 0xB7, 0x11,  // G....<..
            /* 0768 */  0xDC, 0x81, 0x02, 0x78, 0xFC, 0xFF, 0x0F, 0x14,  // ...x....
            /* 0770 */  0xC0, 0xE9, 0x88, 0xEF, 0x71, 0x71, 0x68, 0x1C,  // ....qqh.
            /* 0778 */  0xE2, 0x43, 0xDA, 0x39, 0xFB, 0xFC, 0x75, 0xA6,  // .C.9..u.
            /* 0780 */  0xB8, 0xB3, 0x08, 0x18, 0xC6, 0xC0, 0xE5, 0x2F,  // ......./
            /* 0788 */  0x89, 0x8A, 0x78, 0x60, 0x48, 0x30, 0x0C, 0xEA,  // ..x`H0..
            /* 0790 */  0x04, 0xE4, 0xA1, 0xF8, 0x60, 0xC0, 0x81, 0x7D,  // ....`..}
            /* 0798 */  0x44, 0x60, 0xE7, 0x02, 0x76, 0x80, 0x32, 0x1C,  // D`..v.2.
            /* 07A0 */  0x3F, 0x0B, 0xF8, 0x94, 0xF0, 0x50, 0x73, 0x1C,  // ?....Ps.
            /* 07A8 */  0x8F, 0x9B, 0xBE, 0x9B, 0x19, 0x92, 0x5D, 0x0D,  // ......].
            /* 07B0 */  0x9E, 0x7F, 0xB0, 0xA7, 0x5D, 0x38, 0x47, 0x5C,  // ....]8G\
            /* 07B8 */  0x70, 0x11, 0xF8, 0xAC, 0xE3, 0x51, 0xF0, 0xD3,  // p....Q..
            /* 07C0 */  0x83, 0xE7, 0xF8, 0xC6, 0xE0, 0xD3, 0x03, 0x73,  // .......s
            /* 07C8 */  0x2F, 0xC0, 0xDC, 0xA1, 0x5B, 0x08, 0xC7, 0xF4,  // /...[...
            /* 07D0 */  0xFA, 0x10, 0xE3, 0xA8, 0x1F, 0x1B, 0xDA, 0x12,  // ........
            /* 07D8 */  0xA0, 0x0D, 0x45, 0x77, 0x80, 0x97, 0x81, 0x28,  // ..Ew...(
            /* 07E0 */  0x21, 0x8E, 0x20, 0x52, 0x6B, 0x28, 0x9A, 0x79,  // !. Rk(.y
            /* 07E8 */  0xA4, 0x28, 0x01, 0xE3, 0x19, 0xA6, 0xB1, 0xC9,  // .(......
            /* 07F0 */  0x08, 0x32, 0x46, 0xE8, 0x38, 0xC1, 0xA2, 0x44,  // .2F.8..D
            /* 07F8 */  0x7B, 0x05, 0x68, 0x7F, 0x10, 0x44, 0xEC, 0xD1,  // {.h..D..
            /* 0800 */  0x84, 0x46, 0x3A, 0x59, 0xA2, 0x87, 0xED, 0x63,  // .F:Y...c
            /* 0808 */  0x36, 0xFE, 0xB4, 0x8A, 0xFB, 0xFF, 0x5F, 0x55,  // 6....._U
            /* 0810 */  0xFC, 0x05, 0xF0, 0x01, 0x00, 0xEF, 0x12, 0x50,  // .......P
            /* 0818 */  0x57, 0x47, 0x8F, 0xDB, 0xE7, 0x0D, 0xF0, 0x5F,  // WG....._
            /* 0820 */  0x2F, 0xB0, 0x47, 0x04, 0x0D, 0x02, 0x35, 0x32,  // /.G...52
            /* 0828 */  0x43, 0x7B, 0x9C, 0x6F, 0x33, 0x86, 0x7C, 0x72,  // C{.o3.|r
            /* 0830 */  0xF2, 0x20, 0xC9, 0x09, 0x15, 0x68, 0x0C, 0xFE,  // . ...h..
            /* 0838 */  0x69, 0xC3, 0xD7, 0x76, 0xCF, 0xD7, 0x27, 0x2F,  // i..v..'/
            /* 0840 */  0xEC, 0x71, 0x04, 0xEE, 0x35, 0x81, 0x1F, 0x48,  // .q..5..H
            /* 0848 */  0x00, 0x67, 0x40, 0x0F, 0x24, 0x60, 0xFA, 0xFF,  // .g@.$`..
            /* 0850 */  0x1F, 0x48, 0xE0, 0x0C, 0x15, 0x37, 0x04, 0x1E,  // .H...7..
            /* 0858 */  0x61, 0x45, 0xF4, 0x30, 0x60, 0xD1, 0x30, 0xA8,  // aE.0`.0.
            /* 0860 */  0x33, 0x14, 0xB8, 0xC4, 0x81, 0xEB, 0xF0, 0xE8,  // 3.......
            /* 0868 */  0xF3, 0x2A, 0x9C, 0x41, 0x9D, 0x76, 0xEF, 0x17,  // .*.A.v..
            /* 0870 */  0x10, 0x72, 0x39, 0xF0, 0xA0, 0xCF, 0xE7, 0x49,  // .r9....I
            /* 0878 */  0x81, 0x1D, 0xA2, 0x80, 0xFF, 0xD8, 0xE0, 0xDC,  // ........
            /* 0880 */  0x00, 0x9E, 0x6C, 0x23, 0x1C, 0x1B, 0xD8, 0x4F,  // ..l#...O
            /* 0888 */  0x51, 0xC0, 0xE9, 0xBC, 0x05, 0xE7, 0x5A, 0xC3,  // Q.....Z.
            /* 0890 */  0x6E, 0xE0, 0xB8, 0xA1, 0x61, 0xFF, 0xFF, 0x43,  // n...a..C
            /* 0898 */  0x83, 0x7F, 0x7C, 0xF7, 0x81, 0x10, 0x30, 0x70,  // ..|...0p
            /* 08A0 */  0x10, 0xE2, 0x97, 0x8A, 0x67, 0x22, 0x7E, 0xE0,  // ....g"~.
            /* 08A8 */  0x02, 0x9C, 0x9F, 0x48, 0xF8, 0x69, 0xCB, 0x27,  // ...H.i.'
            /* 08B0 */  0x12, 0x7E, 0xE0, 0x02, 0xFF, 0xFF, 0xFF, 0xC0,  // .~......
            /* 08B8 */  0x05, 0xCC, 0xEF, 0x57, 0xEF, 0x0C, 0x2F, 0x0D,  // ...W../.
            /* 08C0 */  0x9E, 0xD3, 0xFB, 0x96, 0x31, 0x5E, 0xB4, 0x8C,  // ....1^..
            /* 08C8 */  0x10, 0x85, 0xDD, 0x06, 0xA2, 0xD9, 0xDB, 0x81,  // ........
            /* 08D0 */  0x8B, 0x9C, 0xBA, 0x38, 0x66, 0xA4, 0xA7, 0xAF,  // ...8f...
            /* 08D8 */  0x60, 0x91, 0x22, 0x1E, 0x4E, 0x94, 0x10, 0xC1,  // `.".N...
            /* 08E0 */  0x5E, 0x27, 0x9E, 0xBC, 0x1E, 0xB8, 0x98, 0xE0,  // ^'......
            /* 08E8 */  0x03, 0x17, 0xD0, 0x71, 0x7D, 0xE0, 0x02, 0xB4,  // ...q}...
            /* 08F0 */  0x9E, 0x9B, 0x70, 0xC0, 0xFE, 0xFF, 0x1F, 0xB8,  // ..p.....
            /* 08F8 */  0xC0, 0x74, 0x22, 0x01, 0x5C, 0x8F, 0x15, 0xC6,  // .t".\...
            /* 0900 */  0x18, 0x78, 0x98, 0xE3, 0x08, 0x3F, 0x54, 0xE2,  // .x...?T.
            /* 0908 */  0xE0, 0xA8, 0xF4, 0x83, 0x16, 0x3D, 0x74, 0xFB,  // .....=t.
            /* 0910 */  0x44, 0x81, 0x9F, 0xCB, 0x33, 0xB7, 0xEF, 0x07,  // D...3...
            /* 0918 */  0x3E, 0x14, 0x81, 0xFD, 0xA4, 0x05, 0x1C, 0x0E,  // >.......
            /* 0920 */  0xE8, 0xB8, 0xFF, 0x3F, 0x81, 0x03, 0x1D, 0x9F,  // ...?....
            /* 0928 */  0xD0, 0xA3, 0xF0, 0xA1, 0x1D, 0x77, 0xCC, 0x02,  // .....w..
            /* 0930 */  0xFE, 0x91, 0x81, 0xBD, 0x0A, 0x0F, 0x8C, 0xB2,  // ........
            /* 0938 */  0x18, 0xF5, 0x0D, 0xE2, 0x10, 0xDF, 0xEF, 0x7D,  // .......}
            /* 0940 */  0x96, 0x7B, 0xCF, 0xF0, 0x25, 0x00, 0x73, 0xD3,  // .{..%.s.
            /* 0948 */  0xF7, 0x89, 0x80, 0x1D, 0x7B, 0x7C, 0xD2, 0x02,  // ....{|..
            /* 0950 */  0x4E, 0x43, 0x60, 0xF7, 0x1F, 0xCF, 0x9C, 0x0F,  // NC`.....
            /* 0958 */  0xE1, 0x6C, 0x3C, 0x7A, 0xDC, 0x89, 0x00, 0x7C,  // .l<z...|
            /* 0960 */  0xC7, 0x12, 0xF0, 0x9C, 0x2C, 0x30, 0x33, 0x08,  // ....,03.
            /* 0968 */  0xFF, 0xF4, 0xC1, 0x8E, 0x82, 0x3E, 0xBF, 0x78,  // .....>.x
            /* 0970 */  0xD2, 0x2F, 0x2A, 0x3E, 0x96, 0x80, 0xED, 0xFF,  // ./*>....
            /* 0978 */  0x7F, 0xEE, 0x02, 0x3C, 0x46, 0x39, 0x74, 0xA1,  // ...<F9t.
            /* 0980 */  0xC4, 0x9F, 0xBB, 0x00, 0x81, 0xB7, 0x2E, 0xDF,  // ........
            /* 0988 */  0x94, 0x23, 0xBC, 0x08, 0x9C, 0x41, 0x88, 0x67,  // .#...A.g
            /* 0990 */  0xAD, 0xF7, 0xAD, 0x48, 0xBE, 0x03, 0xC4, 0x79,  // ...H...y
            /* 0998 */  0xEE, 0x32, 0xD8, 0x6B, 0xC7, 0x83, 0x44, 0x94,  // .2.k..D.
            /* 09A0 */  0x67, 0x66, 0x43, 0x3D, 0x37, 0x1B, 0xEA, 0xE4,  // gfC=7...
            /* 09A8 */  0x9F, 0x99, 0x8D, 0x15, 0x36, 0xD0, 0xE3, 0xD7,  // ....6...
            /* 09B0 */  0x5B, 0x57, 0x48, 0x23, 0x3C, 0x77, 0x31, 0xE1,  // [WH#<w1.
            /* 09B8 */  0xE7, 0x2E, 0xA8, 0xFF, 0xFF, 0x73, 0x17, 0xC0,  // .....s..
            /* 09C0 */  0x85, 0xA3, 0x02, 0xEE, 0xDC, 0x05, 0xB6, 0x33,  // .......3
            /* 09C8 */  0x09, 0x60, 0xED, 0x08, 0xE0, 0xFF, 0xFF, 0x99,  // .`......
            /* 09D0 */  0x04, 0xCC, 0xA3, 0x85, 0x79, 0xF6, 0x40, 0x1C,  // ....y.@.
            /* 09D8 */  0xBC, 0x50, 0xE1, 0x1F, 0x07, 0x86, 0x43, 0x05,  // .P....C.
            /* 09E0 */  0x3F, 0x55, 0xD0, 0xF3, 0x14, 0x70, 0x39, 0x30,  // ?U...p90
            /* 09E8 */  0x03, 0x27, 0x21, 0x27, 0x18, 0x9D, 0xA7, 0x70,  // .'!'...p
            /* 09F0 */  0xE3, 0x31, 0xE8, 0xD3, 0x83, 0xAF, 0x04, 0xFC,  // .1......
            /* 09F8 */  0x30, 0xC5, 0x42, 0x43, 0xC8, 0xC2, 0xC9, 0x0B,  // 0.BC....
            /* 0A00 */  0x68, 0x1D, 0xA6, 0xC0, 0x71, 0x65, 0x09, 0x8C,  // h...qe..
            /* 0A08 */  0xBD, 0x1D, 0xBC, 0xCB, 0x79, 0x12, 0x8F, 0x26,  // ....y..&
            /* 0A10 */  0xC7, 0x19, 0xE2, 0xDD, 0xDA, 0x04, 0x0F, 0x06,  // ........
            /* 0A18 */  0x91, 0xDE, 0x6B, 0xD8, 0x00, 0xA3, 0xBF, 0x44,  // ..k....D
            /* 0A20 */  0x98, 0xE0, 0xFF, 0xFF, 0x68, 0x05, 0x0C, 0x21,  // ....h..!
            /* 0A28 */  0xCE, 0x86, 0x9F, 0x2E, 0x8C, 0x79, 0x3A, 0xFC,  // .....y:.
            /* 0A30 */  0x68, 0x05, 0xB0, 0xF0, 0xFF, 0x7F, 0xB4, 0x02,  // h.......
            /* 0A38 */  0xFB, 0xC5, 0xCA, 0x63, 0x3E, 0xE3, 0xB7, 0xA9,  // ...c>...
            /* 0A40 */  0xA7, 0xA9, 0x28, 0xEF, 0xC7, 0xAF, 0x54, 0xEF,  // ..(...T.
            /* 0A48 */  0x06, 0xC6, 0x7A, 0x08, 0x78, 0xAA, 0xF2, 0x9D,  // ..z.x...
            /* 0A50 */  0xCA, 0xC7, 0x8A, 0x27, 0x64, 0xA3, 0xC4, 0x7A,  // ...'d..z
            /* 0A58 */  0xB9, 0x32, 0x66, 0x8C, 0x60, 0xEF, 0x55, 0x31,  // .2f.`.U1
            /* 0A60 */  0x1F, 0xB3, 0x3C, 0xC2, 0x68, 0xC1, 0x7D, 0x42,  // ..<.h.}B
            /* 0A68 */  0xE6, 0x47, 0x2B, 0x80, 0x61, 0x67, 0x12, 0x18,  // .G+.ag..
            /* 0A70 */  0xFF, 0xFF, 0x33, 0x09, 0xE0, 0xE8, 0x68, 0x05,  // ..3...h.
            /* 0A78 */  0xF6, 0xD1, 0xC2, 0x1C, 0x05, 0x8F, 0xFA, 0x1E,  // ........
            /* 0A80 */  0x31, 0x10, 0x0D, 0x07, 0x83, 0x3A, 0xC2, 0x12,  // 1....:..
            /* 0A88 */  0x20, 0x99, 0x00, 0x51, 0xA8, 0xA3, 0x15, 0xFA,  //  ..Q....
            /* 0A90 */  0x20, 0xE2, 0x61, 0x3F, 0x34, 0x78, 0x12, 0xA7,  //  .a?4x..
            /* 0A98 */  0xEA, 0x5B, 0xC3, 0x51, 0x3C, 0x01, 0xF8, 0x70,  // .[.Q<..p
            /* 0AA0 */  0x05, 0xFC, 0x87, 0x06, 0x6B, 0x12, 0xC5, 0x0F,  // ....k...
            /* 0AA8 */  0x0D, 0xDA, 0xFF, 0xFF, 0x94, 0x0C, 0xBC, 0x8F,  // ........
            /* 0AB0 */  0x6B, 0xC0, 0xE5, 0x80, 0x0C, 0xBE, 0x81, 0x81,  // k.......
            /* 0AB8 */  0xE3, 0x90, 0xE6, 0xE3, 0x1A, 0xEE, 0x40, 0xE4,  // ......@.
            /* 0AC0 */  0x81, 0xC5, 0x7C, 0x05, 0x8B, 0xF0, 0x08, 0xE6,  // ..|.....
            /* 0AC8 */  0x6B, 0x06, 0x3B, 0xF1, 0xF9, 0xB4, 0x12, 0x28,  // k.;....(
            /* 0AD0 */  0xCA, 0x6B, 0x0B, 0x3F, 0x4E, 0x83, 0x4B, 0xC7,  // .k.?N.K.
            /* 0AD8 */  0x71, 0x1A, 0x50, 0xF0, 0xFF, 0x3F, 0x12, 0xC0,  // q.P..?..
            /* 0AE0 */  0x99, 0x85, 0x2F, 0x58, 0xEC, 0x48, 0x00, 0x36,  // ../X.H.6
            /* 0AE8 */  0x1F, 0x47, 0x02, 0xA0, 0x34, 0x0C, 0x1F, 0xE6,  // .G..4...
            /* 0AF0 */  0xC0, 0x06, 0x73, 0x30, 0xAF, 0xED, 0xF6, 0x7E,  // ..s0...~
            /* 0AF8 */  0xD8, 0xA3, 0x47, 0x39, 0xC0, 0x7A, 0x84, 0x73,  // ..G9.z.s
            /* 0B00 */  0x1C, 0x4A, 0xF4, 0x51, 0x0E, 0xEA, 0xFF, 0xFF,  // .J.Q....
            /* 0B08 */  0x28, 0x07, 0x58, 0xBA, 0x33, 0x18, 0xE1, 0xFC,  // (.X.3...
            /* 0B10 */  0x43, 0x3C, 0x40, 0x84, 0x78, 0x8A, 0x33, 0x48,  // C<@.x.3H
            /* 0B18 */  0x9C, 0x20, 0x2F, 0x03, 0x8F, 0x72, 0xBE, 0xC9,  // . /..r..
            /* 0B20 */  0xC5, 0x79, 0x9A, 0x8B, 0xF2, 0x2E, 0x67, 0x84,  // .y....g.
            /* 0B28 */  0x87, 0x6E, 0x03, 0xF9, 0xC4, 0xED, 0x7B, 0xDC,  // .n....{.
            /* 0B30 */  0x53, 0xDD, 0xCB, 0x9C, 0x6F, 0xDD, 0xBE, 0x80,  // S...o...
            /* 0B38 */  0xFB, 0x28, 0xC7, 0x04, 0x1F, 0xE5, 0x00, 0x2A,  // .(.....*
            /* 0B40 */  0xFC, 0xFF, 0x8F, 0x72, 0x70, 0xCF, 0xAA, 0xE0,  // ...rp...
            /* 0B48 */  0x39, 0xCA, 0xC1, 0x38, 0x91, 0x00, 0xAE, 0xC7,  // 9..8....
            /* 0B50 */  0x0A, 0x63, 0x0C, 0x5C, 0xDD, 0xA3, 0xC7, 0xA7,  // .c.\....
            /* 0B58 */  0x22, 0x2A, 0xEA, 0x3C, 0x22, 0x18, 0xCE, 0xE2,  // "*.<"...
            /* 0B60 */  0x43, 0x90, 0xCF, 0x06, 0xFC, 0x04, 0xE2, 0x11,  // C.......
            /* 0B68 */  0x54, 0x3C, 0x4E, 0x7A, 0xEA, 0xF0, 0xC1, 0x8E,  // T<Nz....
            /* 0B70 */  0x9D, 0x0E, 0x1C, 0x7E, 0x90, 0xF4, 0xB4, 0x08,  // ...~....
            /* 0B78 */  0x9E, 0x73, 0x0B, 0xBC, 0xDB, 0x08, 0x9C, 0x53,  // .s.....S
            /* 0B80 */  0x81, 0xFF, 0xFF, 0xA7, 0x02, 0xC0, 0x4B, 0xFE,  // ......K.
            /* 0B88 */  0x57, 0x9A, 0xA0, 0x1D, 0xE0, 0x15, 0x2E, 0x1B,  // W.......
            /* 0B90 */  0x47, 0x32, 0xCA, 0xE1, 0x98, 0x0F, 0x1C, 0x4D,  // G2.....M
            /* 0B98 */  0x93, 0x9D, 0x78, 0x60, 0xC6, 0x82, 0xD4, 0x49,  // ..x`...I
            /* 0BA0 */  0xC0, 0xA7, 0x0E, 0x07, 0x82, 0x91, 0x76, 0x12,  // ......v.
            /* 0BA8 */  0x8D, 0xC6, 0x70, 0x56, 0x0B, 0x23, 0x38, 0x83,  // ..pV.#8.
            /* 0BB0 */  0xF8, 0xCC, 0xE3, 0x5C, 0x27, 0x16, 0xB4, 0x0A,  // ...\'...
            /* 0BB8 */  0x10, 0x9D, 0x56, 0x30, 0x41, 0xEE, 0x68, 0x74,  // ..V0A.ht
            /* 0BC0 */  0xDE, 0xBE, 0x1B, 0xF0, 0xEB, 0x8B, 0xC7, 0x62,  // .......b
            /* 0BC8 */  0x60, 0xDF, 0xBA, 0xC0, 0x31, 0x17, 0xAB, 0x01,  // `...1...
            /* 0BD0 */  0x45, 0x0D, 0xC0, 0x68, 0x98, 0x53, 0xC0, 0xC3,  // E..h.S..
            /* 0BD8 */  0x19, 0xB8, 0xEE, 0x71, 0x9E, 0x1B, 0xEE, 0xA6,  // ...q....
            /* 0BE0 */  0x62, 0xAD, 0x53, 0xD1, 0xE9, 0xE4, 0x7D, 0xE0,  // b.S...}.
            /* 0BE8 */  0xE0, 0xC0, 0xFA, 0xFF, 0x1F, 0x1C, 0x8C, 0xD9,  // ........
            /* 0BF0 */  0x7B, 0x70, 0xB0, 0xD0, 0x3C, 0x38, 0xB0, 0x65,  // {p..<8.e
            /* 0BF8 */  0x1B, 0x1C, 0x5A, 0xC9, 0x5D, 0x84, 0x1C, 0x3E,  // ..Z.]..>
            /* 0C00 */  0xF0, 0xB3, 0x03, 0x0E, 0x80, 0x9E, 0x1D, 0x2C,  // .......,
            /* 0C08 */  0x24, 0xCF, 0x0E, 0x6C, 0xFA, 0xCE, 0x22, 0xA0,  // $..l..".
            /* 0C10 */  0x00, 0xF2, 0xBD, 0xC3, 0xE7, 0x96, 0x67, 0x0F,  // ......g.
            /* 0C18 */  0x36, 0x86, 0x47, 0x17, 0xA3, 0x19, 0x9D, 0x6B,  // 6.G....k
            /* 0C20 */  0xBA, 0x4D, 0xA0, 0x54, 0xDC, 0x26, 0x28, 0x88,  // .M.T.&(.
            /* 0C28 */  0x6F, 0x00, 0x4E, 0x48, 0xA3, 0xDB, 0x20, 0x6E,  // o.NH.. n
            /* 0C30 */  0x26, 0xC6, 0x7F, 0xC4, 0xF0, 0x11, 0xE1, 0x90,  // &.......
            /* 0C38 */  0xCE, 0xD6, 0x04, 0xF3, 0x40, 0xEA, 0xBD, 0xA1,  // ....@...
            /* 0C40 */  0xBB, 0x14, 0x84, 0xD9, 0x87, 0x7C, 0x70, 0xF1,  // .....|p.
            /* 0C48 */  0x34, 0x7C, 0xBD, 0x21, 0xF7, 0x0E, 0x3A, 0x6D,  // 4|.!..:m
            /* 0C50 */  0x9F, 0x19, 0x30, 0xA7, 0x55, 0x5F, 0x2D, 0x13,  // ..0.U_-.
            /* 0C58 */  0x58, 0xD6, 0x55, 0x82, 0x7A, 0xB8, 0x80, 0xD0,  // X.U.z...
            /* 0C60 */  0x0B, 0x8D, 0xAF, 0x5D, 0x09, 0x1E, 0x04, 0x7D,  // ...]...}
            /* 0C68 */  0x0C, 0xFB, 0xFF, 0xBF, 0x97, 0xB0, 0xB3, 0x57,  // .......W
            /* 0C70 */  0x82, 0x57, 0xAF, 0x04, 0xF3, 0x0E, 0x02, 0x35,  // .W.....5
            /* 0C78 */  0x2A, 0x0F, 0x02, 0x73, 0x94, 0x34, 0xC1, 0x7C,  // *..s.4.|
            /* 0C80 */  0x63, 0x40, 0x25, 0xBB, 0x74, 0xD2, 0x33, 0xCC,  // c@%.t.3.
            /* 0C88 */  0x3B, 0x8C, 0x2F, 0x09, 0xBE, 0x7E, 0xF8, 0xDC,  // ;./..~..
            /* 0C90 */  0xE2, 0x05, 0xBC, 0x7A, 0xC2, 0x20, 0x78, 0x06,  // ...z. x.
            /* 0C98 */  0x7A, 0x75, 0x31, 0x54, 0x9C, 0xC0, 0xAF, 0x02,  // zu1T....
            /* 0CA0 */  0x6F, 0x34, 0x21, 0x82, 0x19, 0xF6, 0xF0, 0x43,  // o4!....C
            /* 0CA8 */  0xBE, 0xC5, 0xF8, 0xF8, 0xE6, 0x1B, 0x40, 0xAC,  // ......@.
            /* 0CB0 */  0xD7, 0x11, 0x8F, 0x94, 0x1F, 0x5B, 0x0E, 0x28,  // .....[.(
            /* 0CB8 */  0xD2, 0x4B, 0x95, 0x27, 0xE0, 0xB3, 0x8C, 0x4F,  // .K.'...O
            /* 0CC0 */  0x5B, 0x27, 0xE5, 0x6B, 0x9B, 0xD1, 0x5F, 0x21,  // ['.k.._!
            /* 0CC8 */  0x7C, 0xF8, 0x31, 0xB2, 0xCF, 0x39, 0xEC, 0xDC,  // |.1..9..
            /* 0CD0 */  0xC5, 0x06, 0xC5, 0x11, 0x1F, 0x18, 0x5E, 0x6A,  // ......^j
            /* 0CD8 */  0x3C, 0x15, 0x76, 0x05, 0x60, 0x07, 0x07, 0x7E,  // <.v.`..~
            /* 0CE0 */  0x05, 0xF0, 0xC1, 0x81, 0x1D, 0x8B, 0x30, 0xC7,  // ......0.
            /* 0CE8 */  0x4A, 0x70, 0x9D, 0x6C, 0x7C, 0x72, 0x00, 0x33,  // Jp.l|r.3
            /* 0CF0 */  0x3C, 0xE6, 0x40, 0xEA, 0xF3, 0x86, 0x6F, 0x06,  // <.@...o.
            /* 0CF8 */  0x1E, 0x17, 0x3F, 0x72, 0xF8, 0xA8, 0xCA, 0xB0,  // ..?r....
            /* 0D00 */  0x4F, 0xD3, 0x47, 0xA3, 0x17, 0x59, 0x9F, 0x5E,  // O.G..Y.^
            /* 0D08 */  0x30, 0xB0, 0xBE, 0x34, 0x70, 0x58, 0xA3, 0x85,  // 0..4pX..
            /* 0D10 */  0x7D, 0x0C, 0x38, 0x73, 0x5F, 0x88, 0x70, 0x87,  // }.8s_.p.
            /* 0D18 */  0x3A, 0xB0, 0xFC, 0xFF, 0x01, 0xF1, 0xB7, 0x92,  // :.......
            /* 0D20 */  0x47, 0x0E, 0x4F, 0xC0, 0x80, 0x2C, 0xF7, 0xBA,  // G.O..,..
            /* 0D28 */  0x74, 0x20, 0xE2, 0xE7, 0x46, 0xAB, 0x3B, 0x10,  // t ..F.;.
            /* 0D30 */  0x21, 0x30, 0x9E, 0xF6, 0x1E, 0x3F, 0x3C, 0x1B,  // !0...?<.
            /* 0D38 */  0x1F, 0x05, 0x7C, 0x8C, 0xF2, 0xCC, 0xCF, 0x28,  // ..|....(
            /* 0D40 */  0xD2, 0x2B, 0x83, 0xB5, 0x9C, 0x88, 0x50, 0x2A,  // .+....P*
            /* 0D48 */  0x60, 0x14, 0x98, 0x46, 0x77, 0x0E, 0x1E, 0x11,  // `..Fw...
            /* 0D50 */  0x46, 0x70, 0x06, 0xF1, 0x68, 0x7D, 0x73, 0x01,  // Fp..h}s.
            /* 0D58 */  0xA6, 0x67, 0x22, 0xE0, 0x12, 0x72, 0x76, 0xE8,  // .g"..rv.
            /* 0D60 */  0x8B, 0x33, 0x9B, 0xB6, 0x71, 0xDF, 0x00, 0x7D,  // .3..q..}
            /* 0D68 */  0xF8, 0xF4, 0xC4, 0x4F, 0x1B, 0xC6, 0xC9, 0x08,  // ...O....
            /* 0D70 */  0xB0, 0xF1, 0xFF, 0xBF, 0xEB, 0x00, 0xFC, 0xFF,  // ........
            /* 0D78 */  0xFF, 0xDF, 0x75, 0x00, 0x3B, 0xF7, 0x07, 0xDF,  // ..u.;...
            /* 0D80 */  0x75, 0x80, 0x6B, 0x88, 0x55, 0xE9, 0xAE, 0xC3,  // u.k.U...
            /* 0D88 */  0x0F, 0x00, 0x8E, 0xBA, 0x20, 0xDD, 0x0A, 0x22,  // .... .."
            /* 0D90 */  0x1E, 0x82, 0x07, 0xF9, 0x28, 0x60, 0xD8, 0xB3,  // ....(`..
            /* 0D98 */  0x7C, 0x1C, 0xF6, 0x70, 0x4C, 0x30, 0xDC, 0x55,  // |..pL0.U
            /* 0DA0 */  0x83, 0x0E, 0xCD, 0xB1, 0x28, 0x24, 0xE4, 0xA6,  // ....($..
            /* 0DA8 */  0x83, 0x8A, 0x7E, 0x7F, 0xA0, 0x20, 0x06, 0xF4,  // ..~.. ..
            /* 0DB0 */  0x55, 0x12, 0xB0, 0xF2, 0xFF, 0xBF, 0xB5, 0x00,  // U.......
            /* 0DB8 */  0xBB, 0x30, 0x83, 0x46, 0xC9, 0xBF, 0x2D, 0x51,  // .0.F..-Q
            /* 0DC0 */  0x10, 0x0F, 0xDA, 0xD2, 0x6E, 0x2D, 0xA0, 0x38,  // ....n-.8
            /* 0DC8 */  0x04, 0xF8, 0xD6, 0x02, 0x5F, 0xDE, 0xAD, 0x05,  // ...._...
            /* 0DD0 */  0x14, 0xB7, 0x00, 0x1F, 0x0D, 0xF8, 0x71, 0xC1,  // ......q.
            /* 0DD8 */  0x07, 0x0E, 0xDF, 0x58, 0x7C, 0x37, 0x26, 0x17,  // ...X|7&.
            /* 0DE0 */  0x16, 0xA8, 0xE3, 0xE7, 0xE0, 0xBE, 0xC6, 0xBF,  // ........
            /* 0DE8 */  0xB0, 0xC0, 0x38, 0x99, 0x80, 0xE3, 0x48, 0x02,  // ..8...H.
            /* 0DF0 */  0xD8, 0xF9, 0xFF, 0x1F, 0x49, 0xC0, 0x02, 0xE9,  // ....I...
            /* 0DF8 */  0x23, 0x09, 0x70, 0x8D, 0xB4, 0x2A, 0x2A, 0xE2,  // #.p..**.
            /* 0E00 */  0x3D, 0xA0, 0x53, 0x89, 0x61, 0xF8, 0xE8, 0x7C,  // =.S.a..|
            /* 0E08 */  0x66, 0xC0, 0x5F, 0x39, 0x18, 0x38, 0x3B, 0x91,  // f._9.8;.
            /* 0E10 */  0x19, 0x8E, 0x0F, 0xDC, 0xE3, 0x7B, 0x21, 0x3B,  // .....{!;
            /* 0E18 */  0xAD, 0x87, 0x02, 0xDF, 0xC9, 0x0C, 0xC9, 0xAE,  // ........
            /* 0E20 */  0xE0, 0xB8, 0xC3, 0x83, 0xC7, 0xFE, 0x50, 0xE4,  // ......P.
            /* 0E28 */  0x1B, 0xC2, 0x0B, 0x82, 0x2F, 0x07, 0x0C, 0x0A,  // ..../...
            /* 0E30 */  0xC6, 0x2D, 0x1C, 0x73, 0x04, 0x87, 0x43, 0x70,  // .-.s..Cp
            /* 0E38 */  0xC6, 0x47, 0x81, 0x19, 0xA4, 0x2F, 0x20, 0xAF,  // .G.../ .
            /* 0E40 */  0x07, 0x1E, 0x2C, 0x73, 0x7F, 0xA0, 0xD2, 0x09,  // ..,s....
            /* 0E48 */  0xE6, 0x71, 0xEA, 0xC9, 0xA0, 0x39, 0x14, 0x9D,  // .q...9..
            /* 0E50 */  0x09, 0x4E, 0xA1, 0xAD, 0x61, 0x09, 0xE7, 0x81,  // .N..a...
            /* 0E58 */  0x22, 0x44, 0x94, 0x60, 0xAF, 0x54, 0x6F, 0x0C,  // "D.`.To.
            /* 0E60 */  0xCF, 0xEB, 0x51, 0xE2, 0x45, 0x0A, 0x18, 0x2D,  // ..Q.E..-
            /* 0E68 */  0x4A, 0xB0, 0xDE, 0x20, 0x04, 0x1A, 0x29, 0x44,  // J.. ..)D
            /* 0E70 */  0xC0, 0x10, 0xAF, 0x13, 0xB1, 0xC2, 0x45, 0x6F,  // ......Eo
            /* 0E78 */  0x7F, 0x10, 0x24, 0xC0, 0x9B, 0x42, 0xD7, 0x14,  // ..$..B..
            /* 0E80 */  0x47, 0x3A, 0xC4, 0xA0, 0x87, 0xED, 0x3B, 0x39,  // G:....;9
            /* 0E88 */  0x9F, 0x56, 0x90, 0xE3, 0xF2, 0x41, 0x06, 0x43,  // .V...A.C
            /* 0E90 */  0xF0, 0xF0, 0xE1, 0x2F, 0x80, 0x0F, 0x00, 0xD8,  // .../....
            /* 0E98 */  0xFF, 0x3F, 0x41, 0xD7, 0x80, 0x9A, 0xF9, 0xE3,  // .?A.....
            /* 0EA0 */  0x01, 0x58, 0x0E, 0x17, 0xF0, 0x07, 0xFE, 0x04,  // .X......
            /* 0EA8 */  0x83, 0x3B, 0xAB, 0x68, 0x10, 0xA8, 0x93, 0x0A,  // .;.h....
            /* 0EB0 */  0x3F, 0x5D, 0xF9, 0x6E, 0xEE, 0x1B, 0x90, 0x09,  // ?].n....
            /* 0EB8 */  0x2C, 0xF6, 0x20, 0x42, 0xC7, 0x03, 0xFE, 0xA1,  // ,. B....
            /* 0EC0 */  0xBF, 0xD6, 0xFB, 0x50, 0xE1, 0xF9, 0xFA, 0x72,  // ...P...r
            /* 0EC8 */  0xEF, 0xCB, 0x3F, 0x58, 0xAE, 0x09, 0xFC, 0xFA,  // ..?X....
            /* 0ED0 */  0x0F, 0x78, 0x14, 0x3C, 0x2E, 0x14, 0x34, 0x0E,  // .x.<..4.
            /* 0ED8 */  0xF1, 0xA9, 0xEE, 0xD4, 0x7D, 0x66, 0x39, 0x61,  // ....}f9a
            /* 0EE0 */  0xDC, 0xFF, 0x7F, 0xC4, 0x6C, 0xBC, 0xE0, 0x3A,  // ....l..:
            /* 0EE8 */  0x7F, 0x20, 0xDE, 0x24, 0x3E, 0x96, 0xD0, 0xF0,  // . .$>...
            /* 0EF0 */  0x27, 0x13, 0x40, 0xE0, 0x8C, 0x9E, 0x4C, 0x3C,  // '.@...L<
            /* 0EF8 */  0xEF, 0x77, 0x92, 0x67, 0xA1, 0x43, 0x88, 0xF1,  // .w.g.C..
            /* 0F00 */  0x46, 0x12, 0xC4, 0x08, 0x4F, 0x26, 0xEC, 0x42,  // F...O&.B
            /* 0F08 */  0xF2, 0x40, 0x12, 0xE2, 0xC9, 0xC4, 0xD7, 0x92,  // .@......
            /* 0F10 */  0x60, 0x21, 0x9E, 0x4C, 0x18, 0x58, 0xE8, 0x58,  // `!.L.X.X
            /* 0F18 */  0xAF, 0x45, 0x31, 0xD8, 0x4D, 0xC5, 0x70, 0x4F,  // .E1.M.pO
            /* 0F20 */  0x26, 0x2C, 0xF8, 0x23, 0x43, 0xB7, 0x47, 0x9F,  // &,.#C.G.
            /* 0F28 */  0x4C, 0x00, 0x43, 0xFF, 0xFF, 0x93, 0x09, 0xB0,  // L.C.....
            /* 0F30 */  0x3F, 0x52, 0xF9, 0xC4, 0x86, 0x1B, 0x85, 0x0F,  // ?R......
            /* 0F38 */  0x16, 0x11, 0xD9, 0x59, 0x87, 0x0C, 0x9A, 0xDE,  // ...Y....
            /* 0F40 */  0xF7, 0xC0, 0x61, 0x64, 0x60, 0x40, 0xE1, 0x30,  // ..ad`@.0
            /* 0F48 */  0x86, 0x3F, 0xC7, 0x91, 0x13, 0x0C, 0x28, 0xCE,  // .?....(.
            /* 0F50 */  0x13, 0x98, 0x93, 0xC8, 0x73, 0xC2, 0x8B, 0x05,  // ....s...
            /* 0F58 */  0x3B, 0xB9, 0x00, 0x6E, 0xAE, 0xC0, 0x04, 0x87,  // ;..n....
            /* 0F60 */  0xFC, 0xFF, 0x4F, 0x2E, 0xE0, 0x3C, 0x97, 0xC3,  // ..O..<..
            /* 0F68 */  0x18, 0x03, 0xD7, 0xFF, 0xCA, 0xF4, 0x31, 0x8F,  // ......1.
            /* 0F70 */  0x4A, 0x7A, 0xFE, 0x19, 0x86, 0xB2, 0xF8, 0x84,  // Jz......
            /* 0F78 */  0xE0, 0x73, 0x01, 0x3F, 0x21, 0x78, 0x04, 0x6F,  // .s.?!x.o
            /* 0F80 */  0x5B, 0xC7, 0xC9, 0x4E, 0x26, 0xBE, 0x6E, 0xF8,  // [..N&.n.
            /* 0F88 */  0x64, 0xC0, 0x0E, 0x9F, 0x1E, 0xA4, 0x47, 0x86,  // d.....G.
            /* 0F90 */  0x3B, 0x0F, 0x80, 0xED, 0xC0, 0x02, 0xEB, 0x50,  // ;......P
            /* 0F98 */  0x00, 0xB8, 0xD1, 0x68, 0x62, 0xE4, 0x4C, 0x1F,  // ...hb.L.
            /* 0FA0 */  0x88, 0x0E, 0xB4, 0x9C, 0xC3, 0x29, 0x16, 0xA7,  // .....)..
            /* 0FA8 */  0x1B, 0xA6, 0x0F, 0x3E, 0xBE, 0x9B, 0x9C, 0xCA,  // ...>....
            /* 0FB0 */  0xA9, 0xE2, 0x4F, 0x94, 0x56, 0x0D, 0xA9, 0x93,  // ..O.V...
            /* 0FB8 */  0x25, 0xD7, 0x0B, 0xA3, 0x68, 0x0F, 0x22, 0x9D,  // %...h.".
            /* 0FC0 */  0x46, 0x79, 0x18, 0x18, 0xC1, 0x19, 0xC4, 0x87,  // Fy......
            /* 0FC8 */  0x1A, 0x67, 0x3B, 0xD4, 0xA0, 0x95, 0x08, 0xF8,  // .g;.....
            /* 0FD0 */  0xFF, 0x5F, 0xAD, 0x3D, 0x06, 0x76, 0xA6, 0x05,  // ._.=.v..
            /* 0FD8 */  0xCC, 0x5C, 0x7F, 0x7D, 0x73, 0xC1, 0xBD, 0x24,  // .\.}s..$
            /* 0FE0 */  0x7C, 0x73, 0xC1, 0xCC, 0x0D, 0x38, 0x8C, 0xDF,  // |s...8..
            /* 0FE8 */  0x73, 0x83, 0x85, 0xE6, 0xB9, 0xC1, 0xBF, 0xBD,  // s.......
            /* 0FF0 */  0x60, 0xA3, 0xCD, 0x0D, 0x8D, 0xCC, 0xE6, 0xF6,  // `.......
            /* 0FF8 */  0x1C, 0x10, 0xE1, 0x15, 0xC1, 0x87, 0x0F, 0x8F,  // ........
            /* 1000 */  0x0E, 0x38, 0x00, 0x7A, 0x74, 0xB0, 0x90, 0x3C,  // .8.zt..<
            /* 1008 */  0x3A, 0xF0, 0xFC, 0xFF, 0x47, 0xC7, 0xD2, 0x8D,  // :...G...
            /* 1010 */  0x0E, 0xAD, 0x05, 0x44, 0x2E, 0x4F, 0x53, 0xE4,  // ...D.OS.
            /* 1018 */  0x64, 0x72, 0x7A, 0x4F, 0xB9, 0xBE, 0xB2, 0x7A,  // drzO...z
            /* 1020 */  0x7A, 0xC0, 0x63, 0x00, 0x9E, 0x1E, 0x2C, 0x34,  // z.c...,4
            /* 1028 */  0x4F, 0x0F, 0x6C, 0x11, 0x2F, 0x19, 0xE8, 0xDB,  // O.l./...
            /* 1030 */  0x87, 0x91, 0x5F, 0xA0, 0x7D, 0x5E, 0x32, 0xA8,  // .._.}^2.
            /* 1038 */  0xEF, 0x36, 0x30, 0x46, 0x08, 0x1C, 0x6E, 0xD5,  // .60F..n.
            /* 1040 */  0x1E, 0x21, 0x2C, 0x34, 0x1F, 0x34, 0xC0, 0x16,  // .!,4.4..
            /* 1048 */  0x6F, 0x84, 0xE8, 0x61, 0xF9, 0x4E, 0x72, 0x7E,  // o..a.Nr~
            /* 1050 */  0x27, 0x77, 0x7C, 0xC0, 0x0A, 0xD8, 0xE3, 0xE3,  // 'w|.....
            /* 1058 */  0xFF, 0xFF, 0xF1, 0x61, 0x51, 0x7C, 0x74, 0x07,  // ...aQ|t.
            /* 1060 */  0xCE, 0x99, 0xB6, 0xA4, 0xD3, 0x0D, 0x4F, 0x01,  // ......O.
            /* 1068 */  0xA3, 0x93, 0x8B, 0x41, 0x7C, 0x1F, 0xB1, 0x42,  // ...A|..B
            /* 1070 */  0x10, 0x1D, 0xDD, 0xE1, 0xEB, 0x81, 0xD4, 0xD1,  // ........
            /* 1078 */  0x1D, 0xFE, 0x95, 0xDD, 0x47, 0x77, 0xF8, 0xA3,  // ....Gw..
            /* 1080 */  0x3B, 0x1E, 0x66, 0xE3, 0x58, 0x44, 0xCF, 0x57,  // ;.f.XD.W
            /* 1088 */  0x3E, 0x26, 0x26, 0x78, 0x95, 0xF0, 0x61, 0xE2,  // >&&x..a.
            /* 1090 */  0x39, 0x89, 0x1D, 0xDF, 0x7D, 0x70, 0x4C, 0xF0,  // 9...}pL.
            /* 1098 */  0xC0, 0xF8, 0xD4, 0xCE, 0x4E, 0x8D, 0x21, 0x8D,  // ....N.!.
            /* 10A0 */  0xCA, 0x60, 0x0D, 0xF1, 0xFC, 0xC6, 0xF4, 0xAD,  // .`......
            /* 10A8 */  0x4F, 0xE7, 0x78, 0xB8, 0x7A, 0x00, 0x35, 0x16,  // O.x.z.5.
            /* 10B0 */  0xAE, 0x04, 0x46, 0xE7, 0x78, 0xFC, 0x85, 0xE1,  // ..F.x...
            /* 10B8 */  0x75, 0xCA, 0x0B, 0x08, 0xE6, 0x79, 0x45, 0x78,  // u....yEx
            /* 10C0 */  0x61, 0xF0, 0x49, 0x9C, 0x9F, 0x8E, 0x1E, 0xA9,  // a.I.....
            /* 10C8 */  0x0C, 0x15, 0x27, 0xF0, 0x2B, 0xC1, 0x9B, 0x56,  // ..'.+..V
            /* 10D0 */  0x88, 0x60, 0x86, 0x7D, 0x0C, 0x78, 0xDC, 0x30,  // .`.}.x.0
            /* 10D8 */  0xAA, 0x4F, 0xA0, 0xC6, 0x7A, 0x48, 0xF2, 0x88,  // .O..zH..
            /* 10E0 */  0xF9, 0x6D, 0xEA, 0x80, 0x22, 0x3D, 0xFD, 0x78,  // .m.."=.x
            /* 10E8 */  0x02, 0xBE, 0xDE, 0xF3, 0xFF, 0xFF, 0xF5, 0x1E,  // ........
            /* 10F0 */  0xEE, 0x8D, 0xD1, 0x83, 0xE2, 0x88, 0x0F, 0x0E,  // ........
            /* 10F8 */  0x0F, 0x21, 0x9E, 0x0A, 0xBB, 0x3D, 0x61, 0xC0,  // .!...=a.
            /* 1100 */  0x8E, 0xC0, 0x47, 0x41, 0x7E, 0x78, 0x09, 0x14,  // ..GA~x..
            /* 1108 */  0xA5, 0x78, 0x4C, 0xDD, 0x1C, 0x3C, 0x43, 0x83,  // .xL..<C.
            /* 1110 */  0x62, 0xE0, 0x0F, 0x92, 0xCD, 0x2E, 0xAE, 0xB1,  // b.......
            /* 1118 */  0x7C, 0x2F, 0x31, 0x22, 0x76, 0x40, 0x0C, 0x25,  // |/1"v@.%
            /* 1120 */  0xD2, 0x09, 0x54, 0x8F, 0x42, 0xE6, 0xE0, 0x11,  // ..T.B...
            /* 1128 */  0x79, 0x36, 0x9E, 0x0E, 0x3B, 0x75, 0xE0, 0x27,  // y6..;u.'
            /* 1130 */  0xE1, 0x33, 0x93, 0xEF, 0xAF, 0x1E, 0x90, 0x87,  // .3......
            /* 1138 */  0xC2, 0xA7, 0xC8, 0x80, 0xE1, 0xC0, 0xBC, 0x04,  // ........
            /* 1140 */  0x30, 0x68, 0x0F, 0x9F, 0xA1, 0xBF, 0x16, 0x19,  // 0h......
            /* 1148 */  0x9D, 0x9F, 0x76, 0x4E, 0xC7, 0xE7, 0x4D, 0x1F,  // ..vN..M.
            /* 1150 */  0x35, 0x7C, 0x0F, 0xC0, 0x9C, 0xC8, 0x7C, 0x02,  // 5|....|.
            /* 1158 */  0xF0, 0x89, 0x8D, 0x01, 0x3D, 0xF9, 0x1B, 0xD5,  // ....=...
            /* 1160 */  0xF7, 0x52, 0x76, 0xF5, 0xC1, 0x20, 0x9D, 0x46,  // .Rv.. .F
            /* 1168 */  0x94, 0x48, 0xAF, 0x03, 0xFC, 0x76, 0xC6, 0xC1,  // .H...v..
            /* 1170 */  0x02, 0x1D, 0x2B, 0x9F, 0x4C, 0x3C, 0x4F, 0xD8,  // ..+.L<O.
            /* 1178 */  0x23, 0x85, 0x73, 0xC5, 0x60, 0x07, 0x13, 0x7E,  // #.s.`..~
            /* 1180 */  0xC5, 0xF0, 0xC1, 0x84, 0x5D, 0x02, 0x31, 0x37,  // ....].17
            /* 1188 */  0x4C, 0x70, 0x5D, 0x31, 0x7C, 0x32, 0x81, 0xF7,  // Lp]1|2..
            /* 1190 */  0xFF, 0x3F, 0x99, 0x80, 0x01, 0x1E, 0x73, 0x37,  // .?....s7
            /* 1198 */  0xF5, 0x79, 0xC6, 0xB2, 0xC6, 0x85, 0x3A, 0xD2,  // .y....:.
            /* 11A0 */  0xF8, 0x24, 0xF3, 0x7C, 0x6C, 0xEC, 0x87, 0x01,  // .$.|l...
            /* 11A8 */  0x4F, 0xFA, 0x30, 0x9F, 0x9D, 0x7C, 0x55, 0xE3,  // O.0..|U.
            /* 11B0 */  0xB0, 0xBE, 0x94, 0x70, 0x58, 0xA3, 0x85, 0x7D,  // ...pX..}
            /* 11B8 */  0x1D, 0x30, 0xEC, 0x03, 0x20, 0xEE, 0x9A, 0x0B,  // .0.. ...
            /* 11C0 */  0x16, 0x40, 0xFC, 0x25, 0xE1, 0xC1, 0xC0, 0x13,  // .@.%....
            /* 11C8 */  0x30, 0x20, 0x8B, 0x73, 0xA3, 0x46, 0x05, 0xB8,  // 0 .s.F..
            /* 11D0 */  0x54, 0x03, 0x02, 0xAF, 0xD2, 0x3E, 0xC7, 0xBC,  // T....>..
            /* 11D8 */  0xC3, 0x3C, 0x14, 0xBC, 0xCB, 0x44, 0x08, 0xF2,  // .<...D..
            /* 11E0 */  0x34, 0xFD, 0x8E, 0x10, 0x21, 0x54, 0xA0, 0x97,  // 4...!T..
            /* 11E8 */  0x6A, 0xE3, 0x05, 0x7D, 0x99, 0x88, 0x12, 0x27,  // j..}...'
            /* 11F0 */  0x4A, 0x84, 0x50, 0xC6, 0x38, 0x97, 0xA7, 0x83,  // J.P.8...
            /* 11F8 */  0x97, 0x9A, 0x70, 0x8F, 0x09, 0x81, 0x9F, 0x1C,  // ..p.....
            /* 1200 */  0x9E, 0xAA, 0x8D, 0x70, 0x8C, 0x2F, 0xD5, 0x4C,  // ...p./.L
            /* 1208 */  0xFC, 0x45, 0x46, 0xF7, 0x24, 0x5F, 0xAA, 0xF1,  // .EF.$_..
            /* 1210 */  0xFF, 0xFF, 0x4B, 0x35, 0xC0, 0x87, 0x61, 0xF8,  // ..K5..a.
            /* 1218 */  0x36, 0x0B, 0x8E, 0x6B, 0x02, 0xBF, 0xCF, 0x02,  // 6..k....
            /* 1220 */  0xFE, 0xFE, 0xFF, 0xE7, 0x16, 0x4F, 0xE3, 0x9D,  // .....O..
            /* 1228 */  0x19, 0xDC, 0xC3, 0x85, 0x3D, 0x0C, 0xAE, 0xE9,  // ....=...
            /* 1230 */  0x9A, 0xAB, 0xF3, 0x0D, 0x57, 0x01, 0x83, 0xBA,  // ....W...
            /* 1238 */  0x36, 0x83, 0x2B, 0xED, 0x1A, 0x04, 0xEA, 0x23,  // 6.+....#
            /* 1240 */  0x8D, 0x4F, 0x18, 0xB8, 0xE3, 0x82, 0x4F, 0x17,  // .O....O.
            /* 1248 */  0xB8, 0xDB, 0x3B, 0xCC, 0x4B, 0x8A, 0xCF, 0x7C,  // ..;.K..|
            /* 1250 */  0x98, 0x9B, 0x83, 0x07, 0xE4, 0x13, 0x04, 0xF8,  // ........
            /* 1258 */  0x2F, 0x7D, 0xD8, 0x55, 0xB0, 0x43, 0x22, 0xFE,  // /}.U.C".
            /* 1260 */  0xFE, 0x65, 0xD0, 0x73, 0x0C, 0xEA, 0x03, 0xCF,  // .e.s....
            /* 1268 */  0x2B, 0x86, 0xAF, 0x09, 0x0F, 0x13, 0x8E, 0x7A,  // +......z
            /* 1270 */  0x0A, 0xA2, 0x63, 0x03, 0xC7, 0x61, 0x03, 0x1C,  // ..c..a..
            /* 1278 */  0x47, 0x1B, 0xDC, 0x31, 0xC7, 0xE7, 0x10, 0x1C,  // G..1....
            /* 1280 */  0xDC, 0x7B, 0x81, 0x87, 0xE1, 0x7B, 0x8E, 0x47,  // .{...{.G
            /* 1288 */  0xC4, 0xFE, 0xFF, 0x23, 0xF2, 0xF8, 0x1F, 0x22,  // ...#..."
            /* 1290 */  0x5E, 0x38, 0x22, 0x04, 0xC4, 0x9F, 0xA9, 0xF8,  // ^8".....
            /* 1298 */  0x80, 0xC1, 0x97, 0x67, 0xC0, 0xBA, 0x1C, 0xE2,  // ...g....
            /* 12A0 */  0x06, 0xEC, 0x21, 0x3D, 0x5C, 0x18, 0xF5, 0x89,  // ..!=\...
            /* 12A8 */  0xCC, 0xE8, 0xAF, 0x2F, 0xCF, 0x77, 0x26, 0xB0,  // .../.w&.
            /* 12B0 */  0x72, 0x58, 0x5D, 0x0F, 0x3D, 0x60, 0x70, 0x00,  // rX].=`p.
            /* 12B8 */  0x7A, 0xC0, 0xF0, 0xCF, 0x16, 0x6F, 0x8A, 0x60,  // z....o.`
            /* 12C0 */  0xB8, 0x68, 0xFA, 0xB8, 0xE0, 0x43, 0x8F, 0x15,  // .h...C..
            /* 12C8 */  0xDD, 0x14, 0xD1, 0xF7, 0x44, 0x1F, 0x11, 0xB1,  // ....D...
            /* 12D0 */  0x77, 0x09, 0x72, 0x44, 0x84, 0x7A, 0x97, 0xF0,  // w.rD.z..
            /* 12D8 */  0x1C, 0xF8, 0x21, 0x8F, 0x0D, 0xF5, 0xBD, 0xE7,  // ..!.....
            /* 12E0 */  0x19, 0xCE, 0x07, 0xAB, 0xF7, 0x00, 0x9F, 0x3C,  // .......<
            /* 12E8 */  0x1E, 0xDD, 0xD8, 0xA9, 0x90, 0x1D, 0xB7, 0x3C,  // .......<
            /* 12F0 */  0x5E, 0x9F, 0x33, 0x7C, 0xC1, 0x64, 0x43, 0x36,  // ^.3|.dC6
            /* 12F8 */  0xD8, 0xAB, 0x86, 0xCF, 0x5F, 0x3E, 0x10, 0xE2,  // ...._>..
            /* 1300 */  0x0E, 0x51, 0xBE, 0xFA, 0xF1, 0x43, 0x08, 0x3B,  // .Q...C.;
            /* 1308 */  0x91, 0x1C, 0xF5, 0xFB, 0x9B, 0x4F, 0x28, 0x27,  // .....O('
            /* 1310 */  0x74, 0x20, 0xBE, 0xB3, 0x81, 0xF3, 0x60, 0xED,  // t ....`.
            /* 1318 */  0x7B, 0x05, 0xE6, 0xFF, 0x7F, 0xF9, 0x65, 0x23,  // {.....e#
            /* 1320 */  0xC3, 0x1C, 0x0D, 0x60, 0x5D, 0x42, 0xC0, 0x75,  // ...`]B.u
            /* 1328 */  0xC7, 0xF0, 0x25, 0x04, 0xF8, 0x04, 0xBD, 0x44,  // ..%....D
            /* 1330 */  0xA0, 0xAF, 0x19, 0x1E, 0xDD, 0x23, 0x00, 0xE6,  // .....#..
            /* 1338 */  0x8A, 0xC1, 0x8E, 0x05, 0x3E, 0x6C, 0xF8, 0x1A,  // ....>l..
            /* 1340 */  0xC0, 0xEE, 0x05, 0x0E, 0x73, 0x8F, 0x00, 0x15,  // ....s...
            /* 1348 */  0xA8, 0x87, 0x07, 0x5F, 0xED, 0x3D, 0x02, 0x14,  // ..._.=..
            /* 1350 */  0xE7, 0x56, 0x1F, 0x1A, 0x3C, 0x50, 0xAB, 0x3A,  // .V..<P.:
            /* 1358 */  0xC1, 0x42, 0x39, 0xC0, 0xF2, 0xD3, 0x2B, 0xBF,  // .B9...+.
            /* 1360 */  0x15, 0xB0, 0x7C, 0x37, 0x09, 0xE8, 0x79, 0x66,  // ..|7..yf
            /* 1368 */  0x81, 0x4A, 0x72, 0x93, 0x80, 0x0E, 0xF3, 0x7C,  // .Jr....|
            /* 1370 */  0xFE, 0x32, 0xC3, 0xE6, 0x7F, 0xE0, 0xBE, 0x7E,  // .2.....~
            /* 1378 */  0x62, 0x06, 0x69, 0x94, 0xB7, 0x3C, 0x9F, 0xC1,  // b.i..<..
            /* 1380 */  0xF8, 0xFF, 0xFF, 0x0C, 0xE1, 0x63, 0x2B, 0x3B,  // .....c+;
            /* 1388 */  0x53, 0xF0, 0x13, 0x2C, 0xEE, 0x0E, 0x60, 0x94,  // S..,..`.
            /* 1390 */  0x67, 0x4F, 0x4F, 0x80, 0x9D, 0x6A, 0x8D, 0xFC,  // gOO..j..
            /* 1398 */  0x8E, 0xEF, 0x4B, 0x84, 0xEF, 0x45, 0x98, 0x13,  // ..K..E..
            /* 13A0 */  0x05, 0xF8, 0x4E, 0x21, 0x3E, 0x24, 0xE0, 0xCE,  // ..N!>$..
            /* 13A8 */  0x02, 0x1E, 0xCB, 0xD3, 0x2A, 0xBB, 0x20, 0x81,  // ....*. .
            /* 13B0 */  0xEF, 0x38, 0xE2, 0xC3, 0x04, 0xF8, 0x07, 0x86,  // .8......
            /* 13B8 */  0x8F, 0x7C, 0x27, 0x40, 0x9D, 0x3C, 0x38, 0xEA,  // .|'@.<8.
            /* 13C0 */  0xD9, 0x3E, 0xC2, 0x1A, 0xF5, 0xBD, 0xEA, 0xE1,  // .>......
            /* 13C8 */  0xCD, 0x57, 0x09, 0x7E, 0x31, 0xE0, 0xC1, 0xAE,  // .W.~1...
            /* 13D0 */  0x48, 0xA0, 0xF2, 0x30, 0x3A, 0xD0, 0x0D, 0x01,  // H..0:...
            /* 13D8 */  0x33, 0x73, 0x3E, 0x84, 0xB3, 0xF1, 0xE8, 0x71,  // 3s>....q
            /* 13E0 */  0xA7, 0x10, 0xF0, 0x0D, 0xCE, 0xC0, 0xFF, 0xFF,  // ........
            /* 13E8 */  0x57, 0x46, 0xEC, 0xF5, 0x1F, 0x3B, 0x51, 0xCC,  // WF...;Q.
            /* 13F0 */  0xA9, 0x00, 0x7C, 0xC3, 0xF0, 0x89, 0x05, 0xF8,  // ..|.....
            /* 13F8 */  0xDC, 0x70, 0xC1, 0x71, 0xAD, 0xC3, 0x9E, 0x71,  // .p.q...q
            /* 1400 */  0x70, 0x17, 0x42, 0xC0, 0xCE, 0xB0, 0x78, 0x88,  // p.B...x.
            /* 1408 */  0x8F, 0x8A, 0xCF, 0x08, 0x54, 0x36, 0x0C, 0xEA,  // ....T6..
            /* 1410 */  0xE6, 0x07, 0x2E, 0x79, 0x97, 0x5D, 0x7A, 0xC6,  // ...y.]z.
            /* 1418 */  0xF7, 0xE0, 0xC1, 0xF0, 0xFF, 0x1F, 0x3C, 0xF6,  // ......<.
            /* 1420 */  0xB0, 0xC0, 0xA7, 0x8F, 0x1D, 0x3F, 0x60, 0x67,  // .....?`g
            /* 1428 */  0xA8, 0xB8, 0xFB, 0x25, 0x18, 0xA7, 0x8A, 0x1D,  // ...%....
            /* 1430 */  0x02, 0x0F, 0xBC, 0x22, 0x2A, 0xF5, 0x0C, 0xA0,  // ..."*...
            /* 1438 */  0x88, 0x30, 0xA8, 0x93, 0x93, 0xAF, 0xD0, 0x80,  // .0......
            /* 1440 */  0x93, 0x11, 0xE3, 0xEE, 0x92, 0x70, 0xA7, 0xFC,  // .....p..
            /* 1448 */  0x5A, 0xEF, 0x1B, 0x8E, 0xEF, 0x25, 0xA7, 0xCB,  // Z....%..
            /* 1450 */  0xFE, 0xFF, 0xD3, 0x65, 0x38, 0x0F, 0x28, 0xFC,  // ...e8.(.
            /* 1458 */  0x56, 0x0D, 0xE3, 0x2C, 0xF0, 0x08, 0xF0, 0x3E,  // V..,...>
            /* 1460 */  0xCF, 0x6F, 0xD5, 0x6F, 0xD1, 0x2F, 0x04, 0x4F,  // .o.o./.O
            /* 1468 */  0x57, 0x21, 0x5E, 0xB0, 0x9E, 0x0D, 0xDE, 0x7D,  // W!^....}
            /* 1470 */  0x62, 0x3C, 0x4E, 0x3F, 0x59, 0xC7, 0x09, 0xF3,  // b<N?Y...
            /* 1478 */  0xF8, 0xF3, 0x56, 0x6D, 0x8C, 0xA3, 0x89, 0x18,  // ..Vm....
            /* 1480 */  0xE5, 0xDC, 0x1E, 0x06, 0x22, 0x9F, 0x4B, 0x94,  // ....".K.
            /* 1488 */  0xF7, 0x8B, 0x17, 0x82, 0x88, 0xD1, 0x0C, 0x11,  // ........
            /* 1490 */  0x34, 0x46, 0xA0, 0x58, 0x81, 0xE2, 0xBD, 0x55,  // 4F.X...U
            /* 1498 */  0x33, 0xE1, 0xB7, 0x6A, 0x40, 0xCD, 0x81, 0x06,  // 3..j@...
            /* 14A0 */  0x7F, 0xAB, 0x06, 0xEE, 0xA7, 0x07, 0xDC, 0xAD,  // ........
            /* 14A8 */  0x1A, 0x6C, 0xA7, 0x14, 0xF8, 0xFF, 0xFF, 0x53,  // .l.....S
            /* 14B0 */  0x0A, 0x60, 0xE5, 0x46, 0x8E, 0x3B, 0xA5, 0x80,  // .`.F.;..
            /* 14B8 */  0x73, 0xB4, 0xF0, 0x46, 0xC1, 0xD5, 0xBD, 0x26,  // s..F...&
            /* 14C0 */  0x7C, 0x0E, 0xA2, 0x7A, 0x60, 0x50, 0x47, 0x21,  // |..z`PG!
            /* 14C8 */  0x70, 0xE5, 0x7E, 0xB3, 0x68, 0x10, 0x96, 0x78,  // p.~.h..x
            /* 14D0 */  0xAE, 0x44, 0x43, 0x7B, 0x4A, 0x6F, 0x22, 0x1E,  // .DC{Jo".
            /* 14D8 */  0xCF, 0x9B, 0xA1, 0xEF, 0x0D, 0xA1, 0x9F, 0xCD,  // ........
            /* 14E0 */  0x2C, 0xE7, 0x4C, 0x09, 0xAA, 0x87, 0xB7, 0x4F,  // ,.L....O
            /* 14E8 */  0x10, 0xF0, 0x2F, 0x25, 0x3E, 0x53, 0xC2, 0xE7,  // ../%>S..
            /* 14F0 */  0xF3, 0x28, 0x3D, 0x18, 0x43, 0xFA, 0x48, 0xC9,  // .(=.C.H.
            /* 14F8 */  0x41, 0x9E, 0x48, 0x1E, 0x2E, 0xD8, 0xFF, 0xFF,  // A.H.....
            /* 1500 */  0x36, 0x09, 0xFB, 0x8C, 0x72, 0x00, 0x18, 0x59,  // 6...r..Y
            /* 1508 */  0x37, 0x49, 0xF4, 0x41, 0x92, 0x63, 0xC4, 0xF5,  // 7I.A.c..
            /* 1510 */  0xAD, 0xD1, 0xF7, 0x61, 0x1F, 0x09, 0xCE, 0xE7,  // ...a....
            /* 1518 */  0x61, 0x10, 0x8C, 0x67, 0x3A, 0x8F, 0x9A, 0x1F,  // a..g:...
            /* 1520 */  0x58, 0xF8, 0xF8, 0x39, 0xF8, 0xFB, 0xC1, 0xD3,  // X..9....
            /* 1528 */  0xA5, 0x0F, 0x3B, 0x21, 0x1E, 0x7C, 0xF8, 0x99,  // ..;!.|..
            /* 1530 */  0x0E, 0x5C, 0x2A, 0xCE, 0x74, 0x40, 0xE2, 0x04,  // .\*.t@..
            /* 1538 */  0x0C, 0xE3, 0xB4, 0x80, 0x1B, 0x88, 0xCF, 0x7F,  // ........
            /* 1540 */  0xD8, 0x29, 0x9F, 0x08, 0x3B, 0xC0, 0x60, 0x46,  // .)..;.`F
            /* 1548 */  0x07, 0xAE, 0xB1, 0xF9, 0x94, 0x09, 0x7C, 0x34,  // ......|4
            /* 1550 */  0x3C, 0x6B, 0x74, 0xB4, 0xC0, 0xCF, 0xEC, 0xFF,  // <kt.....
            /* 1558 */  0xFF, 0xE8, 0xC1, 0x8E, 0x16, 0xB8, 0xBC, 0x47,  // .......G
            /* 1560 */  0x0B, 0x50, 0x0D, 0xCB, 0x43, 0x83, 0x7F, 0x73,  // .P..C..s
            /* 1568 */  0x79, 0xB4, 0x00, 0xC3, 0x51, 0x82, 0x9F, 0x0D,  // y...Q...
            /* 1570 */  0x7C, 0x94, 0xF0, 0xE9, 0x17, 0x7F, 0x82, 0xF1,  // |.......
            /* 1578 */  0xF1, 0x97, 0x7B, 0x03, 0xA6, 0x17, 0x0C, 0x2B,  // ..{....+
            /* 1580 */  0xA0, 0xD6, 0x01, 0x03, 0x6E, 0xE2, 0x61, 0xA0,  // ....n.a.
            /* 1588 */  0xB2, 0x1E, 0x70, 0xE9, 0x54, 0x9F, 0x8D, 0x3C,  // ..p.T..<
            /* 1590 */  0xF2, 0x67, 0x08, 0xB3, 0x1F, 0xD1, 0x6B, 0x99,  // .g....k.
            /* 1598 */  0x8F, 0x39, 0x3E, 0x9C, 0x18, 0x25, 0xA0, 0xCF,  // .9>..%..
            /* 15A0 */  0xBE, 0x0C, 0x10, 0x73, 0xEE, 0x37, 0x46, 0x40,  // ...s.7F@
            /* 15A8 */  0x58, 0x17, 0x19, 0x63, 0xC3, 0x42, 0x3A, 0xA4,  // X..c.B:.
            /* 15B0 */  0xE7, 0x4F, 0x86, 0xC5, 0x6F, 0x36, 0x41, 0x9F,  // .O..o6A.
            /* 15B8 */  0x1C, 0x8C, 0x84, 0xB9, 0x03, 0xF8, 0x70, 0x65,  // ......pe
            /* 15C0 */  0x20, 0x7E, 0x12, 0x78, 0x07, 0xF1, 0x0D, 0xEB,  //  ~.x....
            /* 15C8 */  0x14, 0x70, 0x67, 0x61, 0x76, 0x37, 0x32, 0x14,  // .pgav72.
            /* 15D0 */  0xBF, 0x28, 0xBC, 0x08, 0xF8, 0xCA, 0xC1, 0x6E,  // .(.....n
            /* 15D8 */  0x0C, 0xE0, 0xC3, 0x0A, 0x8C, 0xFD, 0xFF, 0xDF,  // ........
            /* 15E0 */  0x1A, 0xC1, 0x30, 0xFA, 0xE7, 0x24, 0x76, 0xE6,  // ..0..$v.
            /* 15E8 */  0xF2, 0x54, 0x5F, 0x1B, 0x01, 0xFF, 0xA1, 0xEF,  // .T_.....
            /* 15F0 */  0x8C, 0xA8, 0x98, 0xD7, 0x46, 0x40, 0xE1, 0xFF,  // ....F@..
            /* 15F8 */  0xFF, 0xDA, 0x08, 0xBC, 0xEE, 0x26, 0xAF, 0x8D,  // .....&..
            /* 1600 */  0x60, 0x17, 0x7F, 0x6D, 0x04, 0x68, 0x72, 0xF5,  // `..m.hr.
            /* 1608 */  0xC3, 0x5D, 0x1B, 0xC1, 0x76, 0x4C, 0x61, 0xFF,  // .]..vLa.
            /* 1610 */  0xFF, 0x63, 0x0A, 0xE0, 0xEC, 0x12, 0x45, 0x8E,  // .c....E.
            /* 1618 */  0x29, 0x20, 0x1E, 0x2E, 0xEC, 0x0B, 0x33, 0xE2,  // ) ....3.
            /* 1620 */  0x65, 0x40, 0x0F, 0x05, 0x8E, 0x08, 0x83, 0xBA,  // e@......
            /* 1628 */  0x38, 0x82, 0x2B, 0x0A, 0xA5, 0x40, 0x7D, 0xC2,  // 8.+..@}.
            /* 1630 */  0x00, 0xDC, 0xFC, 0xFF, 0x4F, 0x18, 0x3C, 0xD0,  // ....O.<.
            /* 1638 */  0xC8, 0xD0, 0xA3, 0xF0, 0xA8, 0x70, 0xF7, 0x3B,  // .....p.;
            /* 1640 */  0xF0, 0xDC, 0x59, 0x3C, 0x72, 0x0F, 0x0C, 0xF8,  // ..Y<r...
            /* 1648 */  0xC4, 0x1A, 0x18, 0xFA, 0x8C, 0x03, 0x77, 0x6C,  // ......wl
            /* 1650 */  0xE0, 0x3A, 0x95, 0x00, 0x87, 0xB1, 0xE1, 0xEF,  // .:......
            /* 1658 */  0x8D, 0x1E, 0x1B, 0x6E, 0x20, 0x3E, 0x4A, 0x3C,  // ...n >J<
            /* 1660 */  0xAF, 0xB1, 0xB3, 0x02, 0x0E, 0xFC, 0xEC, 0x5E,  // .......^
            /* 1668 */  0x8D, 0xF8, 0xE8, 0xC0, 0x05, 0xE8, 0xD1, 0x01,  // ........
            /* 1670 */  0x8F, 0xFF, 0xFF, 0x41, 0x00, 0xEE, 0xE8, 0x70,  // ...A...p
            /* 1678 */  0x07, 0x27, 0xCC, 0xD8, 0xC0, 0x26, 0x61, 0x6C,  // .'...&al
            /* 1680 */  0x40, 0x29, 0xDF, 0x65, 0x18, 0x0A, 0xF4, 0x2B,  // @).e...+
            /* 1688 */  0x26, 0x43, 0x7C, 0x45, 0xF1, 0xCD, 0xC3, 0x04,  // &C|E....
            /* 1690 */  0xB3, 0x5C, 0x31, 0x41, 0x33, 0x34, 0x83, 0x7A,  // .\1A34.z
            /* 1698 */  0x68, 0xF0, 0xCF, 0x7F, 0xE4, 0x8A, 0x09, 0xFD,  // h.......
            /* 16A0 */  0x7E, 0xE9, 0x03, 0x87, 0xCF, 0x57, 0x66, 0xF5,  // ~....Wf.
            /* 16A8 */  0x15, 0x13, 0xCE, 0xD9, 0x27, 0x42, 0x02, 0x67,  // ....'B.g
            /* 16B0 */  0xBC, 0x0F, 0x43, 0xCF, 0x34, 0x06, 0x54, 0x9A,  // ..C.4.T.
            /* 16B8 */  0x4B, 0x2F, 0x3D, 0xB1, 0x84, 0x38, 0xD1, 0xDE,  // K/=..8..
            /* 16C0 */  0x4F, 0x67, 0xF4, 0xB0, 0xE1, 0x63, 0xAF, 0x67,  // Og...c.g
            /* 16C8 */  0xFB, 0x68, 0xE0, 0x41, 0xFA, 0xC4, 0xC1, 0xEE,  // .h.A....
            /* 16D0 */  0xC4, 0xBE, 0x20, 0x3D, 0xC7, 0x18, 0xED, 0x3D,  // .. =...=
            /* 16D8 */  0xC2, 0xE7, 0x9D, 0x67, 0x4A, 0x23, 0x84, 0x63,  // ...gJ#.c
            /* 16E0 */  0x27, 0x38, 0x8F, 0xC4, 0x97, 0x4C, 0xFF, 0xFF,  // '8...L..
            /* 16E8 */  0xE7, 0xE9, 0x13, 0x0F, 0xF6, 0xE8, 0xC3, 0x8F,  // ........
            /* 16F0 */  0x6C, 0x0C, 0xDB, 0xD7, 0x01, 0x36, 0x2A, 0xDF,  // l....6*.
            /* 16F8 */  0x72, 0x8D, 0x6D, 0xD0, 0xC7, 0x2C, 0x4F, 0x9B,  // r.m..,O.
            /* 1700 */  0x5D, 0x28, 0xC1, 0x27, 0xE9, 0x48, 0x8B, 0xBE,  // ](.'.H..
            /* 1708 */  0xF6, 0x19, 0xF5, 0x81, 0xD4, 0x37, 0x61, 0x5F,  // .....7a_
            /* 1710 */  0x81, 0x9E, 0xB3, 0x3C, 0x1D, 0x4F, 0xC4, 0xB7,  // ...<.O..
            /* 1718 */  0x05, 0xA3, 0xBF, 0x23, 0xB0, 0xD8, 0x77, 0x04,  // ...#..w.
            /* 1720 */  0x50, 0xDD, 0x07, 0xF8, 0x1D, 0x01, 0xEE, 0x54,  // P......T
            /* 1728 */  0xDE, 0x11, 0xC0, 0xA0, 0xEF, 0x42, 0x40, 0x07,  // .....B@.
            /* 1730 */  0xEA, 0xF9, 0x79, 0xAC, 0x3E, 0xD2, 0xFA, 0x92,  // ..y.>...
            /* 1738 */  0xF0, 0x98, 0xC0, 0x60, 0x7C, 0xBD, 0x33, 0x86,  // ...`|.3.
            /* 1740 */  0x61, 0x3C, 0xD2, 0x30, 0x3E, 0x28, 0x70, 0x15,  // a<.0>(p.
            /* 1748 */  0xF7, 0x5A, 0xE8, 0xA9, 0xE7, 0x81, 0xCA, 0x7B,  // .Z.....{
            /* 1750 */  0x50, 0x80, 0x72, 0x23, 0xE8, 0xF2, 0x28, 0x8E,  // P.r#..(.
            /* 1758 */  0x1A, 0x9F, 0x4F, 0x03, 0xF6, 0x35, 0x59, 0xDD,  // ..O..5Y.
            /* 1760 */  0x57, 0x7D, 0x39, 0xF6, 0xA5, 0x83, 0xDD, 0x65,  // W}9....e
            /* 1768 */  0xD9, 0xDD, 0x90, 0xDD, 0xBD, 0xC2, 0xBD, 0xDC,  // ........
            /* 1770 */  0xFA, 0xD0, 0xE0, 0xEB, 0x82, 0xC7, 0x68, 0xD5,  // ......h.
            /* 1778 */  0x70, 0xD0, 0xAE, 0x06, 0x41, 0xFE, 0xFF, 0x0F,  // p...A...
            /* 1780 */  0x02, 0x3E, 0x72, 0x79, 0x5A, 0x46, 0x84, 0x71,  // .>ryZF.q
            /* 1788 */  0xF8, 0x65, 0x67, 0xC3, 0x38, 0xBE, 0xE9, 0xFA,  // .eg.8...
            /* 1790 */  0x54, 0xC0, 0x0E, 0x5B, 0xBE, 0x19, 0x18, 0xF8,  // T..[....
            /* 1798 */  0x41, 0xE1, 0x65, 0xDB, 0xC7, 0x07, 0x36, 0xB4,  // A.e...6.
            /* 17A0 */  0xB7, 0x05, 0x4F, 0x20, 0xD6, 0x9B, 0x03, 0x8C,  // ..O ....
            /* 17A8 */  0x93, 0x03, 0xF8, 0xB4, 0x3F, 0x14, 0x74, 0x10,  // ....?.t.
            /* 17B0 */  0xC7, 0x9F, 0x1C, 0x60, 0x1C, 0x16, 0x0C, 0x11,  // ...`....
            /* 17B8 */  0xFE, 0x1D, 0x80, 0x29, 0x84, 0xD6, 0xC1, 0x01,  // ...)....
            /* 17C0 */  0x3C, 0x1E, 0x0E, 0x0E, 0xA0, 0xB8, 0xF4, 0x90,  // <.......
            /* 17C8 */  0x83, 0x03, 0xF4, 0x10, 0x17, 0x04, 0x6A, 0xE5,  // ......j.
            /* 17D0 */  0xC6, 0x48, 0x8F, 0xD7, 0xE0, 0x39, 0x40, 0x70,  // .H...9@p
            /* 17D8 */  0x58, 0x43, 0xC4, 0x35, 0x46, 0x60, 0x63, 0x44,  // XC.5F`cD
            /* 17E0 */  0xF6, 0x31, 0x82, 0x61, 0xC4, 0x36, 0x46, 0x70,  // .1.a.6Fp
            /* 17E8 */  0x63, 0x44, 0xF7, 0x31, 0x82, 0xA1, 0x17, 0x8F,  // cD.1....
            /* 17F0 */  0x23, 0x8C, 0x08, 0xBE, 0x4A, 0x70, 0x2D, 0xA7,  // #...Jp-.
            /* 17F8 */  0x10, 0x5D, 0x25, 0xE0, 0x66, 0x5F, 0x99, 0x86,  // .]%.f_..
            /* 1800 */  0xC6, 0x53, 0x93, 0xE8, 0x2A, 0x81, 0xF9, 0xFF,  // .S..*...
            /* 1808 */  0x5F, 0x25, 0xF8, 0x45, 0xDA, 0x27, 0x59, 0x76,  // _%.E.'Yv
            /* 1810 */  0x9B, 0x80, 0x75, 0x73, 0xF1, 0x8D, 0xC8, 0xC7,  // ..us....
            /* 1818 */  0x17, 0xDC, 0x11, 0x86, 0x9D, 0xF4, 0x7D, 0xD6,  // ......}.
            /* 1820 */  0xC4, 0x9C, 0x20, 0x60, 0x9C, 0x1C, 0x70, 0x87,  // .. `..p.
            /* 1828 */  0x08, 0x70, 0x1D, 0x14, 0x18, 0xCA, 0x03, 0x0D,  // .p......
            /* 1830 */  0x47, 0x62, 0x70, 0xAF, 0x03, 0x11, 0x22, 0xC1,  // Gbp...".
            /* 1838 */  0x98, 0x14, 0xBB, 0x05, 0xFA, 0x78, 0xC3, 0xCE,  // .....x..
            /* 1840 */  0x13, 0x1E, 0x96, 0x6F, 0x18, 0xFC, 0xD2, 0xE3,  // ...o....
            /* 1848 */  0x2B, 0x38, 0x3B, 0x19, 0xF2, 0x8B, 0xE3, 0x43,  // +8;....C
            /* 1850 */  0x84, 0x51, 0xA2, 0xB1, 0x93, 0x43, 0x84, 0x93,  // .Q...C..
            /* 1858 */  0x7B, 0x0A, 0xF1, 0x99, 0xC3, 0x67, 0x38, 0xCC,  // {....g8.
            /* 1860 */  0x0D, 0xF2, 0xB8, 0x0E, 0xCA, 0xD7, 0x4B, 0x36,  // ......K6
            /* 1868 */  0x6C, 0xE3, 0x18, 0xF6, 0x39, 0xC8, 0x33, 0xF0,  // l...9.3.
            /* 1870 */  0x58, 0x62, 0x1F, 0x90, 0x21, 0xD9, 0xB0, 0xD8,  // Xb..!...
            /* 1878 */  0x10, 0x8D, 0xE7, 0xF3, 0x0D, 0xC3, 0x89, 0xE5,  // ........
            /* 1880 */  0x71, 0x62, 0x27, 0xC3, 0xB0, 0xCF, 0xD6, 0xD3,  // qb'.....
            /* 1888 */  0xE0, 0x07, 0x0D, 0xDF, 0x09, 0xDE, 0xD6, 0x31,  // .......1
            /* 1890 */  0xC7, 0x01, 0xDF, 0x42, 0x60, 0xDF, 0x14, 0x1E,  // ...B`...
            /* 1898 */  0x8F, 0x8C, 0xF2, 0x9E, 0xC2, 0x6E, 0x23, 0x60,  // .....n#`
            /* 18A0 */  0xFD, 0xFF, 0xDF, 0x46, 0x70, 0x47, 0xCF, 0xE7,  // ...FpG..
            /* 18A8 */  0x76, 0xF0, 0x40, 0xBC, 0xB3, 0x19, 0xFD, 0x79,  // v.@....y
            /* 18B0 */  0xEA, 0x9C, 0xD9, 0x1C, 0x8E, 0xC6, 0x63, 0xF0,  // ......c.
            /* 18B8 */  0x61, 0xC2, 0xE7, 0x57, 0xC0, 0xCD, 0xB0, 0xB8,  // a..W....
            /* 18C0 */  0xEC, 0xE7, 0xA2, 0x81, 0x7C, 0xE7, 0x90, 0x50,  // ....|..P
            /* 18C8 */  0x18, 0xD4, 0xE1, 0xCE, 0x47, 0x74, 0xC0, 0xC9,  // ....Gt..
            /* 18D0 */  0x79, 0x1C, 0xF6, 0x94, 0xDF, 0x60, 0x8C, 0xF0,  // y....`..
            /* 18D8 */  0xEC, 0x12, 0x38, 0xC6, 0x49, 0xBC, 0x88, 0xBC,  // ..8.I...
            /* 18E0 */  0xB8, 0x18, 0x3D, 0xD6, 0xF3, 0x38, 0xBB, 0x28,  // ..=..8.(
            /* 18E8 */  0x1C, 0x43, 0x28, 0x9F, 0x31, 0x42, 0xC4, 0x8A,  // .C(.1B..
            /* 18F0 */  0x62, 0xD4, 0x20, 0x8F, 0x0B, 0xFE, 0xFF, 0x83,  // b. .....
            /* 18F8 */  0x3C, 0xCB, 0x44, 0x38, 0x94, 0xB8, 0xC6, 0x7B,  // <.D8...{
            /* 1900 */  0x1E, 0x67, 0x22, 0x87, 0x4C, 0x0F, 0x7B, 0xE4,  // .g".L.{.
            /* 1908 */  0x1C, 0x0D, 0xB2, 0x63, 0x03, 0x60, 0xEE, 0x74,  // ...c.`.t
            /* 1910 */  0x80, 0x3B, 0x45, 0x83, 0x69, 0xB0, 0xB0, 0x07,  // .;E.i...
            /* 1918 */  0xC1, 0x15, 0xDA, 0xF4, 0xA9, 0xD1, 0xA8, 0x55,  // .......U
            /* 1920 */  0x83, 0x32, 0x35, 0xCA, 0x34, 0xA8, 0xD5, 0xA7,  // .25.4...
            /* 1928 */  0x52, 0x63, 0xC6, 0xA4, 0x1C, 0x04, 0x74, 0x80,  // Rc....t.
            /* 1930 */  0xF2, 0x6F, 0xC2, 0x31, 0x40, 0xE8, 0x5D, 0xCA,  // .o.1@.].
            /* 1938 */  0xA3, 0xF3, 0x89, 0xC2, 0x40, 0x16, 0x05, 0x22,  // ....@.."
            /* 1940 */  0x20, 0x07, 0x00, 0xA2, 0xA1, 0x40, 0x68, 0x48,  //  ....@hH
            /* 1948 */  0x30, 0x2A, 0x8B, 0x46, 0x40, 0x0E, 0x00, 0x42,  // 0*.F@..B
            /* 1950 */  0x43, 0x81, 0xD0, 0x90, 0x14, 0x3A, 0x97, 0x12,  // C....:..
            /* 1958 */  0x0A, 0x01, 0x59, 0x28, 0x08, 0x15, 0x0E, 0x42,  // ..Y(...B
            /* 1960 */  0xC3, 0x81, 0x50, 0xD5, 0x0F, 0x05, 0x81, 0xFA,  // ..P.....
            /* 1968 */  0xFF, 0x9F, 0x12, 0x44, 0x40, 0x4E, 0x0E, 0x42,  // ...D@N.B
            /* 1970 */  0x75, 0x7F, 0xC0, 0x04, 0x62, 0xB9, 0x1F, 0x40,  // u...b..@
            /* 1978 */  0x01, 0x3A, 0x1C, 0x88, 0x80, 0x1C, 0x18, 0x84,  // .:......
            /* 1980 */  0x7E, 0xBF, 0x0C, 0x62, 0xAD, 0x20, 0x74, 0xA5,  // ~..b. t.
            /* 1988 */  0x06, 0xB5, 0x14, 0x2D, 0x40, 0x4C, 0x1E, 0x08,  // ...-@L..
            /* 1990 */  0x95, 0x0B, 0x22, 0x30, 0x47, 0x03, 0xA2, 0x71,  // .."0G..q
            /* 1998 */  0x41, 0x68, 0x7C, 0x30, 0x2A, 0xD5, 0x0B, 0x10,  // Ah|0*...
            /* 19A0 */  0x93, 0x0F, 0x42, 0xE3, 0x80, 0xE8, 0x74, 0x40,  // ..B...t@
            /* 19A8 */  0x9E, 0x0D, 0x1A, 0x30, 0x01, 0xA1, 0x22, 0x41,  // ...0.."A
            /* 19B0 */  0x04, 0xE6, 0x58, 0x40, 0x34, 0x2A, 0x08, 0x8D,  // ..X@4*..
            /* 19B8 */  0x0E, 0x46, 0xA5, 0x9B, 0x19, 0x00, 0x05, 0xA1,  // .F......
            /* 19C0 */  0xF1, 0x40, 0x74, 0xFE, 0x26, 0x6A, 0x80, 0x98,  // .@t.&j..
            /* 19C8 */  0x44, 0x10, 0x2A, 0x19, 0x44, 0x60, 0x8E, 0x0A,  // D.*.D`..
            /* 19D0 */  0x44, 0xE3, 0x83, 0x50, 0x39, 0x6E, 0xC0, 0x58,  // D..P9n.X
            /* 19D8 */  0x04, 0x10, 0x1D, 0x09, 0x08, 0x08, 0x8D, 0x09,  // ........
            /* 19E0 */  0x42, 0xA5, 0xBC, 0x19, 0x04, 0x68, 0xF9, 0x20,  // B....h. 
            /* 19E8 */  0x02, 0x72, 0x24, 0x10, 0x1A, 0x11, 0x8C, 0x8A,  // .r$.....
            /* 19F0 */  0xD5, 0x73, 0x24, 0xA0, 0x20, 0x34, 0x10, 0x88,  // .s$. 4..
            /* 19F8 */  0x86, 0x48, 0xFC, 0x0C, 0x91, 0x82, 0x50, 0x91,  // .H....P.
            /* 1A00 */  0x20, 0x02, 0xB3, 0x44, 0x45, 0x20, 0x2C, 0x20,  //  ..DE , 
            /* 1A08 */  0x08, 0x0D, 0xF5, 0x88, 0x11, 0xA0, 0x83, 0x82,  // ........
            /* 1A10 */  0xD0, 0xE0, 0x20, 0x1A, 0x38, 0xB1, 0x34, 0x70,  // .. .8.4p
            /* 1A18 */  0x0A, 0x42, 0xE3, 0x80, 0x08, 0xCC, 0xF1, 0x81,  // .B......
            /* 1A20 */  0xA8, 0x24, 0x4D, 0x03, 0xA5, 0x20, 0x1A, 0x06,  // .$M.. ..
            /* 1A28 */  0x31, 0x35, 0x0C, 0x0A, 0x42, 0x63, 0xB8, 0x02,  // 15..Bc..
            /* 1A30 */  0x64, 0xD1, 0x40, 0x68, 0x54, 0x10, 0x1D, 0x1F,  // d.@hT...
            /* 1A38 */  0xC8, 0xC3, 0x56, 0x40, 0x96, 0x0A, 0x42, 0xFF,  // ..V@..B.
            /* 1A40 */  0xFF, 0xD2, 0x41, 0x04, 0xE6, 0xC0, 0x40, 0x54,  // ..A...@T
            /* 1A48 */  0xC4, 0xBB, 0xE5, 0xF0, 0x18, 0x08, 0x15, 0x0B,  // ........
            /* 1A50 */  0x22, 0x40, 0x0B, 0x7E, 0x43, 0x09, 0xC4, 0x71,  // "@.~C..q
            /* 1A58 */  0x41, 0x68, 0xA8, 0xCF, 0x93, 0x86, 0x47, 0x40,  // Ah....G@
            /* 1A60 */  0x68, 0x70, 0x10, 0x81, 0x59, 0xE8, 0x0F, 0x4F,  // hp..Y..O
            /* 1A68 */  0x40, 0x16, 0x0F, 0x42, 0xC3, 0x80, 0xD0, 0x90,  // @..B....
            /* 1A70 */  0x20, 0xF4, 0x5D, 0xE2, 0xA3, 0x06, 0xF9, 0xE5,  //  .].....
            /* 1A78 */  0xE9, 0x38, 0x40, 0x40, 0xA8, 0xD8, 0x5F, 0x9F,  // .8@@.._.
            /* 1A80 */  0x8E, 0x00, 0x04, 0x84, 0x06, 0x02, 0xD1, 0x11,  // ........
            /* 1A88 */  0x80, 0xA8, 0x1B, 0x14, 0x05, 0xA1, 0x22, 0x41,  // ......"A
            /* 1A90 */  0x04, 0xE6, 0x40, 0x40, 0x34, 0x24, 0x08, 0x0D,  // ..@@4$..
            /* 1A98 */  0x0D, 0x46, 0xC5, 0xBA, 0x1B, 0x02, 0x05, 0xA1,  // .F......
            /* 1AA0 */  0x81, 0x40, 0x68, 0x50, 0x10, 0x1D, 0x3B, 0x88,  // .@hP..;.
            /* 1AA8 */  0xBC, 0x63, 0x07, 0x05, 0xA1, 0xC2, 0x41, 0x04,  // .c....A.
            /* 1AB0 */  0x66, 0xE1, 0xFE, 0x40, 0x58, 0x6C, 0x10, 0xAA,  // f..@Xl..
            /* 1AB8 */  0xE9, 0xAF, 0x12, 0x90, 0xE8, 0x03, 0xA1, 0x9A,  // ........
            /* 1AC0 */  0x41, 0x64, 0x64, 0x18, 0x06, 0x11, 0xA0, 0xB3,  // Add.....
            /* 1AC8 */  0x82, 0xD1, 0xDC, 0x20, 0x54, 0xCB, 0x97, 0x48,  // ... T..H
            /* 1AD0 */  0x80, 0x16, 0x06, 0xA2, 0x03, 0x01, 0x01, 0xD1,  // ........
            /* 1AD8 */  0xE1, 0x81, 0x80, 0xD0, 0x98, 0x80, 0x34, 0x33,  // ......43
            /* 1AE0 */  0x20, 0x4D, 0xF4, 0xD2, 0x11, 0x98, 0xF3, 0x81,  //  M......
            /* 1AE8 */  0x50, 0x1D, 0x9F, 0x9A, 0x20, 0x24, 0x36, 0x88,  // P... $6.
            /* 1AF0 */  0x40, 0x2D, 0xE2, 0x5D, 0x13, 0x94, 0x84, 0x00,  // @-.]....
            /* 1AF8 */  0xD1, 0x11, 0x81, 0x80, 0xD0, 0xC0, 0x20, 0xF4,  // ...... .
            /* 1B00 */  0x6D, 0x66, 0x10, 0x27, 0x03, 0xA1, 0x29, 0x41,  // mf.'..)A
            /* 1B08 */  0x68, 0x72, 0x10, 0x0D, 0xC0, 0x32, 0x1E, 0x57,  // hr...2.W
            /* 1B10 */  0x1A, 0x80, 0xD5, 0x83, 0x08, 0xCC, 0x49, 0x40,  // ......I@
            /* 1B18 */  0x68, 0x3A, 0x10, 0x01, 0x3A, 0x2A, 0x20, 0xFD,  // h:..:* .
            /* 1B20 */  0xFF, 0x07, 0x51, 0x79, 0xDC, 0xA0, 0x20, 0x34,  // ..Qy.. 4
            /* 1B28 */  0x3E, 0x08, 0x4D, 0xFB, 0x62, 0x14, 0xA8, 0xB3,  // >.M.b...
            /* 1B30 */  0x83, 0x08, 0xD4, 0xDA, 0xDF, 0x3B, 0xC1, 0x48,  // .....;.H
            /* 1B38 */  0x22, 0x10, 0x9A, 0x13, 0x84, 0xE6, 0x06, 0xA1,  // ".......
            /* 1B40 */  0x41, 0x1E, 0x48, 0x8F, 0x34, 0x0C, 0x84, 0x06,  // A.H.4...
            /* 1B48 */  0x05, 0xD1, 0x00, 0x9C, 0x1A, 0x44, 0x03, 0x70,  // .....D.p
            /* 1B50 */  0xA6, 0x97, 0x52, 0x30, 0x92, 0x10, 0x84, 0xE6,  // ..R0....
            /* 1B58 */  0x07, 0xA1, 0x8A, 0x5F, 0x47, 0x41, 0x89, 0x7E,  // ..._GA.~
            /* 1B60 */  0x10, 0x81, 0x3A, 0x3F, 0x88, 0xC0, 0xAC, 0xEA,  // ..:?....
            /* 1B68 */  0x3D, 0xA5, 0xA3, 0x0C, 0x01, 0xA1, 0xDA, 0x41,  // =......A
            /* 1B70 */  0xA8, 0xAE, 0x27, 0x51, 0x50, 0x92, 0x0A, 0x84,  // ..'QP...
            /* 1B78 */  0x26, 0xFD, 0x17, 0x05, 0x21, 0x3A, 0xDF, 0x7C,  // &...!:.|
            /* 1B80 */  0x87, 0xC2, 0x40, 0x34, 0x30, 0x02, 0x42, 0x73,  // ..@40.Bs
            /* 1B88 */  0x83, 0x51, 0x69, 0x6A, 0x8F, 0x35, 0x14, 0x44,  // .Qij.5.D
            /* 1B90 */  0x83, 0xB1, 0x76, 0x10, 0x81, 0x39, 0x31, 0x18,  // ..v..91.
            /* 1B98 */  0x55, 0xE1, 0x16, 0x8C, 0x49, 0x02, 0x11, 0x98,  // U...I...
            /* 1BA0 */  0xB3, 0x80, 0xE8, 0x60, 0x40, 0xC0, 0x68, 0x58,  // ...`@.hX
            /* 1BA8 */  0x30, 0x2A, 0xF4, 0x43, 0xF5, 0xA0, 0xC1, 0x40,  // 0*.C...@
            /* 1BB0 */  0x04, 0xE6, 0x24, 0x20, 0x3A, 0xF0, 0x10, 0xBB,  // ..$ :...
            /* 1BB8 */  0x07, 0x1E, 0x0A, 0x22, 0x30, 0x6B, 0x05, 0x11,  // ..."0k..
            /* 1BC0 */  0x98, 0x83, 0x82, 0xD1, 0xF0, 0x60, 0x54, 0x89,  // .....`T.
            /* 1BC8 */  0x5E, 0x30, 0x96, 0x1A, 0x44, 0x60, 0x56, 0xFB,  // ^0..D`V.
            /* 1BD0 */  0x82, 0x7A, 0xF4, 0x60, 0x3F, 0xA8, 0x80, 0x24,  // .z.`?..$
            /* 1BD8 */  0x1A, 0x88, 0x06, 0x47, 0xFE, 0xD5, 0x02, 0xB3,  // ...G....
            /* 1BE0 */  0x60, 0x10, 0x1A, 0x03, 0x84, 0xC6, 0x02, 0xA1,  // `.......
            /* 1BE8 */  0x92, 0x1F, 0x8A, 0x3A, 0x9E, 0x10, 0x10, 0x1A,  // ...:....
            /* 1BF0 */  0xF7, 0x43, 0x15, 0x8C, 0x48, 0xF8, 0x75, 0xEA,  // .C..H.u.
            /* 1BF8 */  0xE0, 0x42, 0x40, 0x74, 0x80, 0x20, 0x40, 0x34,  // .B@t. @4
            /* 1C00 */  0x18, 0x08, 0x0D, 0x0A, 0xC8, 0xDF, 0x64, 0x02,  // ......d.
            /* 1C08 */  0xF4, 0xFF, 0x3F, 0x04, 0x88, 0x00, 0x09, 0x08,  // ..?.....
            /* 1C10 */  0x0D, 0x0A, 0x42, 0x15, 0x3D, 0xEB, 0x1E, 0x0E,  // ..B.=...
            /* 1C18 */  0x18, 0x88, 0x40, 0xAD, 0xEB, 0x05, 0xFD, 0x50,  // ..@....P
            /* 1C20 */  0xC0, 0x40, 0xA8, 0x76, 0x10, 0x81, 0x39, 0x33,  // .@.v..93
            /* 1C28 */  0x10, 0xD5, 0xF1, 0x87, 0x7D, 0x30, 0x60, 0x20,  // ....}0` 
            /* 1C30 */  0x34, 0x04, 0x08, 0xD5, 0xF8, 0xBC, 0x13, 0xA8,  // 4.......
            /* 1C38 */  0xF3, 0x80, 0x08, 0xC8, 0x19, 0x41, 0x68, 0x66,  // .....Ahf
            /* 1C40 */  0x30, 0xAA, 0xF4, 0xF5, 0x15, 0x88, 0xA8, 0x07,  // 0.......
            /* 1C48 */  0xA1, 0x69, 0x40, 0x68, 0x4A, 0x10, 0x01, 0x5A,  // .i@hJ..Z
            /* 1C50 */  0xD9, 0x8B, 0x54, 0x43, 0x27, 0x20, 0x54, 0x3D,  // ..TC' T=
            /* 1C58 */  0x88, 0xC0, 0x9C, 0xFE, 0x07, 0xA8, 0x63, 0x05,  // ......c.
            /* 1C60 */  0x79, 0x8A, 0x09, 0xC4, 0xCA, 0xFF, 0x6C, 0x07,  // y.....l.
            /* 1C68 */  0xC0, 0x40, 0x68, 0x3A, 0x10, 0x9A, 0x1F, 0x84,  // .@h:....
            /* 1C70 */  0x6A, 0x7D, 0x96, 0x05, 0x25, 0xF9, 0x40, 0x34,  // j}..%.@4
            /* 1C78 */  0x20, 0x02, 0x42, 0x35, 0x7C, 0x46, 0x0F, 0x80,  //  .B5|F..
            /* 1C80 */  0x81, 0x68, 0x00, 0x04, 0x84, 0xA6, 0x03, 0xA3,  // .h......
            /* 1C88 */  0x6A, 0xDE, 0xC2, 0x81, 0x88, 0x42, 0x10, 0xAA,  // j....B..
            /* 1C90 */  0x18, 0x84, 0xE6, 0x03, 0xA1, 0x01, 0xDF, 0xF5,  // ........
            /* 1C98 */  0x3A, 0x30, 0x90, 0xEF, 0x9F, 0x0E, 0x21, 0x04,  // :0....!.
            /* 1CA0 */  0x84, 0xC6, 0xF1, 0x7F, 0x18, 0xA3, 0x20, 0x34,  // ...... 4
            /* 1CA8 */  0x2C, 0x88, 0xC0, 0x2C, 0x2C, 0xC0, 0x31, 0x88,  // ,..,,.1.
            /* 1CB0 */  0x82, 0x50, 0xF1, 0x20, 0x3A, 0x20, 0x10, 0x20,  // .P. : . 
            /* 1CB8 */  0x2A, 0xA1, 0xC0, 0xC1, 0x80, 0x82, 0x68, 0x10,  // *.....h.
            /* 1CC0 */  0x04, 0x88, 0x86, 0x03, 0xA1, 0x61, 0xC1, 0xA8,  // .....a..
            /* 1CC8 */  0xBC, 0x04, 0x47, 0x06, 0x0A, 0x42, 0x23, 0x80,  // ..G..B#.
            /* 1CD0 */  0x08, 0xCC, 0x91, 0x81, 0xA8, 0x8C, 0x06, 0xC3,  // ........
            /* 1CD8 */  0xA3, 0x11, 0xC0, 0x58, 0x32, 0x10, 0x1D, 0x53,  // ...X2..S
            /* 1CE0 */  0x08, 0x08, 0xD5, 0x9C, 0x01, 0x8C, 0xFD, 0xFF,  // ........
            /* 1CE8 */  0x93, 0x82, 0x08, 0xC8, 0xE9, 0x41, 0x68, 0xDC,  // .....Ah.
            /* 1CF0 */  0x12, 0x60, 0xEC, 0xFF, 0x0F                     // .`...
        })
        Name (WDST, Buffer (0x2C)
        {
            /* 0000 */  0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,  // ........
            /* 0008 */  0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0028 */  0x00, 0x00, 0x00, 0x00                           // ....
        })
        Name (WDIN, Buffer (0x30)
        {
            /* 0000 */  0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,  // ........
            /* 0008 */  0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
        })
        Name (WDEN, Buffer (0x2C)
        {
            /* 0000 */  0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,  // ........
            /* 0008 */  0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,  // ........
            /* 0028 */  0x00, 0x00, 0x00, 0x00                           // ....
        })
        Name (WDLI, Buffer (0x28)
        {
            /* 0000 */  0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,  // ........
            /* 0008 */  0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
        })
        Name (WDPA, Buffer (0x34)
        {
            /* 0000 */  0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,  // ........
            /* 0008 */  0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0030 */  0x00, 0x00, 0x00, 0x00                           // ....
        })
        Name (WDBU, Buffer (0x38)
        {
            /* 0000 */  0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,  // ........
            /* 0008 */  0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0030 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
        })
        Method (QPUW, 3, Serialized)
        {
            Local7 = 0x04
            If ((Arg1 < Arg2))
            {
                PWOT = Arg0
                PWOI = Arg1
                PUWS = 0x04
                GSWS (0x01F3)
                Local7 = PUWS /* \PUWS */
                If ((Local7 == Zero))
                {
                    Local1 = PWOI /* \PWOI */
                    If ((Local1 < 0x96))
                    {
                        Local0 = PWBS /* \PWBS */
                    }
                    ElseIf ((Local1 < 0x0190))
                    {
                        Local0 = PWBM /* \PWBM */
                    }
                    ElseIf ((Local1 < 0x03E8))
                    {
                        Local0 = PWBL /* \PWBL */
                    }
                    Else
                    {
                        Local0 = PUWB /* \PUWB */
                    }
                }
            }

            If ((Local7 != Zero))
            {
                Switch (ToInteger (Arg0))
                {
                    Case (Zero)
                    {
                        Local0 = WDST /* \_SB_.WMIB.WDST */
                    }
                    Case (One)
                    {
                        Local0 = WDIN /* \_SB_.WMIB.WDIN */
                    }
                    Case (0x02)
                    {
                        Local0 = WDEN /* \_SB_.WMIB.WDEN */
                    }
                    Case (0x03)
                    {
                        Local0 = WDLI /* \_SB_.WMIB.WDLI */
                    }
                    Case (0x04)
                    {
                        Local0 = WDPA /* \_SB_.WMIB.WDPA */
                    }
                    Case (0x05)
                    {
                        Local0 = WDBU /* \_SB_.WMIB.WDBU */
                    }
                    Default
                    {
                        Local0 = WDEN /* \_SB_.WMIB.WDEN */
                    }

                }
            }

            Return (Local0)
        }

        Method (WQST, 1, Serialized)
        {
            Return (QPUW (Zero, Arg0, STIC))
        }

        Method (WQIN, 1, Serialized)
        {
            Return (QPUW (One, Arg0, INIC))
        }

        Method (WQEN, 1, Serialized)
        {
            Return (QPUW (0x02, Arg0, ENIC))
        }

        Method (WQOL, 1, Serialized)
        {
            Return (QPUW (0x03, Arg0, OLIC))
        }

        Method (WQPW, 1, Serialized)
        {
            Return (QPUW (0x04, Arg0, PWIC))
        }

        Method (WQBU, 1, Serialized)
        {
            Return (QPUW (0x05, Arg0, BUIC))
        }

        Name (TBFS, Buffer (0x96){})
        Name (TBFM, Buffer (0x0190){})
        Name (TBFL, Buffer (0x03E8){})
        Name (TBUF, Buffer (0x9000){})
        Method (SHBE, 4, Serialized)
        {
            Local6 = SizeOf (Arg2)
            Local0 = DerefOf (Arg3)
            If (((Local0 + 0x04) < Local6))
            {
                Arg2 [Local0] = Arg0
                Local0++
                Arg2 [Local0] = 0x82
                Local0++
                CreateWordField (Arg2, Local0, SSIZ)
                SSIZ = Arg1
                Local0 += 0x02
                If (((Local0 + Arg1) < Local6))
                {
                    Local7 = Zero
                }

                Arg3 = Local0
            }
            Else
            {
                Local7 = 0x04
            }

            Return (Local7)
        }

        Method (WSTB, 4, Serialized)
        {
            Local0 = Zero
            Local1 = SizeOf (Arg0)
            Local2 = Zero
            Local7 = SHBE (0x30, One, Arg1, RefOf (Local2))
            Local3 = Zero
            While (((Local7 == Zero) && (Local0 < Local1)))
            {
                Local5 = DerefOf (Arg0 [Local0])
                Local0++
                Local5 += (DerefOf (Arg0 [Local0]) << 0x08)
                Local0++
                Local6 = (Local5 + 0x02)
                Local7 = SHBE (0x1E, Local6, Arg1, RefOf (Local2))
                If ((Local7 == Zero))
                {
                    If ((CPBF (Arg1, RefOf (Local2), Arg0, RefOf (Local0), Local5) == One))
                    {
                        Arg1 [Local2] = Zero
                        Local2++
                        Arg1 [Local2] = Zero
                        Local2++
                        Local3++
                    }
                    Else
                    {
                        Local7 = 0x04
                    }
                }
            }

            If ((Local7 == Zero))
            {
                If (((Local3 >= Arg2) && (Local3 <= Arg3)))
                {
                    CreateWordField (Arg1, 0x02, BSIZ)
                    BSIZ = (Local2 - 0x04)
                }
                Else
                {
                    Local7 = 0x05
                }
            }

            Return (Local7)
        }

        Name (BNSD, Package (0x01)
        {
            ""
        })
        Method (BSNS, 1, Serialized)
        {
            Local0 = Zero
            CreateWordField (Arg0, Local0, SSIZ)
            Local0 += 0x02
            Local2 = ((0x02 + SSIZ) + 0x02)
            Local1 = Buffer (Local2){}
            Local3 = 0x02
            If ((CPBF (Local1, RefOf (Local3), Arg0, RefOf (Local0), SSIZ) == One))
            {
                CreateWordField (Local1, Local3, UNUL)
                UNUL = Zero
                CreateWordField (Local1, Zero, USIZ)
                USIZ = (SSIZ + 0x02)
            }

            BNSD [Zero] = Local1
        }

        Method (BGNS, 0, Serialized)
        {
            Return (DerefOf (BNSD [Zero]))
        }

        Method (WSBS, 1, Serialized)
        {
            Acquire (PUMX, 0xFFFF)
            Local7 = 0x04
            Local6 = (SizeOf (Arg0) + 0x10)
            If ((Local6 < SizeOf (TBFS)))
            {
                Local7 = WSTB (Arg0, TBFS, 0x02, 0x03)
                If ((Local7 == Zero))
                {
                    PWBS = TBFS /* \_SB_.WMIB.TBFS */
                }
            }
            ElseIf ((Local6 < SizeOf (TBFL)))
            {
                Local7 = WSTB (Arg0, TBFL, 0x02, 0x03)
                If ((Local7 == Zero))
                {
                    PWBL = TBFL /* \_SB_.WMIB.TBFL */
                }
            }
            ElseIf ((Local6 <= SizeOf (TBUF)))
            {
                Local7 = WSTB (Arg0, TBUF, 0x02, 0x03)
                If ((Local7 == Zero))
                {
                    PUWB = TBUF /* \_SB_.WMIB.TBUF */
                }
            }

            If ((Local7 == Zero))
            {
                BSNS (Arg0)
                PUWS = 0x04
                GSWS (0x02F3)
                Local7 = PUWS /* \PUWS */
                If ((Local6 < SizeOf (TBFS)))
                {
                    TBFS = PWBS /* \PWBS */
                }
                ElseIf ((Local6 < SizeOf (TBFL)))
                {
                    TBFL = PWBL /* \PWBL */
                }
                Else
                {
                    TBUF = PUWB /* \PUWB */
                }

                If ((Local7 == Zero))
                {
                    GBME (Zero)
                }
                ElseIf ((Local7 == 0x06))
                {
                    GBME (One)
                }
            }

            Release (PUMX)
            Return (Local7)
        }

        Method (WSSD, 1, Serialized)
        {
            Acquire (PUMX, 0xFFFF)
            Local7 = WSTB (Arg0, TBUF, 0x02, 0x02)
            PUWB = TBUF /* \_SB_.WMIB.TBUF */
            If ((Local7 == Zero))
            {
                PUWS = 0x04
                GSWS (0x03F3)
                Local7 = PUWS /* \PUWS */
                TBUF = PUWB /* \PUWB */
                If ((Local7 == Zero))
                {
                    GBME (Zero)
                }
                ElseIf ((Local7 == 0x06))
                {
                    GBME (One)
                }
            }

            Release (PUMX)
            Return (Local7)
        }

        Method (WFTE, 1, Serialized)
        {
            Local7 = 0x04
            Return (Local7)
        }

        Method (WMBS, 3, Serialized)
        {
            Local7 = One
            If ((Arg1 == One))
            {
                Local7 = WSBS (Arg2)
            }
            ElseIf ((Arg1 == 0x02))
            {
                Local7 = WSSD (Arg2)
            }
            ElseIf ((Arg1 == 0x03))
            {
                Local7 = WFTE (Arg2)
            }

            Return (Local7)
        }

        Method (WMUI, 3, Serialized)
        {
            Local7 = One
            If ((Arg1 == One))
            {
                Acquire (PUMX, 0xFFFF)
                Local7 = WSTB (Arg0, TBUF, 0x06, 0x06)
                PUWB = TBUF /* \_SB_.WMIB.TBUF */
                If ((Local7 == Zero))
                {
                    PUWS = 0x04
                    Local7 = PUWS /* \PUWS */
                }

                Release (PUMX)
            }

            Return (Local7)
        }

        Name (CBWE, Package (0x02)
        {
            Package (0x05)
            {
                Unicode ("4BIOS Configuration Change"), 
                "BIOS Settings", 
                0x04, 
                0x05, 
                0x02
            }, 

            Package (0x05)
            {
                "BIOS Configuration Security", 
                "An attempt has been made to Access BIOS features unsuccessfully", 
                0x04, 
                0x0A, 
                0x06
            }
        })
        Name (UKEV, Package (0x05)
        {
            "Unknown Event", 
            "Unknown event type", 
            Zero, 
            Zero, 
            Zero
        })
        Mutex (BEMX, 0x00)
        Name (BEID, 0xFF)
        Method (_WED, 1, Serialized)  // _Wxx: Wake Event, xx=0x00-0xFF
        {
            Acquire (BEMX, 0xFFFF)
            Local0 = BEID /* \_SB_.WMIB.BEID */
            BEID = 0xFF
            Release (BEMX)
            Switch (ToInteger (Local0))
            {
                Case (Zero)
                {
                    DerefOf (CBWE [Local0]) [One] = BGNS ()
                    Local1 = DerefOf (CBWE [Local0])
                }
                Case (One)
                {
                    Local1 = DerefOf (CBWE [Local0])
                }
                Default
                {
                    Local1 = UKEV /* \_SB_.WMIB.UKEV */
                }

            }

            Return (Local1)
        }

        Method (GBME, 1, Serialized)
        {
            Acquire (BEMX, 0xFFFF)
            BEID = Arg0
            Release (BEMX)
            Notify (WMIB, 0x80) // Status Change
        }

        Name (PEVT, Package (0x07)
        {
            "", 
            "", 
            "root\\wmi", 
            "HPBIOS_BIOSEvent", 
            Zero, 
            Zero, 
            Zero
        })
        Method (WQPE, 1, Serialized)
        {
            PEVT [Zero] = DerefOf (DerefOf (CBWE [Arg0]) [
                Zero])
            PEVT [One] = DerefOf (DerefOf (CBWE [Arg0]) [
                One])
            PEVT [0x04] = DerefOf (DerefOf (CBWE [Arg0]) [
                0x02])
            PEVT [0x05] = DerefOf (DerefOf (CBWE [Arg0]) [
                0x03])
            PEVT [0x06] = DerefOf (DerefOf (CBWE [Arg0]) [
                0x04])
            Return (PEVT) /* \_SB_.WMIB.PEVT */
        }

        OperationRegion (HWSS, SystemMemory, 0xB82D2000, 0x00000802)
        Field (HWSS, AnyAcc, Lock, Preserve)
        {
            WSSC,   16, 
            WSSB,   16384
        }

        Name (SENS, Package (0x08)
        {
            "BIOS Post Error", 
            " ", 
            One, 
            "BIOS Post Error", 
            One, 
            One, 
            "Post Error Occurred", 
            "Post Error Occurred"
        })
        Method (WQSS, 1, Serialized)
        {
            Local7 = Zero
            Local5 = Zero
            Local0 = WSSB /* \_SB_.WMIB.WSSB */
            While (((Local5 < 0x0800) && (Local7 < Arg0)))
            {
                Local1 = (DerefOf (Local0 [Local5]) + 0x02)
                Local5 += Local1
                Local7++
            }

            If (((Local5 < 0x0800) && (Local7 == Arg0)))
            {
                Local3 = DerefOf (Local0 [Local5])
                Local2 = Buffer (Local3){}
                Local5++
                Local6 = Zero
                While (((Local5 < 0x0800) && (Local6 < Local3)))
                {
                    Local2 [Local6] = DerefOf (Local0 [Local5])
                    Local6++
                    Local5++
                }

                SENS [One] = B2ST (Local2, Local3)
                SENS [0x04] = DerefOf (Local0 [Local5])
            }
            Else
            {
                SENS [One] = "Unknown Error"
                SENS [0x04] = Zero
            }

            Return (SENS) /* \_SB_.WMIB.SENS */
        }
    }

    OperationRegion (HPWV, SystemMemory, 0xB82D5000, 0x0000107C)
    Field (HPWV, AnyAcc, Lock, Preserve)
    {
        SNIN,   32, 
        COMD,   32, 
        CMTP,   32, 
        DASI,   32, 
        DASO,   32, 
        PVWB,   33536, 
        PVWS,   32, 
        RTCD,   32
    }

    Device (_SB.WMIV)
    {
        Name (_HID, EisaId ("PNP0C14") /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
        Name (_UID, 0x02)  // _UID: Unique ID
        Name (BORN, Buffer (0x08){})
        Method (FBCD, 3, Serialized)
        {
            Local2 = Package (0x01)
                {
                    0x04
                }
            CreateByteField (Arg2, Zero, FCIP)
            If ((Arg0 == Zero))
            {
                Switch (FCIP)
                {
                    Case (0x08)
                    {
                        Local6 = 0x11
                    }
                    Case (0x0A)
                    {
                        Local6 = 0x02
                    }
                    Default
                    {
                        Local6 = One
                    }

                }

                Local2 = FSEC (Arg2, Local6, FCIP)
            }

            If ((Arg0 == One))
            {
                Local2 = FGIF (FCIP)
            }

            If ((Arg0 == 0x02))
            {
                Local2 = FGAE (FCIP)
            }

            If ((Arg0 == 0x03))
            {
                Local2 = FGAU (FCIP)
            }

            If ((Arg0 == 0x04))
            {
                Local2 = FGFS ()
            }

            If ((Arg0 == 0x05))
            {
                Local2 = FBPS (Arg2)
            }

            If ((Arg0 == 0x06))
            {
                Local2 = FGLW ()
            }

            Return (Local2)
        }

        Method (FSEC, 3, Serialized)
        {
            If ((FGLC () != Zero))
            {
                Return (Package (0x01)
                {
                    0x40
                })
            }

            Switch (Arg2)
            {
                Case (Zero)
                {
                    ^^PCI0.LPCB.EC0.FBCM = Arg2
                    Return (Package (0x01)
                    {
                        Zero
                    })
                }
                Case (One)
                {
                    ^^PCI0.LPCB.EC0.FBCM = Arg2
                    Return (Package (0x01)
                    {
                        Zero
                    })
                }
                Case (0x02)
                {
                    ^^PCI0.LPCB.EC0.FBCM = Arg2
                    Return (Package (0x01)
                    {
                        Zero
                    })
                }
                Case (0x08)
                {
                    ^^PCI0.LPCB.EC0.FBCM = Arg2
                    Local2 = One
                    Local3 = One
                    While ((Local3 != Arg1))
                    {
                        ^^PCI0.LPCB.EC0.FBID = DerefOf (Arg0 [Local2])
                        Local2++
                        Local3++
                    }

                    Return (Package (0x01)
                    {
                        Zero
                    })
                }
                Case (0x0A)
                {
                    ^^PCI0.LPCB.EC0.FBCM = Arg2
                    Local2 = One
                    Local3 = One
                    While ((Local3 != Arg1))
                    {
                        ^^PCI0.LPCB.EC0.FBID = DerefOf (Arg0 [Local2])
                        Local2++
                        Local3++
                    }

                    Return (Package (0x01)
                    {
                        Zero
                    })
                }
                Default
                {
                    Return (Package (0x01)
                    {
                        0x06
                    })
                }

            }
        }

        Method (FGIF, 1, Serialized)
        {
            If ((FGLC () != Zero))
            {
                Return (Package (0x01)
                {
                    0x40
                })
            }

            Switch (Arg0)
            {
                Case (Zero)
                {
                    Local0 = Package (0x02)
                        {
                            Zero, 
                            Buffer (0x04){}
                        }
                    ^^PCI0.LPCB.EC0.FBGI = Zero
                    If ((FLCC () == Zero))
                    {
                        Return (Package (0x01)
                        {
                            0x41
                        })
                    }

                    Local1 = ^^PCI0.LPCB.EC0.FBGI /* \_SB_.PCI0.LPCB.EC0_.FBGI */
                    DerefOf (Local0 [One]) [Zero] = Local1
                    Return (Local0)
                }
                Case (One)
                {
                    Local0 = Package (0x02)
                        {
                            Zero, 
                            Buffer (0x80){}
                        }
                    ^^PCI0.LPCB.EC0.FBGI = One
                    If ((FLCC () == Zero))
                    {
                        Return (Package (0x01)
                        {
                            0x41
                        })
                    }

                    Local3 = Zero
                    Local2 = Zero
                    While ((Local3 != 0x20))
                    {
                        DerefOf (Local0 [One]) [Local2] = ^^PCI0.LPCB.EC0.FBGI /* \_SB_.PCI0.LPCB.EC0_.FBGI */
                        Local2++
                        Local3++
                    }

                    Return (Local0)
                }
                Case (0x02)
                {
                    Local0 = Package (0x02)
                        {
                            Zero, 
                            Buffer (0x80){}
                        }
                    ^^PCI0.LPCB.EC0.FBGI = 0x02
                    If ((FLCC () == Zero))
                    {
                        Return (Package (0x01)
                        {
                            0x41
                        })
                    }

                    Local3 = Zero
                    Local2 = Zero
                    While ((Local3 != 0x20))
                    {
                        DerefOf (Local0 [One]) [Local2] = ^^PCI0.LPCB.EC0.FBGI /* \_SB_.PCI0.LPCB.EC0_.FBGI */
                        Local2++
                        Local3++
                    }

                    Return (Local0)
                }
                Case (0x03)
                {
                    Local0 = Package (0x02)
                        {
                            Zero, 
                            Buffer (0x80){}
                        }
                    ^^PCI0.LPCB.EC0.FBGI = 0x03
                    If ((FLCC () == Zero))
                    {
                        Return (Package (0x01)
                        {
                            0x41
                        })
                    }

                    Local3 = Zero
                    Local2 = Zero
                    While ((Local3 != 0x20))
                    {
                        DerefOf (Local0 [One]) [Local2] = ^^PCI0.LPCB.EC0.FBGI /* \_SB_.PCI0.LPCB.EC0_.FBGI */
                        Local2++
                        Local3++
                    }

                    Return (Local0)
                }
                Case (0x04)
                {
                    Local0 = Package (0x02)
                        {
                            Zero, 
                            Buffer (0x80){}
                        }
                    ^^PCI0.LPCB.EC0.FBGI = 0x04
                    If ((FLCC () == Zero))
                    {
                        Return (Package (0x01)
                        {
                            0x41
                        })
                    }

                    Local3 = Zero
                    Local2 = Zero
                    While ((Local3 != 0x20))
                    {
                        DerefOf (Local0 [One]) [Local2] = ^^PCI0.LPCB.EC0.FBGI /* \_SB_.PCI0.LPCB.EC0_.FBGI */
                        Local2++
                        Local3++
                    }

                    Return (Local0)
                }
                Case (0x05)
                {
                    Local0 = Package (0x02)
                        {
                            Zero, 
                            Buffer (0x80){}
                        }
                    ^^PCI0.LPCB.EC0.FBGI = 0x05
                    If ((FLCC () == Zero))
                    {
                        Return (Package (0x01)
                        {
                            0x41
                        })
                    }

                    Local3 = Zero
                    Local2 = Zero
                    While ((Local3 != 0x20))
                    {
                        DerefOf (Local0 [One]) [Local2] = ^^PCI0.LPCB.EC0.FBGI /* \_SB_.PCI0.LPCB.EC0_.FBGI */
                        Local2++
                        Local3++
                    }

                    Return (Local0)
                }
                Case (0x08)
                {
                    Local0 = Package (0x02)
                        {
                            Zero, 
                            Buffer (0x1000){}
                        }
                    ^^PCI0.LPCB.EC0.FBGI = 0x08
                    If ((FLCC () == Zero))
                    {
                        Return (Package (0x01)
                        {
                            0x41
                        })
                    }

                    Local3 = Zero
                    Local2 = Zero
                    While ((Local3 != 0x1000))
                    {
                        DerefOf (Local0 [One]) [Local2] = ^^PCI0.LPCB.EC0.FBGI /* \_SB_.PCI0.LPCB.EC0_.FBGI */
                        Local2++
                        Local3++
                    }

                    Return (Local0)
                }
                Case (0x09)
                {
                    Local0 = Package (0x02)
                        {
                            Zero, 
                            Buffer (0x1000){}
                        }
                    ^^PCI0.LPCB.EC0.FBGI = 0x09
                    If ((FLCC () == Zero))
                    {
                        Return (Package (0x01)
                        {
                            0x41
                        })
                    }

                    Local3 = Zero
                    Local2 = Zero
                    While ((Local3 != 0x1000))
                    {
                        DerefOf (Local0 [One]) [Local2] = ^^PCI0.LPCB.EC0.FBGI /* \_SB_.PCI0.LPCB.EC0_.FBGI */
                        Local2++
                        Local3++
                    }

                    Return (Local0)
                }
                Case (0x0A)
                {
                    Local0 = Package (0x02)
                        {
                            Zero, 
                            Buffer (0x80){}
                        }
                    ^^PCI0.LPCB.EC0.FBGI = 0x0A
                    If ((FLCC () == Zero))
                    {
                        Return (Package (0x02)
                        {
                            0x41, 
                            Zero
                        })
                    }

                    Local3 = Zero
                    Local2 = Zero
                    While ((Local3 != 0x06))
                    {
                        DerefOf (Local0 [One]) [Local2] = ^^PCI0.LPCB.EC0.FBGI /* \_SB_.PCI0.LPCB.EC0_.FBGI */
                        Local2++
                        Local3++
                    }

                    Return (Local0)
                }
                Case (0x0B)
                {
                    Local0 = Package (0x02)
                        {
                            Zero, 
                            Buffer (0x04){}
                        }
                    ^^PCI0.LPCB.EC0.FBGI = 0x0B
                    Local3 = Zero
                    Local2 = Zero
                    While ((Local3 != One))
                    {
                        DerefOf (Local0 [One]) [Local2] = ^^PCI0.LPCB.EC0.FBGI /* \_SB_.PCI0.LPCB.EC0_.FBGI */
                        Local2++
                        Local3++
                    }

                    Return (Local0)
                }
                Case (0x0C)
                {
                    Local0 = Package (0x02)
                        {
                            Zero, 
                            Buffer (0x04){}
                        }
                    ^^PCI0.LPCB.EC0.FBGI = 0x0C
                    If ((FLCC () == Zero))
                    {
                        Return (Package (0x01)
                        {
                            0x41
                        })
                    }

                    Local3 = Zero
                    Local2 = Zero
                    While ((Local3 != One))
                    {
                        DerefOf (Local0 [One]) [Local2] = ^^PCI0.LPCB.EC0.FBGI /* \_SB_.PCI0.LPCB.EC0_.FBGI */
                        Local2++
                        Local3++
                    }

                    Return (Local0)
                }
                Case (0x0F)
                {
                    Local0 = Package (0x02)
                        {
                            Zero, 
                            Buffer (0x04){}
                        }
                    ^^PCI0.LPCB.EC0.FBGI = 0x0F
                    If ((FLCC () == Zero))
                    {
                        Return (Package (0x01)
                        {
                            0x41
                        })
                    }

                    Local3 = Zero
                    Local2 = Zero
                    While ((Local3 != 0x04))
                    {
                        DerefOf (Local0 [One]) [Local2] = ^^PCI0.LPCB.EC0.FBGI /* \_SB_.PCI0.LPCB.EC0_.FBGI */
                        Local2++
                        Local3++
                    }

                    Return (Local0)
                }
                Default
                {
                    Return (Package (0x01)
                    {
                        0x06
                    })
                }

            }
        }

        Method (FGAE, 1, Serialized)
        {
            If ((FGLC () != Zero))
            {
                Return (Package (0x01)
                {
                    0x40
                })
            }

            If ((Arg0 < 0x0100))
            {
                Local0 = Package (0x02)
                    {
                        Zero, 
                        Buffer (0x80){}
                    }
                ^^PCI0.LPCB.EC0.FBAE = Arg0
                If ((FLCC () == Zero))
                {
                    Return (Package (0x01)
                    {
                        0x41
                    })
                }

                Local3 = Zero
                Local2 = Zero
                While ((Local3 != 0x10))
                {
                    DerefOf (Local0 [One]) [Local2] = ^^PCI0.LPCB.EC0.FBAE /* \_SB_.PCI0.LPCB.EC0_.FBAE */
                    Local2++
                    Local3++
                }

                Return (Local0)
            }
            Else
            {
                Return (Package (0x01)
                {
                    0x06
                })
            }
        }

        Method (FGAU, 1, Serialized)
        {
            If ((FGLC () != Zero))
            {
                Return (Package (0x01)
                {
                    0x40
                })
            }

            If ((Arg0 < 0x0100))
            {
                Local0 = Package (0x02)
                    {
                        Zero, 
                        Buffer (0x80){}
                    }
                ^^PCI0.LPCB.EC0.FUAE = Arg0
                If ((FLCC () == Zero))
                {
                    Return (Package (0x01)
                    {
                        0x41
                    })
                }

                Local3 = Zero
                Local2 = Zero
                While ((Local3 != 0x10))
                {
                    DerefOf (Local0 [One]) [Local2] = ^^PCI0.LPCB.EC0.FUAE /* \_SB_.PCI0.LPCB.EC0_.FUAE */
                    Local2++
                    Local3++
                }

                Return (Local0)
            }
            Else
            {
                Return (Package (0x01)
                {
                    0x06
                })
            }
        }

        Method (FGFS, 0, NotSerialized)
        {
            Local0 = Package (0x02)
                {
                    Zero, 
                    Buffer (0x04){}
                }
            DerefOf (Local0 [One]) [Zero] = ^^PCI0.LPCB.EC0.FBCB /* \_SB_.PCI0.LPCB.EC0_.FBCB */
            DerefOf (Local0 [One]) [One] = ^^PCI0.LPCB.EC0.FBW1 /* \_SB_.PCI0.LPCB.EC0_.FBW1 */
            DerefOf (Local0 [One]) [0x02] = ^^PCI0.LPCB.EC0.FBW2 /* \_SB_.PCI0.LPCB.EC0_.FBW2 */
            Return (Local0)
        }

        Method (FGLC, 0, NotSerialized)
        {
            Local0 = ^^PCI0.LPCB.EC0.FBCM /* \_SB_.PCI0.LPCB.EC0_.FBCM */
            Return (Local0)
        }

        Method (FGLW, 0, NotSerialized)
        {
            Local0 = Package (0x02)
                {
                    Zero, 
                    Buffer (0x04){}
                }
            DerefOf (Local0 [One]) [Zero] = ^^PCI0.LPCB.EC0.FBCM /* \_SB_.PCI0.LPCB.EC0_.FBCM */
            Return (Local0)
        }

        Method (FLCC, 0, NotSerialized)
        {
            Local0 = Zero
            While (((Local0 != 0x64) & (FGLC () == One)))
            {
                Sleep (0x64)
                Local0++
            }

            If ((Local0 >= 0x64))
            {
                Return (Zero)
            }
            Else
            {
                Return (One)
            }
        }

        Method (FBPS, 1, Serialized)
        {
            If ((FGLC () != Zero))
            {
                Return (Package (0x01)
                {
                    0x40
                })
            }

            Local0 = Package (0x02)
                {
                    Zero, 
                    Buffer (0x04){}
                }
            ^^PCI0.LPCB.EC0.FRPS = DerefOf (Arg0 [Zero])
            ^^PCI0.LPCB.EC0.FRPS = DerefOf (Arg0 [One])
            ^^PCI0.LPCB.EC0.FRPS = DerefOf (Arg0 [0x02])
            ^^PCI0.LPCB.EC0.FRPS = DerefOf (Arg0 [0x03])
            If ((FLCC () == Zero))
            {
                Return (Package (0x01)
                {
                    0x41
                })
            }

            DerefOf (Local0 [One]) [Zero] = ^^PCI0.LPCB.EC0.FRPS /* \_SB_.PCI0.LPCB.EC0_.FRPS */
            Return (Local0)
        }

        Method (HVWC, 4, Serialized)
        {
            Switch (ToInteger (Arg0))
            {
                Case (One)
                {
                    Local2 = VRBC (Arg1, Arg2, Arg3)
                }
                Case (0x02)
                {
                    Local2 = VWBC (Arg1, Arg2, Arg3)
                }
                Case (0x00020006)
                {
                    Local2 = FBCD (Arg1, Arg2, Arg3)
                }
                Default
                {
                    Local2 = Package (0x01)
                        {
                            0x03
                        }
                }

            }

            Return (Local2)
        }

        Method (VRBC, 3, Serialized)
        {
            Return (Package (0x01)
            {
                0x04
            })
        }

        Method (VWBC, 3, Serialized)
        {
            Return (Package (0x01)
            {
                0x04
            })
        }

        Name (THCT, Buffer (0x06)
        {
             0x01, 0x01, 0x03, 0x01, 0x01, 0x02               // ......
        })
        Name (PRFI, Buffer (0x06)
        {
             0x00, 0x08, 0x0C, 0x14, 0x18, 0x1C               // ......
        })
        Name (TSTM, Zero)
        Name (TSTV, Package (0x06)
        {
            Buffer (One)
            {
                 0xFF                                             // .
            }, 

            Buffer (One)
            {
                 0xFF                                             // .
            }, 

            Buffer (0x03)
            {
                 0xFF, 0xFF, 0xFF                                 // ...
            }, 

            Buffer (One)
            {
                 0xFF                                             // .
            }, 

            Buffer (One)
            {
                 0xFF                                             // .
            }, 

            Buffer (0x02)
            {
                 0xFF, 0xFF                                       // ..
            }
        })
        Method (SBBC, 1, NotSerialized)
        {
            Return (Package (0x01)
            {
                0x04
            })
        }

        Method (WGBI, 1, NotSerialized)
        {
            If ((Arg0 < SizeOf (NBTI)))
            {
                Return (^^PCI0.LPCB.EC0.GBTI (Arg0))
            }
            Else
            {
                Return (Package (0x02)
                {
                    0x06, 
                    Buffer (0x04)
                    {
                         0x00, 0x00, 0x00, 0x00                           // ....
                    }
                })
            }
        }

        Method (GSAS, 0, NotSerialized)
        {
            Local0 = Package (0x02)
                {
                    Zero, 
                    Buffer (0x04)
                    {
                         0x00, 0x00, 0x00, 0x00                           // ....
                    }
                }
            Local1 = ^^PCI0.LPCB.EC0.GPID ()
            Local1 += One
            DerefOf (Local0 [One]) [Zero] = Local1
            Return (Local0)
        }

        Method (HWWB, 0, NotSerialized)
        {
            Local0 = BT0P /* \_SB_.BT0P */
            If ((Local0 != 0x1F))
            {
                Local0 = Zero
            }

            SSMI (0xEA3A, Zero, Local0, Zero, Zero)
            GVWE (0x05, Zero)
        }

        Method (STMM, 1, NotSerialized)
        {
            Debug = "SetThermalStatus"
            Debug = Arg0
            CreateByteField (Arg0, Zero, IDTA)
            If (((IDTA >= 0x10) && (IDTA <= 0x15))){}
            Local0 = Package (0x01)
                {
                    Zero
                }
            If (((IDTA >= 0x20) && (IDTA <= 0x24)))
            {
                Local7 = (IDTA - 0x20)
                Local1 = DerefOf (Arg0 [One])
                Local2 = DerefOf (Arg0 [0x02])
                If (^^PCI0.LPCB.EC0.ECRG)
                {
                    Acquire (^^PCI0.LPCB.EC0.ECMX, 0xFFFF)
                    If (((Local7 < 0x03) || (Local7 == 0x04)))
                    {
                        ^^PCI0.LPCB.EC0.CRZN = (One + Local7)
                        If ((Local2 == 0xFF))
                        {
                            Local2 = Zero
                        }

                        ^^PCI0.LPCB.EC0.TEMP = Local2
                        If ((Local7 == 0x02))
                        {
                            Local2 = DerefOf (Arg0 [0x03])
                            ^^PCI0.LPCB.EC0.CRZN = 0x04
                            If ((Local2 == 0xFF))
                            {
                                Local2 = Zero
                            }

                            ^^PCI0.LPCB.EC0.TEMP = Local2
                        }
                    }
                    Else
                    {
                        If ((Local2 != 0xFF))
                        {
                            Local2 = \_TZ.CTCT (Local2)
                        }

                        ^^PCI0.LPCB.EC0.FTGC = Local2
                    }

                    Release (^^PCI0.LPCB.EC0.ECMX)
                }

                Local6 = Zero
                While ((Local6 < Local1))
                {
                    DerefOf (TSTV [Local7]) [Local6] = DerefOf (Arg0 [
                        (Local6 + 0x02)])
                    Local6++
                }

                TSTM = One
                Return (Package (0x01)
                {
                    Zero
                })
            }

            If ((IDTA == 0x30))
            {
                Local1 = DerefOf (Arg0 [One])
                Local2 = DerefOf (Arg0 [0x02])
                If ((Local1 > One))
                {
                    Local3 = DerefOf (Arg0 [0x04])
                }

                If (^^PCI0.LPCB.EC0.ECRG)
                {
                    Acquire (^^PCI0.LPCB.EC0.ECMX, 0xFFFF)
                    ^^PCI0.LPCB.EC0.FTGC = Local2
                    If ((Local1 > One))
                    {
                        ^^PCI0.LPCB.EC0.FT2C = Local3
                    }

                    Release (^^PCI0.LPCB.EC0.ECMX)
                }

                Return (Package (0x01)
                {
                    Zero
                })
            }

            If ((IDTA == 0xAA))
            {
                Local1 = Zero
                While ((Local1 < SizeOf (TSTV)))
                {
                    Local2 = Zero
                    Local3 = DerefOf (THCT [Local1])
                    While ((Local2 < Local3))
                    {
                        DerefOf (TSTV [Local1]) [Local2] = 0xFF
                        Local2++
                    }

                    Local1++
                }

                If (^^PCI0.LPCB.EC0.ECRG)
                {
                    Acquire (^^PCI0.LPCB.EC0.ECMX, 0xFFFF)
                    Local1 = One
                    While ((Local1 <= 0x05))
                    {
                        ^^PCI0.LPCB.EC0.CRZN = Local1
                        ^^PCI0.LPCB.EC0.TEMP = Zero
                        Local1++
                    }

                    ^^PCI0.LPCB.EC0.FTGC = 0xFF
                    Release (^^PCI0.LPCB.EC0.ECMX)
                }

                TSTM = Zero
                Return (Local0)
            }

            Return (Package (0x01)
            {
                0x06
            })
        }

        Method (GTMS, 1, NotSerialized)
        {
            Debug = "GetThermalStatus"
            Debug = Arg0
            Local6 = Package (0x02)
                {
                    Zero, 
                    Buffer (0x80){}
                }
            CreateByteField (Arg0, Zero, IDTA)
            If (((IDTA >= Zero) && (IDTA <= 0x04)))
            {
                Local2 = DerefOf (THCT [IDTA])
                DerefOf (Local6 [One]) [Zero] = Local2
                If ((Local2 == Zero))
                {
                    Return (Local6)
                }

                If (((IDTA < 0x03) || (IDTA == 0x04)))
                {
                    If (^^PCI0.LPCB.EC0.ECRG)
                    {
                        Acquire (^^PCI0.LPCB.EC0.ECMX, 0xFFFF)
                        ^^PCI0.LPCB.EC0.CRZN = (One + IDTA)
                        DerefOf (Local6 [One]) [One] = ^^PCI0.LPCB.EC0.DTMP /* \_SB_.PCI0.LPCB.EC0_.DTMP */
                        If ((IDTA == 0x02))
                        {
                            ^^PCI0.LPCB.EC0.CRZN = 0x04
                            DerefOf (Local6 [One]) [0x02] = ^^PCI0.LPCB.EC0.DTMP /* \_SB_.PCI0.LPCB.EC0_.DTMP */
                        }

                        Release (^^PCI0.LPCB.EC0.ECMX)
                    }

                    If ((IDTA == 0x02))
                    {
                        DerefOf (Local6 [One]) [0x03] = Zero
                    }
                }

                If ((IDTA == 0x03))
                {
                    Local1 = \_TZ.GFSD ()
                    DerefOf (Local6 [One]) [One] = Local1
                }

                Return (Local6)
            }

            If ((IDTA == 0x06))
            {
                If (TRCN)
                {
                    Local1 = One
                }
                Else
                {
                    Local1 = Zero
                }

                TRCN = Zero
                DerefOf (Local6 [One]) [Zero] = One
                DerefOf (Local6 [One]) [One] = Local1
                Return (Local6)
            }

            If ((IDTA == 0x07))
            {
                Local2 = Zero
                Local1 = \_TZ.GFVE (One)
                DerefOf (Local6 [One]) [0x02] = Local1
                If (Local1)
                {
                    Local2 = One
                    DerefOf (Local6 [One]) [0x02] = Local1
                }

                Local1 = \_TZ.GFVE (0x02)
                If ((Local1 > Zero))
                {
                    Local2 = 0x02
                    DerefOf (Local6 [One]) [0x04] = Local1
                }

                DerefOf (Local6 [One]) [Zero] = Local2
                Return (Local6)
            }

            If ((IDTA == 0x08))
            {
                Local2 = Zero
                Local1 = \_TZ.GTFV (One)
                DerefOf (Local6 [One]) [0x02] = Local1
                If ((Local1 > Zero))
                {
                    Local2 = One
                    DerefOf (Local6 [One]) [0x02] = Local1
                }

                Local1 = \_TZ.GTFV (0x02)
                If ((Local1 > Zero))
                {
                    Local2 = 0x02
                    DerefOf (Local6 [One]) [0x04] = Local1
                }

                DerefOf (Local6 [One]) [Zero] = Local2
                Return (Local6)
            }

            If ((IDTA == 0x09))
            {
                Local1 = \_TZ.GCGC ()
                CreateByteField (Local1, Zero, GGCL)
                CreateByteField (Local1, One, GGCH)
                DerefOf (Local6 [One]) [Zero] = One
                DerefOf (Local6 [One]) [0x02] = GGCL /* \_SB_.WMIV.GTMS.GGCL */
                DerefOf (Local6 [One]) [0x03] = GGCH /* \_SB_.WMIV.GTMS.GGCH */
                Return (Local6)
            }

            If ((IDTA == 0x0A))
            {
                If (^^PCI0.LPCB.EC0.ECRG)
                {
                    Acquire (^^PCI0.LPCB.EC0.ECMX, 0xFFFF)
                    ^^PCI0.LPCB.EC0.CRZN = 0x06
                    DerefOf (Local6 [One]) [One] = ^^PCI0.LPCB.EC0.DTMP /* \_SB_.PCI0.LPCB.EC0_.DTMP */
                    Release (^^PCI0.LPCB.EC0.ECMX)
                    DerefOf (Local6 [One]) [Zero] = One
                }

                Return (Local6)
            }

            If (((IDTA >= 0x10) && (IDTA <= 0x15)))
            {
                CreateField (Arg0, 0x18, 0x03E8, GTSD)
                Local1 = GTSD /* \_SB_.WMIV.GTMS.GTSD */
                Local7 = (IDTA - 0x10)
                Local2 = DerefOf (THCT [Local7])
                DerefOf (Local6 [One]) [Zero] = Local2
                Local4 = DerefOf (PRFI [Local7])
                Local3 = Zero
                While ((Local3 < Local2))
                {
                    DerefOf (Local6 [One]) [(Local3 + One)] = 
                        DerefOf (Local1 [(Local3 + Local4)])
                    Local3++
                }

                Return (Local6)
            }

            If (((IDTA >= 0x20) && (IDTA <= 0x25)))
            {
                Local7 = (IDTA - 0x20)
                Local2 = DerefOf (THCT [Local7])
                DerefOf (Local6 [One]) [Zero] = Local2
                Local3 = Zero
                While ((Local3 < Local2))
                {
                    DerefOf (Local6 [One]) [(Local3 + One)] = 
                        DerefOf (DerefOf (TSTV [Local7]) [Local3])
                    Local3++
                }

                Return (Local6)
            }

            If ((IDTA == 0xAA))
            {
                DerefOf (Local6 [One]) [Zero] = TSTM /* \_SB_.WMIV.TSTM */
                Return (Local6)
            }

            Return (Package (0x02)
            {
                0x06, 
                Zero
            })
        }

        Method (GAAT, 0, NotSerialized)
        {
            Local6 = Package (0x02)
                {
                    Zero, 
                    Buffer (0x04)
                    {
                         0x00, 0x00, 0x00, 0x00                           // ....
                    }
                }
            Acquire (^^PCI0.LPCB.EC0.ECMX, 0xFFFF)
            Local1 = ^^PCI0.LPCB.EC0.ACIX /* \_SB_.PCI0.LPCB.EC0_.ACIX */
            Local2 = ^^PCI0.LPCB.EC0.AAPI /* \_SB_.PCI0.LPCB.EC0_.AAPI */
            Release (^^PCI0.LPCB.EC0.ECMX)
            Local5 = Zero
            Local3 = 0x07
            Local4 = (Local1 & Local3)
            If ((Local3 == Local4))
            {
                If ((Local2 <= 0x03))
                {
                    Local5 = One
                }
                ElseIf ((Local2 == 0x04))
                {
                    Local5 = 0x02
                }
                ElseIf ((Local2 == 0x05))
                {
                    Local5 = 0x04
                }
            }

            If ((Local5 != Zero))
            {
                DerefOf (Local6 [One]) [Zero] = Local5
            }

            Return (Local6)
        }

        Method (CPMC, 0, NotSerialized)
        {
            If ((PMCS == One))
            {
                If (^^PCI0.LPCB.EC0.ECRG)
                {
                    ^^PCI0.LPCB.EC0.S0FL = Zero
                    Return (Package (0x02)
                    {
                        Zero, 
                        Zero
                    })
                }
            }

            Return (Package (0x02)
            {
                0x0D, 
                Zero
            })
        }

        Method (WGBC, 0, NotSerialized)
        {
            Return (^^PCI0.LPCB.EC0.GBTC ())
        }

        Method (WSBC, 3, NotSerialized)
        {
            Return (^^PCI0.LPCB.EC0.SBTC (Arg0, Arg1, Arg2))
        }

        Method (EC00, 4, Serialized)
        {
            Switch (ToInteger (Arg0))
            {
                Case (One)
                {
                    Switch (ToInteger (Arg1))
                    {
                        Case (0x48)
                        {
                            Local2 = EC01 ()
                        }
                        Default
                        {
                            Local2 = Package (0x01)
                                {
                                    0x04
                                }
                        }

                    }
                }
                Case (0x02)
                {
                    Switch (ToInteger (Arg1))
                    {
                        Case (0x48)
                        {
                            Local2 = EC02 (Arg3)
                        }
                        Case (0x4F)
                        {
                            Debug = "[WriteBios:0x4F] SetSureLockConfiguration"
                            Local2 = SSLC (Arg3)
                        }
                        Default
                        {
                            Local2 = Package (0x01)
                                {
                                    0x04
                                }
                        }

                    }
                }
                Case (0x00020011)
                {
                    Switch (ToInteger (Arg1))
                    {
                        Case (Zero)
                        {
                            Debug = "[Debug Information] Get EC shutdown ID"
                            Local2 = GESI (Arg2)
                        }
                        Case (One)
                        {
                            Local2 = SRWN (Arg3)
                        }
                        Default
                        {
                            Local2 = Package (0x01)
                                {
                                    0x04
                                }
                        }

                    }
                }
                Case (0x0002000B)
                {
                    Switch (ToInteger (Arg1))
                    {
                        Case (One)
                        {
                            Debug = "[TypeC:0x01] Get UBS TypeC message"
                            Local2 = GUCM (Arg3)
                        }
                        Case (0x02)
                        {
                            Debug = "[TypeC:0x02] Set UBS TypeC FW update status"
                            Local2 = SUCU (Arg3)
                        }
                        Case (0x03)
                        {
                            Debug = "[TypeC:0x03] Get UBS TypeC status"
                            Local2 = GUCS (Arg3)
                        }
                        Case (0x04)
                        {
                            Debug = "[TypeC:0x04] Get UBS TypeC Dock ID"
                            Local2 = GUCD (Arg3)
                        }
                        Default
                        {
                            Debug = "[ReadBios] Invalid Command Type"
                            Local2 = Package (0x01)
                                {
                                    0x04
                                }
                        }

                    }
                }
                Default
                {
                    Local2 = Package (0x01)
                        {
                            0x03
                        }
                }

            }

            Return (Local2)
        }

        Method (EC01, 0, Serialized)
        {
            Acquire (^^PCI0.LPCB.EC0.ECMX, 0xFFFF)
            If (^^PCI0.LPCB.EC0.ECRG)
            {
                Local0 = Package (0x02)
                    {
                        Zero, 
                        Buffer (0x04)
                        {
                             0x00, 0x00, 0x00, 0x00                           // ....
                        }
                    }
                DerefOf (Local0 [One]) [Zero] = ^^PCI0.LPCB.EC0.LIDN /* \_SB_.PCI0.LPCB.EC0_.LIDN */
                DerefOf (Local0 [One]) [One] = ^^PCI0.LPCB.EC0.LIDS /* \_SB_.PCI0.LPCB.EC0_.LIDS */
            }

            Release (^^PCI0.LPCB.EC0.ECMX)
            Return (Local0)
        }

        Method (EC02, 1, Serialized)
        {
            Acquire (^^PCI0.LPCB.EC0.ECMX, 0xFFFF)
            If (^^PCI0.LPCB.EC0.ECRG)
            {
                Local0 = Package (0x01)
                    {
                        0x06
                    }
                CreateByteField (Arg0, Zero, SLNS)
                If (((SLNS == Zero) || (SLNS == One)))
                {
                    ^^PCI0.LPCB.EC0.LIDN = SLNS /* \_SB_.WMIV.EC02.SLNS */
                    Local0 [Zero] = Zero
                }
            }

            Release (^^PCI0.LPCB.EC0.ECMX)
            Return (Local0)
        }

        Method (GESI, 1, Serialized)
        {
            If ((ToInteger (Arg0) == Zero))
            {
                Local0 = Package (0x02)
                    {
                        Zero, 
                        Buffer (0x04)
                        {
                             0x00, 0x00, 0x00, 0x00                           // ....
                        }
                    }
                Acquire (^^PCI0.LPCB.EC0.ECMX, 0xFFFF)
                If (^^PCI0.LPCB.EC0.ECRG)
                {
                    DerefOf (Local0 [One]) [Zero] = ^^PCI0.LPCB.EC0.ESID /* \_SB_.PCI0.LPCB.EC0_.ESID */
                }

                Release (^^PCI0.LPCB.EC0.ECMX)
                Return (Local0)
            }

            Return (Package (0x02)
            {
                0x06, 
                Buffer (0x04)
                {
                     0x00, 0x00, 0x00, 0x00                           // ....
                }
            })
        }

        Method (SRWN, 1, Serialized)
        {
            Local0 = Package (0x01)
                {
                    0x06
                }
            Acquire (^^PCI0.LPCB.EC0.ECMX, 0xFFFF)
            If (^^PCI0.LPCB.EC0.ECRG)
            {
                CreateByteField (Arg0, Zero, RKTM)
                ^^PCI0.LPCB.EC0.RWTM = RKTM /* \_SB_.WMIV.SRWN.RKTM */
                Local0 [Zero] = Zero
            }

            Release (^^PCI0.LPCB.EC0.ECMX)
            Return (Local0)
        }

        Method (IUIP, 0, Serialized)
        {
            Local0 = Zero
            Local1 = Zero
            Acquire (^^PCI0.LPCB.EC0.ECMX, 0xFFFF)
            While (One)
            {
                Local0 = ^^PCI0.LPCB.EC0.UCCS /* \_SB_.PCI0.LPCB.EC0_.UCCS */
                If ((Local0 == Zero))
                {
                    Local1++
                    If ((Local1 >= 0x012C))
                    {
                        Break
                    }
                }
                Else
                {
                    Break
                }

                Sleep (0x0A)
            }

            Release (^^PCI0.LPCB.EC0.ECMX)
            Return (Local0)
        }

        Method (GUCM, 1, Serialized)
        {
            Debug = "GetUSBTypeCMessage"
            Debug = Arg0
            Local6 = Package (0x02)
                {
                    0x0D, 
                    Buffer (0x80){}
                }
            CreateByteField (Arg0, Zero, IDTA)
            If ((IUIP () != Zero))
            {
                Acquire (^^PCI0.LPCB.EC0.ECMX, 0xFFFF)
                ^^PCI0.LPCB.EC0.UCPN = IDTA /* \_SB_.WMIV.GUCM.IDTA */
                ^^PCI0.LPCB.EC0.UCHC = 0x05
                Release (^^PCI0.LPCB.EC0.ECMX)
                Sleep (0x0A)
                If ((IUIP () == One))
                {
                    Acquire (^^PCI0.LPCB.EC0.ECMX, 0xFFFF)
                    Local3 = ^^PCI0.LPCB.EC0.UCHS /* \_SB_.PCI0.LPCB.EC0_.UCHS */
                    If ((Local3 == Zero))
                    {
                        Local6 [Zero] = 0x50
                    }
                    ElseIf ((Local3 <= 0x80))
                    {
                        Local4 = Zero
                        While ((Local4 < Local3))
                        {
                            DerefOf (Local6 [One]) [Local4] = ^^PCI0.LPCB.EC0.UCDB /* \_SB_.PCI0.LPCB.EC0_.UCDB */
                            Local4++
                        }

                        Local6 [Zero] = Zero
                    }

                    Release (^^PCI0.LPCB.EC0.ECMX)
                }
            }

            Return (Local6)
        }

        Method (SUCU, 1, Serialized)
        {
            Debug = "SetUSBTypeCFwUpdateStatus"
            Debug = Arg0
            Local4 = Package (0x01)
                {
                    0x0D
                }
            CreateByteField (Arg0, Zero, IDTA)
            CreateByteField (Arg0, One, UPST)
            If ((UPST == One))
            {
                If ((IUIP () != Zero))
                {
                    Acquire (^^PCI0.LPCB.EC0.ECMX, 0xFFFF)
                    ^^PCI0.LPCB.EC0.UCPN = IDTA /* \_SB_.WMIV.SUCU.IDTA */
                    ^^PCI0.LPCB.EC0.UCHC = 0x08
                    Sleep (0x0A)
                    If ((^^PCI0.LPCB.EC0.UCCS == One))
                    {
                        Local4 [Zero] = Zero
                    }

                    Release (^^PCI0.LPCB.EC0.ECMX)
                }
            }

            Return (Local4)
        }

        Method (GUCS, 1, Serialized)
        {
            Debug = "GetUSBTypeCStatus"
            Debug = Arg0
            Local6 = Package (0x02)
                {
                    Zero, 
                    Buffer (0x04){}
                }
            CreateByteField (Arg0, Zero, IDTA)
            Local1 = IUIP ()
            If ((Local1 != Zero))
            {
                Acquire (^^PCI0.LPCB.EC0.ECMX, 0xFFFF)
                ^^PCI0.LPCB.EC0.UCHS = One
                Sleep (0x0A)
                Local0 = IDTA /* \_SB_.WMIV.GUCS.IDTA */
                ^^PCI0.LPCB.EC0.UCDB = Local0
                Sleep (0x0A)
                ^^PCI0.LPCB.EC0.UCHC = 0x11
                Sleep (0x0A)
                Local2 = IUIP ()
                If ((Local2 == One))
                {
                    Acquire (^^PCI0.LPCB.EC0.ECMX, 0xFFFF)
                    Local3 = ^^PCI0.LPCB.EC0.UCHS /* \_SB_.PCI0.LPCB.EC0_.UCHS */
                    Sleep (0x0A)
                    Release (^^PCI0.LPCB.EC0.ECMX)
                    If ((Local3 <= 0x04))
                    {
                        Acquire (^^PCI0.LPCB.EC0.ECMX, 0xFFFF)
                        Local4 = Zero
                        While (One)
                        {
                            If ((Local4 >= Local3))
                            {
                                Break
                            }
                            Else
                            {
                                DerefOf (Local6 [One]) [Local4] = ^^PCI0.LPCB.EC0.UCDB /* \_SB_.PCI0.LPCB.EC0_.UCDB */
                                Sleep (0x0A)
                                Local4++
                            }
                        }

                        Release (^^PCI0.LPCB.EC0.ECMX)
                        Return (Local6)
                    }
                    Else
                    {
                        Debug = "GetUSBTypeCStatus Return Length Failed."
                    }
                }
                ElseIf ((Local2 == 0x02))
                {
                    Debug = "GetUSBTypeCStatus Cmd Failed. Port Index is out of range."
                    Local6 [Zero] = 0x06
                    Return (Local6)
                }
            }
            Else
            {
                Debug = "GetUSBTypeCStatus Fail. USBC Command still in Progress."
            }

            Return (Package (0x02)
            {
                0x06, 
                Zero
            })
        }

        Method (GUCD, 1, Serialized)
        {
            Debug = "GetUSBTypeCDockId"
            Debug = Arg0
            Local6 = Package (0x02)
                {
                    0x0D, 
                    Buffer (0x04){}
                }
            CreateByteField (Arg0, Zero, IDTA)
            If ((IUIP () != Zero))
            {
                Acquire (^^PCI0.LPCB.EC0.ECMX, 0xFFFF)
                ^^PCI0.LPCB.EC0.UCPN = IDTA /* \_SB_.WMIV.GUCD.IDTA */
                ^^PCI0.LPCB.EC0.UCHC = 0x12
                Release (^^PCI0.LPCB.EC0.ECMX)
                Sleep (0x0A)
                If ((IUIP () == One))
                {
                    Acquire (^^PCI0.LPCB.EC0.ECMX, 0xFFFF)
                    Local3 = ^^PCI0.LPCB.EC0.UCHS /* \_SB_.PCI0.LPCB.EC0_.UCHS */
                    If ((Local3 == Zero))
                    {
                        Local6 [Zero] = 0x50
                    }
                    ElseIf ((Local3 <= 0x04))
                    {
                        Local4 = Zero
                        While ((Local4 < Local3))
                        {
                            DerefOf (Local6 [One]) [Local4] = ^^PCI0.LPCB.EC0.UCDB /* \_SB_.PCI0.LPCB.EC0_.UCDB */
                            Local4++
                        }

                        Local6 [Zero] = Zero
                    }

                    Release (^^PCI0.LPCB.EC0.ECMX)
                }
            }

            Return (Local6)
        }

        Method (SSLC, 1, Serialized)
        {
            GVWE (0x19, 0x06)
            Local3 = Package (0x01)
                {
                    Zero
                }
            Return (Local3)
        }

        Name (ROAE, Zero)
        Method (HVWP, 4, Serialized)
        {
            Switch (ToInteger (Arg0))
            {
                Case (One)
                {
                    Switch (ToInteger (Arg1))
                    {
                        Case (0x04)
                        {
                            Debug = "[ReadBios:0x04] Get the Dock state"
                            Local2 = WGDS ()
                        }
                        Case (0x07)
                        {
                            If (Arg2)
                            {
                                Local3 = ToInteger (DerefOf (Arg3 [Zero]))
                                Local2 = WGBI (Local3)
                            }
                        }
                        Case (0x09)
                        {
                            Debug = "[ReadBios:0x09] Get the KBC Hotkey Scancode"
                            Local2 = GHKS ()
                        }
                        Case (0x0A)
                        {
                            Debug = "[ReadBios:0x0A] Get the KBC HotKey function"
                            Local2 = GHKF (Arg3)
                        }
                        Case (0x0F)
                        {
                            Debug = "[ReadBios:0x0F] Get the Smart Adapter Status"
                            Local2 = GSAS ()
                        }
                        Case (0x1B)
                        {
                            Debug = "[ReadBios:0x1B] Get Wireless Device Info"
                            If ((^^WLBU._STA () != 0x0F))
                            {
                                Local2 = WGWS ()
                            }
                            Else
                            {
                                Local2 = Package (0x01)
                                    {
                                        0x04
                                    }
                            }
                        }
                        Case (0x28)
                        {
                            Debug = "[ReadBios:0x28] Get thermal status"
                            Local2 = GTMS (Arg3)
                        }
                        Case (0x2B)
                        {
                            Debug = "[ReadBios:0x2B] Get Battery control"
                            Local2 = WGBC ()
                        }
                        Case (0x30)
                        {
                            Debug = "[ReadBios:0x30] Get panel EDID data"
                            Local2 = GEID ()
                        }
                        Case (0x3E)
                        {
                            Debug = "[ReadBios:0x3E] Get Privacy Panel State"
                            Local2 = GPPS ()
                        }
                        Case (0x42)
                        {
                            Debug = "[ReadBios:0x42] Get Ac Adapter Type"
                            Local2 = GAAT ()
                        }
                        Case (0x45)
                        {
                            Debug = "[ReadBios:0x45] Get ECRAM"
                            Local2 = GECP (Arg2, Arg3)
                        }
                        Default
                        {
                            Debug = "[ReadBios] Invalid Command Type"
                            Local2 = Package (0x01)
                                {
                                    0x04
                                }
                        }

                    }
                }
                Case (0x02)
                {
                    Switch (ToInteger (Arg1))
                    {
                        Case (0x06)
                        {
                            Debug = "[ReadBios:0x6] Set BIOS brightness control"
                            Local2 = SBBC (Arg3)
                        }
                        Case (0x09)
                        {
                            Debug = "[WriteBios:0x09] Set the KBC Hotkey Scancode"
                            Local2 = SHKS (Arg3)
                        }
                        Case (0x0A)
                        {
                            Debug = "[WriteBios:0x0A] Set the KBC Hotkey function"
                            Local2 = SHKF (Arg3)
                        }
                        Case (0x1B)
                        {
                            Debug = "[WriteBios:0x1B] Set Wireless Device Info"
                            GVWE (0x05, Zero)
                            Local2 = Package (0x01)
                                {
                                    Zero
                                }
                        }
                        Case (0x25)
                        {
                            Debug = "[WriteBios:0x25] Clear PMCCalibration Data in KBC"
                            Local2 = CPMC ()
                        }
                        Case (0x28)
                        {
                            Debug = "[WriteBios:0x28] Set Thermal Status"
                            Local2 = STMM (Arg3)
                        }
                        Case (0x2B)
                        {
                            Debug = "[WriteBios:0x2B] Set Battery control"
                            Local2 = WSBC (Arg1, Arg2, Arg3)
                        }
                        Case (0x36)
                        {
                            If ((^^PCI0.LPCB.EC0.PSCF == One))
                            {
                                GVWE (0x0F, 0x02)
                            }

                            Local2 = Package (0x01)
                                {
                                    Zero
                                }
                        }
                        Case (0x37)
                        {
                            If ((^^PCI0.LPCB.EC0.PSCF == One))
                            {
                                GVWE (0x10, 0x02)
                            }

                            If ((^^PCI0.LPCB.EC0.BCSC == One))
                            {
                                GVWE (0x10, Zero)
                            }

                            ^^PCI0.LPCB.EC0.BCSC = Zero
                            Local2 = Package (0x01)
                                {
                                    Zero
                                }
                        }
                        Case (0x38)
                        {
                            If ((^^PCI0.LPCB.EC0.PSCF == One))
                            {
                                GVWE (0x0F, 0x04)
                            }

                            Local2 = Package (0x01)
                                {
                                    Zero
                                }
                        }
                        Case (0x29)
                        {
                            Debug = "[WriteBios:0x29] Set Factory Control Command"
                            HWWB ()
                            Local2 = Package (0x01)
                                {
                                    Zero
                                }
                        }
                        Case (0x3E)
                        {
                            Debug = "[WriteBios:0x3E] Set Privacy Panel State"
                            Local2 = SPPA (Arg3)
                        }
                        Case (0x3F)
                        {
                            Debug = "[WriteBios:0x3F] Set MAX PrivateBrightness"
                            Local2 = STPB (Arg3)
                        }
                        Case (0x45)
                        {
                            Debug = "[WriteBios:0x45] Set ECRAM"
                            Local2 = SECP (Arg2, Arg3)
                        }
                        Default
                        {
                            Debug = "[WriteBios] Invalid Command Type"
                            Local2 = Package (0x01)
                                {
                                    0x04
                                }
                        }

                    }
                }
                Default
                {
                    Local2 = Package (0x01)
                        {
                            0x03
                        }
                }

            }

            Local0 = DerefOf (Local2 [Zero])
            If (((Local0 == 0x03) || (Local0 == 0x04)))
            {
                Local2 = EC00 (Arg0, Arg1, Arg2, Arg3)
            }

            Return (Local2)
        }

        Method (GHKS, 0, Serialized)
        {
            Local2 = Package (0x02)
                {
                    Zero, 
                    Buffer (0x04)
                    {
                         0x00, 0x00, 0x00, 0x00                           // ....
                    }
                }
            DerefOf (Local2 [One]) [Zero] = ^^PCI0.LPCB.EC0.GSHK ()
            Return (Local2)
        }

        Method (SHKS, 1, Serialized)
        {
            CreateDWordField (Arg0, Zero, DWRD)
            ^^PCI0.LPCB.EC0.SSHK (DWRD)
            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (GHKF, 1, Serialized)
        {
            CreateWordField (Arg0, Zero, WIID)
            Local2 = Package (0x02)
                {
                    Zero, 
                    Buffer (0x04)
                    {
                         0x00, 0x00, 0x00, 0x00                           // ....
                    }
                }
            CreateWordField (DerefOf (Local2 [One]), Zero, WRD0)
            WRD0 = WIID /* \_SB_.WMIV.GHKF.WIID */
            If ((WIID == 0x01AE)){}
            If ((WIID == 0x01A9)){}
            If (((WIID == 0x01B6) || (WIID == 0x01B7)))
            {
                If ((WIID == 0x01B6))
                {
                    ODGW (0x87)
                    \_GPE.G001 (0x87)
                }
                ElseIf ((WIID == 0x01B7))
                {
                    ODGW (0x86)
                    \_GPE.G001 (0x86)
                }

                DerefOf (Local2 [One]) [0x02] = G093 /* \G093 */
                DerefOf (Local2 [One]) [0x03] = (G080 - One
                    )
            }

            Debug = Local2
            Return (Local2)
        }

        Method (GEID, 0, NotSerialized)
        {
            Debug = "Return internal panel EDID data"
            Local1 = G03E /* \G03E */
            Local2 = Package (0x02)
                {
                    Zero, 
                    Zero
                }
            Local2 [One] = Local1
            Return (Local2)
        }

        Method (WGWS, 0, Serialized)
        {
            Debug = "Return Wireless Device Info"
            Local1 = WDDA /* \WDDA */
            Local2 = Package (0x02)
                {
                    Zero, 
                    Zero
                }
            Local2 [One] = Local1
            Return (Local2)
        }

        Method (WGDS, 0, Serialized)
        {
            Local0 = Package (0x02)
                {
                    Zero, 
                    Buffer (One)
                    {
                         0x00                                             // .
                    }
                }
            If (DCKD ())
            {
                Local0 = Package (0x02)
                    {
                        Zero, 
                        Buffer (One)
                        {
                             0x01                                             // .
                        }
                    }
            }

            Local1 = DerefOf (DerefOf (Local0 [One]) [Zero])
            If ((^^PCI0.LPCB.EC0.GBNT (^^PCI0.LPCB.EC0.VBPS, 0x06) == Zero))
            {
                Local1 |= 0x04
            }
            Else
            {
                Local1 &= 0xFFFFFFFFFFFFFFFB
            }

            If ((^^PCI0.LPCB.EC0.PORI == Zero))
            {
                Local1 |= ROAE /* \_SB_.WMIV.ROAE */
            }

            If (((^^PCI0.LPCB.EC0.PORI == One) || (^^PCI0.LPCB.EC0.PORI == 0x03)))
            {
                Local1 |= 0x02
                ROAE = 0x02
            }

            If (((^^PCI0.LPCB.EC0.PORI == 0x02) || (^^PCI0.LPCB.EC0.PORI == 0x04)))
            {
                Local1 &= 0xFFFFFFFFFFFFFFFD
                ROAE = Zero
            }

            Local1 &= 0xFFFFFFFFFFFFFFF7
            DerefOf (Local0 [One]) [Zero] = Local1
            Local3 = Zero
            If ((^^PCI0.LPCB.EC0.PORI == 0x02))
            {
                Local3 |= 0x10
            }

            If ((^^PCI0.LPCB.EC0.PORI == 0x03))
            {
                Local3 |= 0x20
            }

            If ((^^PCI0.LPCB.EC0.PORI == 0x04))
            {
                Local3 |= 0x30
            }

            Local1 |= Local3
            DerefOf (Local0 [One]) [Zero] = Local1
            Return (Local0)
        }

        Method (GPPS, 0, Serialized)
        {
            Acquire (^^PCI0.LPCB.EC0.ECMX, 0xFFFF)
            If (^^PCI0.LPCB.EC0.ECRG)
            {
                Local0 = Package (0x02)
                    {
                        Zero, 
                        Buffer (0x04)
                        {
                             0x00, 0x00, 0x00, 0x00                           // ....
                        }
                    }
                ^^PCI0.LPCB.EC0.PPCM = One
                ^^PCI0.LPCB.EC0.PPDS = One
                Local1 = ^^PCI0.LPCB.EC0.PPDT /* \_SB_.PCI0.LPCB.EC0_.PPDT */
                DerefOf (Local0 [One]) [Zero] = Local1
                ^^PCI0.LPCB.EC0.PPCM = 0x03
                ^^PCI0.LPCB.EC0.PPDS = One
                Local1 = ^^PCI0.LPCB.EC0.PPDT /* \_SB_.PCI0.LPCB.EC0_.PPDT */
                DerefOf (Local0 [One]) [One] = Local1
                DerefOf (Local0 [One]) [0x02] = ^^PCI0.LPCB.EC0.PPUI /* \_SB_.PCI0.LPCB.EC0_.PPUI */
            }

            Release (^^PCI0.LPCB.EC0.ECMX)
            Return (Local0)
        }

        Method (SPPA, 1, Serialized)
        {
            Acquire (^^PCI0.LPCB.EC0.ECMX, 0xFFFF)
            If (^^PCI0.LPCB.EC0.ECRG)
            {
                Local0 = Package (0x01)
                    {
                        0x06
                    }
                CreateByteField (Arg0, Zero, PPST)
                CreateByteField (Arg0, One, PPVP)
                If (((((((((PPST == 0xFF) || (
                    PPST == 0xFE)) || (PPST == 0xFD)) || (PPST == Zero)) || (PPST == 0xFC)) || (PPST == 
                    0xFB)) || (PPST == 0xF0)) || (PPST == 0xF9)))
                {
                    If ((((PPVP == 0xFF) || (PPVP == 0xFE)) || (PPVP == Zero)))
                    {
                        ^^PCI0.LPCB.EC0.PPCM = 0x02
                        ^^PCI0.LPCB.EC0.PPDS = One
                        ^^PCI0.LPCB.EC0.PPDT = PPST /* \_SB_.WMIV.SPPA.PPST */
                        ^^PCI0.LPCB.EC0.PPCM = One
                        ^^PCI0.LPCB.EC0.PPDS = One
                        Local1 = ^^PCI0.LPCB.EC0.PPDT /* \_SB_.PCI0.LPCB.EC0_.PPDT */
                        If (((((((Local1 == 0xFE) || (Local1 == 0xFC)) || 
                            (Local1 == 0xF0)) || (Local1 == 0xF9)) || (Local1 == 0xF8)) || (Local1 == 0xF7)))
                        {
                            If ((PPVP == 0xFF))
                            {
                                ^^PCI0.LPCB.EC0.PPCM = 0x04
                                ^^PCI0.LPCB.EC0.PPDS = Zero
                            }

                            If ((PPVP == 0xFE))
                            {
                                ^^PCI0.LPCB.EC0.PPCM = 0x05
                                ^^PCI0.LPCB.EC0.PPDS = Zero
                            }
                        }

                        Local0 [Zero] = Zero
                    }
                }
            }

            Release (^^PCI0.LPCB.EC0.ECMX)
            Return (Local0)
        }

        Method (STPB, 1, Serialized)
        {
            CreateDWordField (Arg0, Zero, BRID)
            If (^^PCI0.LPCB.EC0.ECRG)
            {
                Acquire (^^PCI0.LPCB.EC0.ECMX, 0xFFFF)
                ^^PCI0.LPCB.EC0.BRIM = BRID /* \_SB_.WMIV.STPB.BRID */
                Release (^^PCI0.LPCB.EC0.ECMX)
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (GECP, 2, Serialized)
        {
            CreateByteField (Arg1, Zero, ECOF)
            CreateByteField (Arg1, One, SIZE)
            If ((SIZE > 0x80))
            {
                Return (Package (0x01)
                {
                    0x06
                })
            }

            OperationRegion (MBER, EmbeddedControl, ECOF, One)
            Field (MBER, ByteAcc, NoLock, Preserve)
            {
                OFST,   8
            }

            Local1 = Package (0x02)
                {
                    Zero, 
                    Buffer (0x80){}
                }
            Local0 = Zero
            Acquire (^^PCI0.LPCB.EC0.ECMX, 0xFFFF)
            While ((Local0 < SIZE))
            {
                DerefOf (Local1 [One]) [Local0] = OFST /* \_SB_.WMIV.GECP.OFST */
                Local0++
            }

            Release (^^PCI0.LPCB.EC0.ECMX)
            Return (Local1)
        }

        Method (SECP, 2, Serialized)
        {
            CreateByteField (Arg1, Zero, ECOF)
            CreateByteField (Arg1, One, SIZE)
            If ((SIZE > 0x80))
            {
                Return (Package (0x01)
                {
                    0x06
                })
            }

            OperationRegion (MBER, EmbeddedControl, ECOF, One)
            Field (MBER, ByteAcc, NoLock, Preserve)
            {
                OFST,   8
            }

            Acquire (^^PCI0.LPCB.EC0.ECMX, 0xFFFF)
            Local0 = Zero
            While ((Local0 < SIZE))
            {
                OFST = DerefOf (Arg1 [(Local0 + 0x02)])
                Local0++
            }

            Release (^^PCI0.LPCB.EC0.ECMX)
            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (SHKF, 1, NotSerialized)
        {
            CreateWordField (Arg0, Zero, WIID)
            Local2 = Package (0x02)
                {
                    Zero, 
                    Buffer (0x04)
                    {
                         0x00, 0x00, 0x00, 0x00                           // ....
                    }
                }
            CreateWordField (DerefOf (Local2 [One]), Zero, WRD0)
            WRD0 = WIID /* \_SB_.WMIV.SHKF.WIID */
            If ((WIID == 0x01B6))
            {
                ODGW (0x87)
                \_GPE.G001 (0x87)
            }
            ElseIf ((WIID == 0x01B7))
            {
                ODGW (0x86)
                \_GPE.G001 (0x86)
            }
            Else
            {
                DerefOf (Local2 [Zero]) [Zero] = 0x04
            }

            Return (Local2)
        }

        Name (WQZZ, Buffer (0x086F)
        {
            /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
            /* 0008 */  0x5F, 0x08, 0x00, 0x00, 0xBE, 0x3A, 0x00, 0x00,  // _....:..
            /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
            /* 0018 */  0x98, 0x58, 0x9C, 0x00, 0x01, 0x06, 0x18, 0x42,  // .X.....B
            /* 0020 */  0x10, 0x13, 0x10, 0x12, 0xE0, 0x81, 0xC2, 0x04,  // ........
            /* 0028 */  0x43, 0x43, 0x28, 0xB2, 0x06, 0x18, 0x8C, 0x04,  // CC(.....
            /* 0030 */  0x08, 0xC9, 0x81, 0x90, 0x0B, 0x26, 0x26, 0x40,  // .....&&@
            /* 0038 */  0x04, 0x84, 0xBC, 0x0A, 0xB0, 0x29, 0xC0, 0x24,  // .....).$
            /* 0040 */  0x88, 0xFA, 0xF7, 0x87, 0x28, 0x09, 0x0E, 0x25,  // ....(..%
            /* 0048 */  0x04, 0x42, 0x12, 0x05, 0x98, 0x17, 0xA0, 0x5B,  // .B.....[
            /* 0050 */  0x80, 0x61, 0x01, 0xB6, 0x05, 0x98, 0x16, 0xE0,  // .a......
            /* 0058 */  0x18, 0x92, 0x4A, 0x03, 0xA7, 0x04, 0x96, 0x02,  // ..J.....
            /* 0060 */  0x21, 0xA1, 0x02, 0x94, 0x0B, 0xF0, 0x2D, 0x40,  // !.....-@
            /* 0068 */  0x3B, 0xA2, 0x24, 0x0B, 0xB0, 0x0C, 0x23, 0x02,  // ;.$...#.
            /* 0070 */  0x8F, 0x22, 0xB2, 0xD1, 0x38, 0x41, 0xD9, 0xD0,  // ."..8A..
            /* 0078 */  0x28, 0x19, 0x10, 0xF2, 0x2C, 0xC0, 0x3A, 0x30,  // (...,.:0
            /* 0080 */  0x21, 0xB0, 0x7B, 0x01, 0xD6, 0x04, 0x98, 0x9B,  // !.{.....
            /* 0088 */  0x85, 0x8C, 0xCD, 0x45, 0x10, 0x0D, 0x62, 0xC8,  // ...E..b.
            /* 0090 */  0x96, 0x00, 0x87, 0x48, 0x82, 0x89, 0x11, 0x25,  // ...H...%
            /* 0098 */  0x58, 0xBC, 0x8A, 0x87, 0x21, 0x94, 0x1B, 0x0D,  // X...!...
            /* 00A0 */  0x15, 0xA9, 0x32, 0x14, 0x59, 0x44, 0x91, 0x42,  // ..2.YD.B
            /* 00A8 */  0x01, 0xCE, 0x04, 0x08, 0xC3, 0x95, 0x46, 0x50,  // ......FP
            /* 00B0 */  0x21, 0xC4, 0x8A, 0x14, 0xAB, 0xFD, 0x41, 0x90,  // !.....A.
            /* 00B8 */  0xF8, 0x16, 0x20, 0xAA, 0x00, 0x51, 0xA4, 0xD1,  // .. ..Q..
            /* 00C0 */  0xA0, 0x86, 0x97, 0xE0, 0x70, 0x3D, 0xD4, 0x73,  // ....p=.s
            /* 00C8 */  0xEC, 0x5C, 0x80, 0xF4, 0x49, 0x0A, 0xE4, 0x20,  // .\..I.. 
            /* 00D0 */  0xCF, 0xA2, 0xCE, 0x71, 0x12, 0x90, 0x04, 0xC6,  // ...q....
            /* 00D8 */  0x4A, 0xD0, 0xC1, 0xC0, 0xA1, 0xB8, 0x06, 0xD4,  // J.......
            /* 00E0 */  0x8C, 0x8F, 0x97, 0x09, 0x82, 0x43, 0x0D, 0xD1,  // .....C..
            /* 00E8 */  0x03, 0x0D, 0x77, 0x02, 0x87, 0xC8, 0x00, 0x3D,  // ..w....=
            /* 00F0 */  0xA9, 0xA3, 0xC1, 0x1C, 0x00, 0x3C, 0xB8, 0x93,  // .....<..
            /* 00F8 */  0x79, 0x0F, 0x28, 0x55, 0x80, 0xD9, 0x31, 0x6B,  // y.(U..1k
            /* 0100 */  0x60, 0x09, 0x8E, 0xC7, 0xD0, 0xA7, 0x7B, 0x3E,  // `.....{>
            /* 0108 */  0x27, 0x9C, 0xC0, 0xF2, 0x07, 0x81, 0x1A, 0x99,  // '.......
            /* 0110 */  0xA1, 0x3D, 0xCA, 0xD3, 0x8A, 0x19, 0xF2, 0xF0,  // .=......
            /* 0118 */  0x0F, 0x8B, 0x89, 0x85, 0x90, 0x02, 0x08, 0x8D,  // ........
            /* 0120 */  0x07, 0xDE, 0xFF, 0x7F, 0x3C, 0xE0, 0xB9, 0x01,  // ....<...
            /* 0128 */  0x3C, 0x13, 0x44, 0x78, 0x25, 0x88, 0xED, 0x01,  // <.Dx%...
            /* 0130 */  0x25, 0x18, 0x16, 0x42, 0x46, 0x56, 0xE1, 0xF1,  // %..BFV..
            /* 0138 */  0xD0, 0x51, 0xD8, 0xE9, 0x70, 0x34, 0xAD, 0x78,  // .Q..p4.x
            /* 0140 */  0x26, 0x18, 0x0E, 0x42, 0x5F, 0x00, 0x09, 0x10,  // &..B_...
            /* 0148 */  0x35, 0x6C, 0x7A, 0x58, 0xE0, 0xE7, 0x04, 0x76,  // 5lzX...v
            /* 0150 */  0x33, 0x38, 0x83, 0x47, 0x00, 0x8F, 0xE4, 0x84,  // 38.G....
            /* 0158 */  0x7C, 0x9C, 0xF0, 0xC0, 0xE0, 0x03, 0xE2, 0xBD,  // |.......
            /* 0160 */  0x4F, 0x99, 0x8C, 0xE0, 0x4C, 0x0D, 0xE8, 0xE3,  // O...L...
            /* 0168 */  0x80, 0x87, 0xC2, 0x87, 0xE8, 0xF1, 0x9D, 0xF2,  // ........
            /* 0170 */  0xF1, 0xFA, 0x74, 0x61, 0x59, 0xE3, 0x84, 0x7E,  // ..taY..~
            /* 0178 */  0x87, 0xF0, 0xEC, 0x8E, 0xE1, 0x8F, 0x43, 0x02,  // ......C.
            /* 0180 */  0x22, 0x42, 0xC8, 0xC9, 0x29, 0x00, 0x0D, 0x7C,  // "B..)..|
            /* 0188 */  0xBA, 0x67, 0x17, 0xE1, 0x74, 0x3D, 0x29, 0x07,  // .g..t=).
            /* 0190 */  0x1A, 0x06, 0x1D, 0x27, 0x38, 0xCE, 0x03, 0xE0,  // ...'8...
            /* 0198 */  0x18, 0x27, 0xFC, 0x73, 0x01, 0xFC, 0x01, 0xF2,  // .'.s....
            /* 01A0 */  0x53, 0xC6, 0x2B, 0x46, 0x02, 0xC7, 0x1C, 0x21,  // S.+F...!
            /* 01A8 */  0x5A, 0xCC, 0x08, 0x21, 0xC0, 0x3F, 0x55, 0x14,  // Z..!.?U.
            /* 01B0 */  0x3E, 0x10, 0xF2, 0xFF, 0x1F, 0x23, 0xB8, 0x00,  // >....#..
            /* 01B8 */  0x3D, 0x46, 0xE0, 0x1B, 0x70, 0x8C, 0xE8, 0xA3,  // =F..p...
            /* 01C0 */  0x04, 0x57, 0x7F, 0xD0, 0xA0, 0x03, 0x04, 0x17,  // .W......
            /* 01C8 */  0xA8, 0x07, 0x08, 0x7C, 0xA3, 0x1F, 0x3D, 0xD0,  // ...|..=.
            /* 01D0 */  0xE3, 0xB2, 0xE8, 0xF3, 0x80, 0x8C, 0x9F, 0x68,  // .......h
            /* 01D8 */  0x34, 0x2F, 0x7E, 0x3A, 0xE0, 0x87, 0x0F, 0xF0,  // 4/~:....
            /* 01E0 */  0x80, 0x7A, 0x48, 0x38, 0x50, 0xCC, 0xB4, 0x39,  // .zH8P..9
            /* 01E8 */  0xE8, 0xB3, 0xCB, 0xA1, 0x63, 0x87, 0x0B, 0xEF,  // ....c...
            /* 01F0 */  0xFF, 0x3F, 0x5C, 0xF0, 0x9C, 0x40, 0xC0, 0x25,  // .?\..@.%
            /* 01F8 */  0x0F, 0x16, 0x3D, 0x5C, 0xFB, 0x15, 0x80, 0x10,  // ..=\....
            /* 0200 */  0xBA, 0xCC, 0x5B, 0x89, 0x66, 0x15, 0xE1, 0x88,  // ..[.f...
            /* 0208 */  0x61, 0x9C, 0x83, 0x4C, 0x60, 0x91, 0xF0, 0xA8,  // a..L`...
            /* 0210 */  0xE3, 0x85, 0xE1, 0xF9, 0x59, 0x28, 0xFA, 0xC1,  // ....Y(..
            /* 0218 */  0x9C, 0x4A, 0xF8, 0x83, 0x89, 0x72, 0x0A, 0x47,  // .J...r.G
            /* 0220 */  0x63, 0xB9, 0x08, 0xD2, 0x05, 0xA1, 0xA3, 0x93,  // c.......
            /* 0228 */  0x11, 0xCE, 0x20, 0xCA, 0xD9, 0x9D, 0xB1, 0x09,  // .. .....
            /* 0230 */  0x7C, 0x94, 0xF2, 0x11, 0x80, 0x9F, 0x5B, 0x3C,  // |.....[<
            /* 0238 */  0x22, 0x18, 0xE7, 0xA5, 0x28, 0xF6, 0x38, 0x27,  // "...(.8'
            /* 0240 */  0x42, 0x50, 0xE0, 0x70, 0x50, 0x41, 0x9E, 0x0E,  // BP.pPA..
            /* 0248 */  0x3E, 0x6D, 0x51, 0xE9, 0x30, 0xA8, 0x03, 0x17,  // >mQ.0...
            /* 0250 */  0x60, 0x65, 0x12, 0x11, 0x9E, 0x25, 0x6A, 0x83,  // `e...%j.
            /* 0258 */  0xD0, 0xA9, 0xE1, 0x6D, 0xE2, 0x6D, 0xCB, 0xB7,  // ...m.m..
            /* 0260 */  0x80, 0x38, 0xA7, 0xD9, 0xDB, 0x81, 0x8B, 0x60,  // .8.....`
            /* 0268 */  0x44, 0xA8, 0x19, 0x8A, 0x9C, 0xB4, 0x22, 0xC6,  // D.....".
            /* 0270 */  0x88, 0xF2, 0xB8, 0x65, 0x94, 0xB7, 0xAD, 0x17,  // ...e....
            /* 0278 */  0x80, 0x78, 0x27, 0xF6, 0xFF, 0x7F, 0xDE, 0x32,  // .x'....2
            /* 0280 */  0x46, 0xF0, 0xC8, 0x0F, 0x5C, 0x2C, 0xC6, 0xEA,  // F...\,..
            /* 0288 */  0xF5, 0x5F, 0xF3, 0x81, 0x0B, 0xE0, 0xF9, 0xFF,  // ._......
            /* 0290 */  0xFF, 0x7C, 0x82, 0x0F, 0x7A, 0x18, 0x42, 0x0F,  // .|..z.B.
            /* 0298 */  0xC3, 0x53, 0x39, 0x97, 0x4A, 0xA7, 0x22, 0xC4,  // .S9.J.".
            /* 02A0 */  0xA8, 0x61, 0xA2, 0x3E, 0x43, 0xF9, 0x6E, 0xE1,  // .a.>C.n.
            /* 02A8 */  0x03, 0x11, 0xF8, 0xCE, 0x5C, 0xC0, 0xF9, 0x98,  // ....\...
            /* 02B0 */  0x82, 0x3B, 0xD3, 0x80, 0xC7, 0xE7, 0x0C, 0x04,  // .;......
            /* 02B8 */  0x72, 0x2A, 0x3E, 0xD4, 0x00, 0x16, 0x44, 0x3F,  // r*>...D?
            /* 02C0 */  0x21, 0x7C, 0xA2, 0xA1, 0x32, 0x61, 0x50, 0x87,  // !|..2aP.
            /* 02C8 */  0x1A, 0xE0, 0xF0, 0xFF, 0x3F, 0xD4, 0x00, 0xA3,  // ....?...
            /* 02D0 */  0x2B, 0xCC, 0xD3, 0xE8, 0x39, 0x3F, 0xCB, 0xF8,  // +...9?..
            /* 02D8 */  0x54, 0xE3, 0x43, 0xA9, 0x71, 0x0C, 0xF1, 0x32,  // T.C.q..2
            /* 02E0 */  0xF3, 0x50, 0xE3, 0x63, 0xC1, 0x2B, 0xA9, 0x0F,  // .P.c.+..
            /* 02E8 */  0x35, 0x86, 0x8A, 0xF3, 0x50, 0xE3, 0xE1, 0x06,  // 5...P...
            /* 02F0 */  0x8A, 0xFA, 0x66, 0xF3, 0x6C, 0x63, 0xF4, 0xF8,  // ..f.lc..
            /* 02F8 */  0xBE, 0xA1, 0x1A, 0xE2, 0xA1, 0x86, 0x49, 0x5E,  // ......I^
            /* 0300 */  0xA9, 0xC6, 0xE2, 0x43, 0x0D, 0xC0, 0xAB, 0xFF,  // ...C....
            /* 0308 */  0xFF, 0xA1, 0x06, 0xE0, 0xDB, 0xD1, 0x00, 0xCE,  // ........
            /* 0310 */  0x91, 0x11, 0x77, 0x34, 0x00, 0xD7, 0xA1, 0x14,  // ..w4....
            /* 0318 */  0x38, 0xFC, 0xFF, 0x8F, 0x06, 0xC0, 0xE3, 0x28,  // 8......(
            /* 0320 */  0x04, 0xE6, 0x0B, 0x8D, 0x8F, 0x42, 0x80, 0x05,  // .....B..
            /* 0328 */  0xD9, 0xE7, 0x20, 0x94, 0xD0, 0xA3, 0x10, 0x20,  // .. .... 
            /* 0330 */  0xE8, 0xF6, 0xF3, 0x14, 0xF1, 0xEC, 0xE3, 0xCB,  // ........
            /* 0338 */  0xCF, 0x03, 0x41, 0x84, 0xD7, 0x7C, 0x9F, 0x82,  // ..A..|..
            /* 0340 */  0x7C, 0xC8, 0xF7, 0x51, 0x88, 0xC1, 0x18, 0xCA,  // |..Q....
            /* 0348 */  0xD7, 0x20, 0x1F, 0x85, 0x18, 0xD4, 0x6B, 0x90,  // . ....k.
            /* 0350 */  0xEF, 0xFB, 0x06, 0x79, 0xBC, 0x08, 0x12, 0x3B,  // ...y...;
            /* 0358 */  0xCA, 0xFF, 0x3F, 0xD0, 0xA3, 0x10, 0x13, 0x7D,  // ..?....}
            /* 0360 */  0x14, 0x02, 0x68, 0xFF, 0xFF, 0x3F, 0x0A, 0x01,  // ..h..?..
            /* 0368 */  0xFC, 0x0B, 0x70, 0x34, 0x00, 0xDD, 0xB4, 0x1E,  // ..p4....
            /* 0370 */  0x85, 0xC0, 0x7B, 0x67, 0x39, 0xED, 0x13, 0xF0,  // ..{g9...
            /* 0378 */  0x59, 0x08, 0xFB, 0xFF, 0x3F, 0x0B, 0x01, 0x2C,  // Y...?..,
            /* 0380 */  0x39, 0x0A, 0x1D, 0xC5, 0x59, 0xBE, 0x0A, 0x3D,  // 9...Y..=
            /* 0388 */  0x01, 0xBC, 0x00, 0xC4, 0x08, 0xF3, 0x0E, 0xF4,  // ........
            /* 0390 */  0x92, 0xC9, 0xEE, 0xE2, 0xC6, 0x79, 0x72, 0x39,  // .....yr9
            /* 0398 */  0x8B, 0x27, 0x71, 0x5F, 0x82, 0x7C, 0xA0, 0x78,  // .'q_.|.x
            /* 03A0 */  0x16, 0x32, 0xD4, 0xE9, 0x06, 0x7D, 0x23, 0xF7,  // .2...}#.
            /* 03A8 */  0xC0, 0x62, 0xC6, 0x0F, 0xF1, 0x3C, 0x64, 0x88,  // .b...<d.
            /* 03B0 */  0x67, 0x21, 0xC0, 0xC8, 0xFF, 0xFF, 0x2C, 0x04,  // g!....,.
            /* 03B8 */  0xF0, 0xFF, 0xFF, 0x7F, 0x16, 0x02, 0x5C, 0xBF,  // ......\.
            /* 03C0 */  0x00, 0x7C, 0x16, 0x02, 0x9E, 0x27, 0x80, 0x07,  // .|...'..
            /* 03C8 */  0x6D, 0x9F, 0x85, 0x00, 0x43, 0xFF, 0xFF, 0xB3,  // m...C...
            /* 03D0 */  0x10, 0x60, 0xE4, 0x70, 0x79, 0xFE, 0xAF, 0x40,  // .`.py..@
            /* 03D8 */  0xC7, 0xF2, 0x1E, 0xE1, 0x59, 0x9F, 0xE4, 0xEB,  // ....Y...
            /* 03E0 */  0xA5, 0x67, 0xFA, 0x50, 0xF0, 0x2C, 0xC4, 0xB0,  // .g.P.,..
            /* 03E8 */  0x0E, 0xC3, 0x67, 0x21, 0x06, 0xF1, 0xA2, 0x69,  // ..g!...i
            /* 03F0 */  0x88, 0x17, 0x4E, 0x1F, 0x06, 0x18, 0xF0, 0x2B,  // ..N....+
            /* 03F8 */  0xA7, 0x81, 0x82, 0x04, 0x7A, 0x16, 0x02, 0x58,  // ....z..X
            /* 0400 */  0xF2, 0xFF, 0x3F, 0x0B, 0x01, 0xFC, 0xFF, 0xFF,  // ..?.....
            /* 0408 */  0x9F, 0x85, 0x80, 0xD8, 0x1A, 0x75, 0x16, 0x02,  // .....u..
            /* 0410 */  0x96, 0xB7, 0x95, 0x67, 0x6C, 0x9F, 0x56, 0x9E,  // ...gl.V.
            /* 0418 */  0x85, 0x00, 0x0B, 0xB9, 0x8C, 0x1C, 0x84, 0x30,  // .......0
            /* 0420 */  0x11, 0x1F, 0x0E, 0x3E, 0x66, 0x02, 0x7A, 0xFE,  // ...>f.z.
            /* 0428 */  0xFF, 0x53, 0x7C, 0x71, 0x37, 0xC6, 0x13, 0xC0,  // .S|q7...
            /* 0430 */  0x8B, 0xC4, 0x63, 0x26, 0x3B, 0x6A, 0x1A, 0xE6,  // ..c&;j..
            /* 0438 */  0x59, 0xC8, 0x78, 0x67, 0xF1, 0x1A, 0xF0, 0x04,  // Y.xg....
            /* 0440 */  0xEF, 0xC9, 0x3F, 0x0B, 0x31, 0xB0, 0xC3, 0x0A,  // ..?.1...
            /* 0448 */  0xF6, 0x28, 0x64, 0x50, 0x83, 0xC7, 0x0E, 0x11,  // .(dP....
            /* 0450 */  0x26, 0xD0, 0xB3, 0x10, 0x8B, 0xFB, 0x5C, 0xD1,  // &.....\.
            /* 0458 */  0x79, 0xC2, 0x67, 0x21, 0xC0, 0xC9, 0xD5, 0xE0,  // y.g!....
            /* 0460 */  0x59, 0x08, 0x30, 0x71, 0xD8, 0xF0, 0x59, 0x03,  // Y.0q..Y.
            /* 0468 */  0x3C, 0xC3, 0xF7, 0xA8, 0xCE, 0xE1, 0xF1, 0x18,  // <.......
            /* 0470 */  0x78, 0xFD, 0xFF, 0x0F, 0x1A, 0xE0, 0xC9, 0xAA,  // x.......
            /* 0478 */  0xE3, 0x9C, 0xC0, 0x72, 0x2F, 0x5A, 0x36, 0x0E,  // ...r/Z6.
            /* 0480 */  0x34, 0x74, 0x44, 0x56, 0x07, 0xA4, 0xB1, 0x61,  // 4tDV...a
            /* 0488 */  0x2E, 0x25, 0x91, 0x4F, 0x8E, 0x8D, 0xDA, 0x8A,  // .%.O....
            /* 0490 */  0xE0, 0x74, 0x66, 0xF2, 0x09, 0xC0, 0x5A, 0x28,  // .tf...Z(
            /* 0498 */  0xA4, 0x80, 0x46, 0x63, 0x31, 0xBC, 0x33, 0x1F,  // ..Fc1.3.
            /* 04A0 */  0x9D, 0x28, 0x88, 0x01, 0x7D, 0x1C, 0xB2, 0x8D,  // .(..}...
            /* 04A8 */  0x43, 0x01, 0x6A, 0x2F, 0x9A, 0x02, 0x39, 0xE7,  // C.j/..9.
            /* 04B0 */  0x60, 0xF4, 0xCF, 0x8E, 0xCE, 0xC6, 0x77, 0x02,  // `.....w.
            /* 04B8 */  0xAE, 0x01, 0x42, 0xA7, 0x04, 0x43, 0x5B, 0xCD,  // ..B..C[.
            /* 04C0 */  0x2C, 0x51, 0x60, 0xC6, 0x7F, 0x8A, 0x31, 0x81,  // ,Q`...1.
            /* 04C8 */  0xCF, 0x31, 0xF8, 0x83, 0x01, 0x7E, 0xE0, 0x2F,  // .1...~./
            /* 04D0 */  0x06, 0x55, 0xDF, 0x0B, 0x74, 0x5F, 0xB0, 0xBA,  // .U..t_..
            /* 04D8 */  0x9B, 0x0C, 0x84, 0x19, 0x99, 0xA0, 0xBE, 0xD3,  // ........
            /* 04E0 */  0x01, 0x28, 0x80, 0x7C, 0x21, 0xF0, 0x39, 0xEA,  // .(.|!.9.
            /* 04E8 */  0xA1, 0x80, 0x4D, 0x24, 0x44, 0x98, 0x68, 0x46,  // ..M$D.hF
            /* 04F0 */  0x47, 0x4C, 0x18, 0x15, 0x7D, 0xC2, 0x14, 0xC4,  // GL..}...
            /* 04F8 */  0x13, 0x76, 0xAC, 0x09, 0xA3, 0x67, 0xE2, 0x8B,  // .v...g..
            /* 0500 */  0x0E, 0x1B, 0x31, 0x26, 0xC4, 0xD5, 0x03, 0xDA,  // ..1&....
            /* 0508 */  0x04, 0x83, 0xFA, 0x52, 0x04, 0x6B, 0xC8, 0x7C,  // ...R.k.|
            /* 0510 */  0x2C, 0xBE, 0x40, 0xE0, 0xA6, 0xCC, 0xFE, 0xFF,  // ,.@.....
            /* 0518 */  0x53, 0x06, 0xD7, 0x9C, 0xD8, 0x35, 0xC1, 0x97,  // S....5..
            /* 0520 */  0x1D, 0xDC, 0x9C, 0xC1, 0x08, 0x8F, 0xB9, 0x8B,  // ........
            /* 0528 */  0xF1, 0xAB, 0x93, 0x47, 0xC7, 0x0F, 0x0A, 0xBE,  // ...G....
            /* 0530 */  0xE1, 0x30, 0xEC, 0x27, 0x33, 0xCF, 0xE8, 0xBD,  // .0.'3...
            /* 0538 */  0xCC, 0xD7, 0x38, 0x0C, 0xAC, 0xC7, 0xCB, 0x61,  // ..8....a
            /* 0540 */  0x8D, 0x16, 0xF6, 0xD0, 0xDE, 0x43, 0x7C, 0x88,  // .....C|.
            /* 0548 */  0xF1, 0x79, 0xC2, 0x18, 0x61, 0x7D, 0x7B, 0x01,  // .y..a}{.
            /* 0550 */  0xC7, 0x3D, 0x0B, 0xFE, 0x5D, 0x03, 0x3C, 0x97,  // .=..].<.
            /* 0558 */  0x10, 0xDF, 0x35, 0x00, 0x6B, 0xFF, 0xFF, 0xBB,  // ..5.k...
            /* 0560 */  0x06, 0xC0, 0x8F, 0x6B, 0x82, 0xEF, 0x1A, 0xC0,  // ...k....
            /* 0568 */  0x7B, 0xE8, 0xBE, 0x6B, 0x00, 0xBF, 0xFF, 0xFF,  // {..k....
            /* 0570 */  0x5D, 0x03, 0x97, 0xFD, 0xAE, 0x81, 0x3A, 0x06,  // ].....:.
            /* 0578 */  0x58, 0xE1, 0x5D, 0x03, 0xDA, 0x95, 0xED, 0x7D,  // X.]....}
            /* 0580 */  0xED, 0x09, 0xCB, 0x9A, 0x2E, 0x1B, 0x28, 0x35,  // ......(5
            /* 0588 */  0x97, 0x0D, 0x80, 0x04, 0x52, 0x26, 0x8C, 0x0A,  // ....R&..
            /* 0590 */  0x3F, 0x61, 0x0A, 0xE2, 0x09, 0x3B, 0xD8, 0x65,  // ?a...;.e
            /* 0598 */  0x03, 0x14, 0x31, 0x2E, 0x1B, 0xA0, 0x1F, 0xDB,  // ..1.....
            /* 05A0 */  0x29, 0x83, 0xEF, 0xFF, 0x7F, 0xBE, 0x87, 0x73,  // )......s
            /* 05A8 */  0x4F, 0x60, 0xB7, 0x0D, 0xE0, 0x0D, 0xE9, 0xDB,  // O`......
            /* 05B0 */  0x06, 0x70, 0xCD, 0x7F, 0xDB, 0x40, 0x71, 0x58,  // .p...@qX
            /* 05B8 */  0xE5, 0x6D, 0x03, 0xE2, 0x49, 0x9E, 0x11, 0x58,  // .m..I..X
            /* 05C0 */  0xD5, 0x75, 0x03, 0xA5, 0xE7, 0xBA, 0x01, 0xC8,  // .u......
            /* 05C8 */  0xFB, 0xFF, 0x5F, 0x37, 0x80, 0x87, 0x98, 0x09,  // .._7....
            /* 05D0 */  0xA3, 0xE2, 0x4F, 0x98, 0x82, 0x78, 0xC2, 0x8E,  // ..O..x..
            /* 05D8 */  0x76, 0xDD, 0x00, 0x45, 0x90, 0xEB, 0x06, 0xE8,  // v..E....
            /* 05E0 */  0xE7, 0xF5, 0xBA, 0x01, 0x1C, 0x2E, 0x0A, 0x98,  // ........
            /* 05E8 */  0xFB, 0x06, 0xF0, 0x86, 0xE5, 0xF7, 0x0D, 0xE0,  // ........
            /* 05F0 */  0xF9, 0xFF, 0xBF, 0x6F, 0x80, 0xE7, 0x26, 0x8E,  // ...o..&.
            /* 05F8 */  0xB9, 0x6F, 0x00, 0x6C, 0xFE, 0xFF, 0x5F, 0xF5,  // .o.l.._.
            /* 0600 */  0x70, 0x17, 0x05, 0xCC, 0x7D, 0x03, 0x78, 0x5F,  // p...}.x_
            /* 0608 */  0xA4, 0x7D, 0xDF, 0x00, 0xAE, 0xD2, 0xD6, 0xEF,  // .}......
            /* 0610 */  0xC1, 0xD1, 0x13, 0x82, 0xC7, 0x87, 0xBB, 0x5F,  // ......._
            /* 0618 */  0x7A, 0x7C, 0xBE, 0x9B, 0x83, 0x63, 0x90, 0xC7,  // z|...c..
            /* 0620 */  0x78, 0x68, 0x07, 0xFC, 0xFA, 0xEE, 0x89, 0xF9,  // xh......
            /* 0628 */  0x6E, 0x0E, 0xFC, 0xCF, 0x04, 0xC7, 0x83, 0x81,  // n.......
            /* 0630 */  0xC6, 0x21, 0xB6, 0x7A, 0x69, 0x20, 0x47, 0x83,  // .!.zi G.
            /* 0638 */  0xF8, 0xFC, 0xFF, 0x0F, 0xCD, 0xE0, 0x8C, 0x55,  // .......U
            /* 0640 */  0xFC, 0xC9, 0x1F, 0xE1, 0x1C, 0x43, 0x67, 0x87,  // .....Cg.
            /* 0648 */  0x83, 0xC4, 0x0E, 0x82, 0x07, 0x5B, 0xB5, 0x09,  // .....[..
            /* 0650 */  0x14, 0x1A, 0x42, 0x51, 0x60, 0x50, 0x2C, 0x3E,  // ..BQ`P,>
            /* 0658 */  0x60, 0xE0, 0x87, 0xCD, 0xCE, 0x02, 0x4C, 0x12,  // `.....L.
            /* 0660 */  0x1C, 0xEA, 0x08, 0xE0, 0xFB, 0x44, 0xF3, 0xE3,  // .....D..
            /* 0668 */  0xD0, 0xDD, 0xE0, 0x50, 0x3D, 0x96, 0x87, 0x02,  // ...P=...
            /* 0670 */  0x7A, 0x06, 0xC4, 0x1D, 0x33, 0xC8, 0xA4, 0x3D,  // z...3..=
            /* 0678 */  0xA3, 0x88, 0x4F, 0x09, 0xA7, 0x14, 0x26, 0x81,  // ..O...&.
            /* 0680 */  0xCF, 0x0F, 0x0C, 0x8D, 0x13, 0xBC, 0x36, 0x84,  // ......6.
            /* 0688 */  0xC6, 0x9C, 0x14, 0xEC, 0xF9, 0x8E, 0x21, 0x60,  // ......!`
            /* 0690 */  0x13, 0xD8, 0xFD, 0x25, 0x43, 0xD6, 0x06, 0xAE,  // ...%C...
            /* 0698 */  0x5B, 0x92, 0x21, 0x7A, 0xC3, 0x91, 0x2D, 0x14,  // [.!z..-.
            /* 06A0 */  0x4D, 0x27, 0xCA, 0xFB, 0x46, 0x14, 0x3B, 0x43,  // M'..F.;C
            /* 06A8 */  0x10, 0x46, 0x94, 0x60, 0x41, 0x1E, 0x15, 0x62,  // .F.`A..b
            /* 06B0 */  0x45, 0x79, 0x29, 0x30, 0x42, 0xC4, 0x10, 0xAF,  // Ey)0B...
            /* 06B8 */  0x1C, 0x81, 0x4E, 0x38, 0x7C, 0x90, 0xC7, 0xA6,  // ..N8|...
            /* 06C0 */  0x38, 0xED, 0x0F, 0x82, 0xC4, 0x7A, 0x12, 0x68,  // 8....z.h
            /* 06C8 */  0x2C, 0x8E, 0x34, 0x1A, 0xD4, 0x39, 0xC0, 0xC3,  // ,.4..9..
            /* 06D0 */  0xF5, 0x21, 0xC6, 0xC3, 0x7F, 0x08, 0x31, 0xC8,  // .!....1.
            /* 06D8 */  0x41, 0x9E, 0xDB, 0xA3, 0xC2, 0x71, 0xFA, 0x2A,  // A....q.*
            /* 06E0 */  0x61, 0x82, 0x17, 0x00, 0x1F, 0x54, 0xE0, 0xB8,  // a....T..
            /* 06E8 */  0x06, 0xD4, 0x8C, 0x9F, 0x31, 0xC0, 0x72, 0x1C,  // ....1.r.
            /* 06F0 */  0xF7, 0x49, 0x05, 0xEE, 0x78, 0x7C, 0x3F, 0x60,  // .I..x|?`
            /* 06F8 */  0x13, 0x4E, 0x60, 0xF9, 0x83, 0x40, 0x1D, 0x67,  // .N`..@.g
            /* 0700 */  0xF8, 0x3C, 0x5F, 0x58, 0x0C, 0xF9, 0x98, 0x60,  // .<_X...`
            /* 0708 */  0x02, 0x8B, 0x15, 0xF0, 0xFF, 0x3F, 0xD9, 0xB0,  // .....?..
            /* 0710 */  0xF1, 0x80, 0xFF, 0x1E, 0xF3, 0x78, 0xE1, 0x93,  // .....x..
            /* 0718 */  0x89, 0xE7, 0x6B, 0x82, 0x11, 0x21, 0xE4, 0x64,  // ..k..!.d
            /* 0720 */  0x3C, 0xE8, 0x3B, 0x04, 0xE6, 0x7A, 0xC3, 0xCE,  // <.;..z..
            /* 0728 */  0x2D, 0x5C, 0xD4, 0x41, 0x03, 0x75, 0x5A, 0xF0,  // -\.A.uZ.
            /* 0730 */  0x41, 0x81, 0xDD, 0x8C, 0x30, 0xC7, 0x75, 0x7E,  // A...0.u~
            /* 0738 */  0x56, 0x01, 0xFF, 0x08, 0xE1, 0xDF, 0x1E, 0x3C,  // V......<
            /* 0740 */  0x2F, 0x5F, 0x19, 0x5E, 0x1D, 0x12, 0x38, 0xE4,  // /_.^..8.
            /* 0748 */  0x08, 0xD1, 0xE3, 0xF2, 0x08, 0x31, 0xE7, 0x23,  // .....1.#
            /* 0750 */  0xCC, 0x10, 0xC1, 0x75, 0x16, 0x00, 0xC7, 0x10,  // ...u....
            /* 0758 */  0x81, 0xCF, 0x01, 0x07, 0xF6, 0xFF, 0xFF, 0xC2,  // ........
            /* 0760 */  0xC2, 0x2E, 0x4D, 0x7C, 0xA0, 0x3E, 0xE0, 0x00,  // ..M|.>..
            /* 0768 */  0x0E, 0xAE, 0x69, 0xB8, 0x03, 0x0E, 0x38, 0xCE,  // ..i...8.
            /* 0770 */  0x02, 0xEC, 0x70, 0x03, 0x4B, 0xA1, 0x4D, 0x9F,  // ..p.K.M.
            /* 0778 */  0x1A, 0x8D, 0x5A, 0x35, 0x28, 0x53, 0xA3, 0x4C,  // ..Z5(S.L
            /* 0780 */  0x83, 0x5A, 0x7D, 0x2A, 0x35, 0x66, 0xEC, 0xAC,  // .Z}*5f..
            /* 0788 */  0xF2, 0x28, 0xAC, 0x47, 0x84, 0x46, 0x65, 0x11,  // .(.G.Fe.
            /* 0790 */  0x8F, 0x02, 0x81, 0x38, 0x32, 0x08, 0x8D, 0x44,  // ...82..D
            /* 0798 */  0x21, 0x10, 0x0B, 0x7F, 0x24, 0x08, 0xC4, 0xC2,  // !...$...
            /* 07A0 */  0x1E, 0x55, 0x02, 0xB1, 0xA8, 0xE7, 0x9C, 0x40,  // .U.....@
            /* 07A8 */  0x1C, 0x63, 0x15, 0x02, 0x27, 0x26, 0xC0, 0x29,  // .c..'&.)
            /* 07B0 */  0x08, 0x0D, 0xA6, 0xE2, 0xA0, 0x42, 0x9F, 0x6A,  // .....B.j
            /* 07B8 */  0x02, 0x71, 0x18, 0x10, 0x2A, 0xFD, 0xAF, 0x27,  // .q..*..'
            /* 07C0 */  0x10, 0x0B, 0xF4, 0x01, 0x48, 0x1F, 0x04, 0x02,  // ....H...
            /* 07C8 */  0x71, 0x04, 0x25, 0xA3, 0xA6, 0x0F, 0x09, 0x81,  // q.%.....
            /* 07D0 */  0x38, 0x2E, 0x08, 0x0D, 0xF5, 0x7C, 0x10, 0x20,  // 8....|. 
            /* 07D8 */  0xB1, 0x02, 0xC2, 0x82, 0x7B, 0x01, 0x61, 0xB2,  // ....{.a.
            /* 07E0 */  0x1F, 0x04, 0x02, 0xB1, 0x48, 0x33, 0x20, 0x4C,  // ....H3 L
            /* 07E8 */  0xCA, 0xAB, 0x4F, 0x80, 0x04, 0x84, 0xCA, 0xB5,  // ..O.....
            /* 07F0 */  0x03, 0xC2, 0xC2, 0x82, 0xD0, 0x68, 0x7A, 0x40,  // .....hz@
            /* 07F8 */  0x58, 0x00, 0x3F, 0x80, 0xF4, 0x15, 0x21, 0x10,  // X.?...!.
            /* 0800 */  0x87, 0x54, 0x04, 0xC2, 0x24, 0x3A, 0x02, 0x61,  // .T..$:.a
            /* 0808 */  0x29, 0x25, 0xFD, 0xFF, 0x21, 0x1A, 0x19, 0xA2,  // )%..!...
            /* 0810 */  0x41, 0x04, 0xE4, 0xA4, 0x96, 0x80, 0x58, 0x6E,  // A.....Xn
            /* 0818 */  0x10, 0x01, 0x39, 0x9C, 0x27, 0x20, 0x96, 0x14,  // ..9.' ..
            /* 0820 */  0x44, 0x40, 0x0E, 0xF8, 0xD2, 0x10, 0x90, 0xE3,  // D@......
            /* 0828 */  0x82, 0x08, 0xC8, 0xA9, 0x54, 0x01, 0xB1, 0x88,  // ....T...
            /* 0830 */  0x20, 0x02, 0x72, 0x32, 0x57, 0x40, 0x2C, 0x27,  //  .r2W@,'
            /* 0838 */  0x88, 0x0E, 0x01, 0xE4, 0x11, 0x14, 0x88, 0xE4,  // ........
            /* 0840 */  0x03, 0x11, 0x90, 0x63, 0xBD, 0x1C, 0x02, 0x91,  // ...c....
            /* 0848 */  0x90, 0x20, 0x02, 0x72, 0xA2, 0x37, 0x86, 0x80,  // . .r.7..
            /* 0850 */  0x1C, 0x0F, 0x44, 0x83, 0x20, 0x5F, 0xA1, 0x40,  // ..D. _.@
            /* 0858 */  0x24, 0x23, 0x88, 0x80, 0xC8, 0xFB, 0x28, 0x08,  // $#....(.
            /* 0860 */  0xD1, 0xF4, 0xAB, 0x13, 0x88, 0x53, 0x83, 0xD0,  // .....S..
            /* 0868 */  0x64, 0xDF, 0xA2, 0x20, 0xE4, 0xFF, 0x0F         // d.. ...
        })
        Name (ZOBF, Buffer (0x1060){})
        Name (_WDG, Buffer (0x3C)
        {
            /* 0000 */  0x34, 0xF0, 0xB7, 0x5F, 0x63, 0x2C, 0xE9, 0x45,  // 4.._c,.E
            /* 0008 */  0xBE, 0x91, 0x3D, 0x44, 0xE2, 0xC7, 0x07, 0xE4,  // ..=D....
            /* 0010 */  0x50, 0x56, 0x01, 0x02, 0x79, 0x42, 0xF2, 0x95,  // PV..yB..
            /* 0018 */  0x7B, 0x4D, 0x34, 0x43, 0x93, 0x87, 0xAC, 0xCD,  // {M4C....
            /* 0020 */  0xC6, 0x7E, 0xF6, 0x1C, 0x81, 0x00, 0x01, 0x08,  // .~......
            /* 0028 */  0x21, 0x12, 0x90, 0x05, 0x66, 0xD5, 0xD1, 0x11,  // !...f...
            /* 0030 */  0xB2, 0xF0, 0x00, 0xA0, 0xC9, 0x06, 0x29, 0x10,  // ......).
            /* 0038 */  0x5A, 0x5A, 0x01, 0x00                           // ZZ..
        })
        Method (WVPI, 3, Serialized)
        {
            CreateDWordField (Arg2, Zero, FSNI)
            CreateDWordField (Arg2, 0x04, FCOM)
            CreateDWordField (Arg2, 0x08, FCMT)
            CreateDWordField (Arg2, 0x0C, FDAS)
            Local0 = Zero
            RTCD = 0x03
            Local1 = Package (0x02)
                {
                    Zero, 
                    Zero
                }
            If ((FDAS > 0x1060))
            {
                RTCD = 0x05
                Local1 [Zero] = One
            }
            Else
            {
                Name (PVSZ, Package (0x05)
                {
                    Zero, 
                    0x04, 
                    0x80, 
                    0x0400, 
                    0x1000
                })
                Local0 = Zero
                If (((Arg1 >= One) && (Arg1 <= 0x05)))
                {
                    Local0 = DerefOf (PVSZ [(Arg1 - One)])
                }

                DASO = Local0
                SNIN = FSNI /* \_SB_.WMIV.WVPI.FSNI */
                COMD = FCOM /* \_SB_.WMIV.WVPI.FCOM */
                CMTP = FCMT /* \_SB_.WMIV.WVPI.FCMT */
                DASI = FDAS /* \_SB_.WMIV.WVPI.FDAS */
                If ((FDAS > Zero))
                {
                    CreateField (Arg2, 0x80, (FDAS * 0x08), FDAI)
                    PVWB = FDAI /* \_SB_.WMIV.WVPI.FDAI */
                }

                Local1 [One] = Local0
            }

            Return (Local1)
        }

        Method (HVWA, 0, Serialized)
        {
            Local2 = HVWC (COMD, CMTP, DASI, PVWB)
            Local0 = DerefOf (Local2 [Zero])
            If (((Local0 == 0x03) || (Local0 == 0x04)))
            {
                Local2 = HVWP (COMD, CMTP, DASI, PVWB)
            }

            Return (Local2)
        }

        Method (WVPO, 2, Serialized)
        {
            Local1 = Buffer ((0x08 + Arg0)){}
            CreateDWordField (Local1, Zero, FSNO)
            CreateDWordField (Local1, 0x04, FRTC)
            If ((ObjectType (Arg1) == 0x04))
            {
                FRTC = DerefOf (Arg1 [Zero])
                Local0 = Zero
                If ((SizeOf (Arg1) == 0x02))
                {
                    Local2 = DerefOf (Arg1 [One])
                    Local0 = SizeOf (Local2)
                }
            }
            Else
            {
                FRTC = RTCD /* \RTCD */
                Local0 = DASO /* \DASO */
            }

            If ((Local0 > Arg0))
            {
                FRTC = 0x05
            }
            ElseIf (((Local0 > Zero) && (Local0 <= 0x1060)))
            {
                CreateField (Local1, 0x40, (Local0 * 0x08), FDAO)
                If ((ObjectType (Arg1) == 0x04))
                {
                    FDAO = Local2
                }
                Else
                {
                    Local2 = PVWB /* \PVWB */
                    CreateField (Local2, Zero, (Local0 * 0x08), FDAI)
                    FDAO = FDAI /* \_SB_.WMIV.WVPO.FDAI */
                }
            }

            If ((Zero == (FRTC & 0xFFFF)))
            {
                FSNO = 0x53534150
            }
            Else
            {
                FSNO = 0x4C494146
            }

            Return (Local1)
        }

        Method (WVCM, 0, Serialized)
        {
            SNIN = Zero
            COMD = Zero
            CMTP = Zero
            DASI = Zero
            DASO = Zero
            PVWB = ZOBF /* \_SB_.WMIV.ZOBF */
            PVWS = Zero
            RTCD = Zero
        }

        Method (WMPV, 3, Serialized)
        {
            Local4 = WVPI (Arg0, Arg1, Arg2)
            Local0 = DerefOf (Local4 [Zero])
            Local3 = DerefOf (Local4 [One])
            If ((Local0 == Zero))
            {
                PVWS = 0x03
                GSWS (0x80F3)
                If ((PVWS == 0x03))
                {
                    Local2 = HVWA ()
                }
                ElseIf ((PVWS == 0x05))
                {
                    Local6 = HVWA ()
                    If ((0x00010000 != DerefOf (Local6 [Zero])))
                    {
                        Local2 = Local6
                    }
                }
                Else
                {
                    Local5 = Zero
                    While (((PVWS == 0x04) && (Local5 < 0x8000)))
                    {
                        Sleep (0x19)
                        PVWS = 0x03
                        GSWS (0x80F3)
                        Local5++
                    }
                }
            }

            Local1 = WVPO (Local3, Local2)
            If ((Local0 == Zero))
            {
                WVCM ()
            }

            Return (Local1)
        }

        Name (VEI1, Zero)
        Name (VED1, Zero)
        Name (VEI2, Zero)
        Name (VED2, Zero)
        Name (VEVI, Zero)
        Mutex (VEMX, 0x00)
        Method (_WED, 1, Serialized)  // _Wxx: Wake Event, xx=0x00-0xFF
        {
            Local0 = Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            CreateDWordField (Local0, Zero, EVID)
            CreateDWordField (Local0, 0x04, EVDA)
            EVID = VEI1 /* \_SB_.WMIV.VEI1 */
            EVDA = VED1 /* \_SB_.WMIV.VED1 */
            Acquire (VEMX, 0xFFFF)
            If ((VEI2 != Zero))
            {
                VEI1 = VEI2 /* \_SB_.WMIV.VEI2 */
                VED1 = VED2 /* \_SB_.WMIV.VED2 */
                VEI2 = Zero
                VED2 = Zero
                If ((VEVI == Zero))
                {
                    VEVI = One
                    Notify (WMIV, 0x81) // Information Change
                }
            }
            Else
            {
                VEI1 = Zero
                VED1 = Zero
            }

            Release (VEMX)
            Return (Local0)
        }

        Method (GVWE, 2, Serialized)
        {
            Acquire (VEMX, 0xFFFF)
            If ((VEI1 == Zero))
            {
                VEI1 = Arg0
                VED1 = Arg1
            }
            Else
            {
                VEI2 = Arg0
                VED2 = Arg1
            }

            Release (VEMX)
            Notify (WMIV, 0x81) // Information Change
        }
    }

    OperationRegion (HPCF, SystemMemory, 0xB82EE000, 0x0000005C)
    Field (HPCF, AnyAcc, Lock, Preserve)
    {
        SPPB,   8, 
        PPPB,   8, 
        ILUX,   8, 
        NFCS,   8, 
        USWE,   8, 
        EAX,    32, 
        EBX,    32, 
        ECX,    32, 
        EDX,    32, 
        REFS,   32, 
        SSCI,   8, 
        WOLE,   8, 
        WMIF,   8, 
        WMIT,   8, 
        WMIH,   8, 
        DFUE,   8, 
        TPLE,   8, 
        THHA,   16, 
        TPSA,   16, 
        SMAE,   8, 
        PFKB,   8, 
        CABS,   8, 
        IWRS,   8, 
        IMCM,   8, 
        CAIO,   16, 
        CAIR,   16, 
        CBIO,   16, 
        CBIR,   16, 
        CCIO,   16, 
        CCIR,   16, 
        CDIO,   16, 
        CDIR,   16, 
        LRES,   8, 
        OSTS,   8, 
        OSTP,   8, 
        SLPT,   8, 
        VPOM,   8, 
        XMEM,   64, 
        CPPD,   8, 
        HPID,   32, 
        WVPM,   8, 
        GPLT,   8, 
        GPLV,   32, 
        P2KW,   8, 
        P2MW,   8, 
        CDTE,   8, 
        PPBE,   8, 
        PPBM,   8, 
        PPBL,   8, 
        FDRS,   8, 
        APL3,   8, 
        PPAE,   8, 
        PPVB,   8, 
        PPFP,   8
    }

    OperationRegion (DBG0, SystemIO, 0x80, One)
    Field (DBG0, ByteAcc, NoLock, Preserve)
    {
        IO80,   8
    }

    OperationRegion (DBG1, SystemIO, 0x80, 0x02)
    Field (DBG1, WordAcc, NoLock, Preserve)
    {
        P80H,   16
    }

    OperationRegion (DBG2, SystemIO, 0x024E, 0x02)
    Field (DBG2, ByteAcc, NoLock, Preserve)
    {
        H24E,   8, 
        H24F,   8
    }

    OperationRegion (PSMI, SystemIO, 0xB0, 0x02)
    Field (PSMI, ByteAcc, NoLock, Preserve)
    {
        APMC,   8, 
        APMD,   8
    }

    OperationRegion (GNVS, SystemMemory, 0xB8378E98, 0x00000148)
    Field (GNVS, AnyAcc, NoLock, Preserve)
    {
        DAS1,   8, 
        DAS3,   8, 
        TNBH,   8, 
        TCP0,   8, 
        TCP1,   8, 
        ATNB,   8, 
        PCP0,   8, 
        PCP1,   8, 
        PWMN,   8, 
        LPTY,   8, 
        M92D,   8, 
        WKPM,   8, 
        ALST,   8, 
        AFUC,   8, 
        EXUS,   8, 
        AIRC,   8, 
        WLSH,   8, 
        TSSS,   8, 
        ODZC,   8, 
        PCBA,   32, 
        PCBL,   32, 
        NAPC,   8, 
        SMIF,   8, 
        PRM0,   8, 
        PRM1,   8, 
        BRTL,   8, 
        TLST,   8, 
        IGDS,   8, 
        LCDA,   16, 
        CSTE,   16, 
        NSTE,   16, 
        CADL,   16, 
        PADL,   16, 
        LIDS,   8, 
        PWRS,   8, 
        BVAL,   32, 
        ADDL,   16, 
        BCMD,   8, 
        SBFN,   8, 
        DID,    32, 
        INFO,   2048, 
        TOML,   8, 
        TOMH,   8, 
        CEBP,   8, 
        C0LS,   8, 
        C1LS,   8, 
        C0HS,   8, 
        C1HS,   8, 
        ROMS,   32, 
        MUXF,   8, 
        PDDN,   8
    }

    OperationRegion (ERMM, SystemMemory, 0xFED80000, 0x1000)
    Field (ERMM, AnyAcc, NoLock, Preserve)
    {
        Offset (0x200), 
            ,   1, 
        G01S,   1, 
        Offset (0x204), 
            ,   1, 
        G01E,   1, 
        Offset (0x208), 
            ,   1, 
        TR01,   1, 
        GT03,   1, 
        Offset (0x20C), 
            ,   1, 
        TL01,   1, 
        Offset (0x20D), 
            ,   7, 
        ACIR,   1, 
        Offset (0x288), 
            ,   1, 
        CLPS,   1, 
        Offset (0x299), 
            ,   7, 
        G15A,   1, 
        Offset (0x2B0), 
            ,   2, 
        SLPS,   2, 
        Offset (0x377), 
        EPNM,   1, 
        DPPF,   1, 
        Offset (0x3BB), 
            ,   6, 
        PWDE,   1, 
        Offset (0x3BE), 
            ,   5, 
        ALLS,   1, 
        Offset (0x3DF), 
        BLNK,   2, 
        Offset (0x3F0), 
        PHYD,   1, 
        Offset (0xE81), 
            ,   2, 
        ECES,   1
    }

    OperationRegion (GSMG, SystemMemory, 0xFED81500, 0x03FF)
    Field (GSMG, AnyAcc, NoLock, Preserve)
    {
        Offset (0x02), 
        GS00,   1, 
        Offset (0x0C), 
        Offset (0x0E), 
        GE03,   1, 
        Offset (0x44), 
        Offset (0x46), 
        GS17,   1, 
            ,   5, 
        GV17,   1, 
        GE17,   1, 
        Offset (0x6C), 
        Offset (0x6E), 
        GS27,   1, 
            ,   5, 
        GV27,   1, 
        GE27,   1, 
        Offset (0xA8), 
        Offset (0xAA), 
        GS42,   1, 
            ,   5, 
        GV42,   1, 
        GE42,   1, 
        Offset (0x100), 
        Offset (0x102), 
        GS64,   1, 
            ,   5, 
        GV64,   1, 
        GE64,   1, 
        Offset (0x104), 
        Offset (0x106), 
        GS65,   1, 
            ,   5, 
        GV65,   1, 
        GE65,   1, 
        Offset (0x108), 
        Offset (0x10A), 
        GS66,   1, 
            ,   5, 
        GV66,   1, 
        GE66,   1, 
        Offset (0x114), 
        Offset (0x116), 
        GS69,   1, 
            ,   5, 
        GV69,   1, 
        GE69,   1, 
        Offset (0x1B0), 
        Offset (0x1B2), 
        GS6C,   1
    }

    OperationRegion (PMRG, SystemIO, 0x0CD6, 0x02)
    Field (PMRG, ByteAcc, NoLock, Preserve)
    {
        PMRI,   8, 
        PMRD,   8
    }

    IndexField (PMRI, PMRD, ByteAcc, NoLock, Preserve)
    {
            ,   6, 
        HPEN,   1, 
        Offset (0x60), 
        P1EB,   16, 
        Offset (0xC8), 
            ,   2, 
        SPRE,   1, 
        TPDE,   1, 
        Offset (0xF0), 
            ,   3, 
        RSTU,   1
    }

    OperationRegion (P1E0, SystemIO, P1EB, 0x04)
    Field (P1E0, ByteAcc, NoLock, Preserve)
    {
            ,   14, 
        PEWS,   1, 
        WSTA,   1, 
            ,   14, 
        PEWD,   1
    }

    Scope (\)
    {
        OperationRegion (GSMM, SystemMemory, 0xFED80000, 0x1000)
        Field (GSMM, AnyAcc, NoLock, Preserve)
        {
            Offset (0x289), 
                ,   3, 
            APMS,   1, 
            Offset (0x29B), 
                ,   7, 
            APME,   1, 
            Offset (0x2B2), 
                ,   6, 
            SWSE,   2
        }

        Field (PSMI, WordAcc, Lock, Preserve)
        {
            SSWP,   16
        }

        Method (GSWS, 1, NotSerialized)
        {
            While (APMS)
            {
                Stall (One)
            }

            While ((APME != Zero))
            {
                APME = Zero
            }

            While ((SWSE != One))
            {
                SWSE = One
            }

            SSWP = Arg0
            Stall (0x32)
            While (APMS)
            {
                Stall (One)
            }
        }
    }

    Scope (_SB)
    {
        Mutex (MSMI, 0x00)
        Method (SSMI, 5, NotSerialized)
        {
            Acquire (MSMI, 0xFFFF)
            If (Arg4)
            {
                Acquire (_GL, 0xFFFF)
            }

            EAX = (Arg0 << 0x10)
            EBX = Arg1
            ECX = Arg2
            EDX = Arg3
            REFS = Zero
            GSWS (Arg0)
            Local0 = REFS /* \REFS */
            If (Arg4)
            {
                Release (_GL)
            }

            Release (MSMI)
            Return (Local0)
        }
    }

    Scope (_SB)
    {
        Method (DSPI, 0, NotSerialized)
        {
            INTA (0x1F)
            INTB (0x1F)
            INTC (0x1F)
            INTD (0x1F)
            Local1 = PD64 /* \PD64 */
            PIRE = 0x1F
            PIRF = 0x1F
            PIRG = 0x1F
            PIRH = 0x1F
        }

        Device (PWRB)
        {
            Name (_HID, EisaId ("PNP0C0C") /* Power Button Device */)  // _HID: Hardware ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0B)
            }
        }

        Device (PCI0)
        {
            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Name (_ADR, Zero)  // _ADR: Address
            Name (_UID, One)  // _UID: Unique ID
            Name (_BBN, Zero)  // _BBN: BIOS Bus Number
            Name (SUPP, Zero)
            Name (CTRL, Zero)
            Name (AMHP, Zero)
            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                CreateDWordField (Arg3, Zero, CDW1)
                CreateDWordField (Arg3, 0x04, CDW2)
                CreateDWordField (Arg3, 0x08, CDW3)
                If ((Arg0 == ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */))
                {
                    SUPP = CDW2 /* \_SB_.PCI0._OSC.CDW2 */
                    CTRL = CDW3 /* \_SB_.PCI0._OSC.CDW3 */
                    If (((SUPP & 0x16) != 0x16))
                    {
                        CTRL &= 0x1E
                    }

                    CTRL &= 0x1D
                    If ((Arg1 != One))
                    {
                        CDW1 |= 0x08
                    }

                    If ((CDW3 != CTRL))
                    {
                        CDW1 |= 0x10
                    }

                    CDW3 = CTRL /* \_SB_.PCI0.CTRL */
                    Return (Arg3)
                }
                Else
                {
                    CDW1 |= 0x04
                    Return (Arg3)
                }
            }

            Method (TOM, 0, NotSerialized)
            {
                Local0 = (TOML * 0x00010000)
                Local1 = (TOMH * 0x01000000)
                Local0 += Local1
                Return (Local0)
            }

            Name (CRES, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, SubDecode,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x00FF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0100,             // Length
                    0x00,, )
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0CF7,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0CF8,             // Length
                    0x00,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0D00,             // Range Minimum
                    0xFFFF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0xF300,             // Length
                    ,, , TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000A0000,         // Range Minimum
                    0x000BFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00020000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, Cacheable, ReadOnly,
                    0x00000000,         // Granularity
                    0x000C0000,         // Range Minimum
                    0x000C3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, Cacheable, ReadOnly,
                    0x00000000,         // Granularity
                    0x000C4000,         // Range Minimum
                    0x000C7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadOnly,
                    0x00000000,         // Granularity
                    0x000C8000,         // Range Minimum
                    0x000CBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadOnly,
                    0x00000000,         // Granularity
                    0x000CC000,         // Range Minimum
                    0x000CFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D0000,         // Range Minimum
                    0x000D3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D4000,         // Range Minimum
                    0x000D7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D8000,         // Range Minimum
                    0x000DBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000DC000,         // Range Minimum
                    0x000DFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E0000,         // Range Minimum
                    0x000E3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E4000,         // Range Minimum
                    0x000E7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E8000,         // Range Minimum
                    0x000EBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000EC000,         // Range Minimum
                    0x000EFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0xF7FFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0xF8000000,         // Length
                    0x00,, _Y00, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    0x00,, _Y01, AddressRangeMemory, TypeStatic)
                IO (Decode16,
                    0x0CF8,             // Range Minimum
                    0x0CF8,             // Range Maximum
                    0x01,               // Alignment
                    0x08,               // Length
                    )
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateDWordField (CRES, \_SB.PCI0._Y00._MIN, B1MN)  // _MIN: Minimum Base Address
                CreateDWordField (CRES, \_SB.PCI0._Y00._MAX, B1MX)  // _MAX: Maximum Base Address
                CreateDWordField (CRES, \_SB.PCI0._Y00._LEN, B1LN)  // _LEN: Length
                B1MN = TOM ()
                B1LN = ((B1MX - B1MN) + One)
                CreateDWordField (CRES, \_SB.PCI0._Y01._MIN, B2MN)  // _MIN: Minimum Base Address
                B2MN = 0xFC000000
                CreateDWordField (CRES, \_SB.PCI0._Y01._MAX, B2MX)  // _MAX: Maximum Base Address
                B2MX = 0xFEAFFFFF
                CreateDWordField (CRES, \_SB.PCI0._Y01._LEN, B2LN)  // _LEN: Length
                B2LN = ((B2MX - B2MN) + One)
                Return (CRES) /* \_SB_.PCI0.CRES */
            }

            Name (PR00, Package (0x0E)
            {
                Package (0x04)
                {
                    0x0001FFFF, 
                    Zero, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    One, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    0x02, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    Zero, 
                    LNKE, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    One, 
                    LNKF, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    0x02, 
                    LNKG, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    0x03, 
                    LNKH, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0008FFFF, 
                    Zero, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0008FFFF, 
                    One, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0008FFFF, 
                    0x02, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    Zero, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    One, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    0x02, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    0x03, 
                    LNKD, 
                    Zero
                }
            })
            Name (AR00, Package (0x0E)
            {
                Package (0x04)
                {
                    0x0001FFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    One, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    0x02, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    Zero, 
                    Zero, 
                    0x14
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    One, 
                    Zero, 
                    0x15
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    0x02, 
                    Zero, 
                    0x16
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    0x03, 
                    Zero, 
                    0x17
                }, 

                Package (0x04)
                {
                    0x0008FFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0008FFFF, 
                    One, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0008FFFF, 
                    0x02, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    One, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    0x02, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    0x03, 
                    Zero, 
                    0x13
                }
            })
            Name (NR00, Package (0x0E)
            {
                Package (0x04)
                {
                    0x0001FFFF, 
                    Zero, 
                    Zero, 
                    0x28
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    One, 
                    Zero, 
                    0x29
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    0x02, 
                    Zero, 
                    0x2A
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    Zero, 
                    Zero, 
                    0x24
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    One, 
                    Zero, 
                    0x25
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    0x02, 
                    Zero, 
                    0x26
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    0x03, 
                    Zero, 
                    0x27
                }, 

                Package (0x04)
                {
                    0x0008FFFF, 
                    Zero, 
                    Zero, 
                    0x20
                }, 

                Package (0x04)
                {
                    0x0008FFFF, 
                    One, 
                    Zero, 
                    0x21
                }, 

                Package (0x04)
                {
                    0x0008FFFF, 
                    One, 
                    Zero, 
                    0x22
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    One, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    0x02, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    0x03, 
                    Zero, 
                    0x13
                }
            })
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    If (\NAPC)
                    {
                        Return (NR00) /* \_SB_.PCI0.NR00 */
                    }
                    Else
                    {
                        Return (AR00) /* \_SB_.PCI0.AR00 */
                    }
                }
                Else
                {
                    Return (PR00) /* \_SB_.PCI0.PR00 */
                }
            }

            Device (GP11)
            {
                Name (_ADR, 0x00010001)  // _ADR: Address
                Name (PR00, Package (0x0E)
                {
                    Package (0x04)
                    {
                        0x0001FFFF, 
                        Zero, 
                        LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        One, 
                        LNKB, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        0x02, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        Zero, 
                        LNKE, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        One, 
                        LNKF, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x02, 
                        LNKG, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x03, 
                        LNKH, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        Zero, 
                        LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        One, 
                        LNKB, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        0x02, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        Zero, 
                        LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        One, 
                        LNKB, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x02, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x03, 
                        LNKD, 
                        Zero
                    }
                })
                Name (AR00, Package (0x0E)
                {
                    Package (0x04)
                    {
                        0x0001FFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        Zero, 
                        Zero, 
                        0x14
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        One, 
                        Zero, 
                        0x15
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x02, 
                        Zero, 
                        0x16
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x03, 
                        Zero, 
                        0x17
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x03, 
                        Zero, 
                        0x13
                    }
                })
                Name (NR00, Package (0x0E)
                {
                    Package (0x04)
                    {
                        0x0001FFFF, 
                        Zero, 
                        Zero, 
                        0x28
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        One, 
                        Zero, 
                        0x29
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        0x02, 
                        Zero, 
                        0x2A
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        Zero, 
                        Zero, 
                        0x24
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        One, 
                        Zero, 
                        0x25
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x02, 
                        Zero, 
                        0x26
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x03, 
                        Zero, 
                        0x27
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        Zero, 
                        Zero, 
                        0x20
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        One, 
                        Zero, 
                        0x21
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        One, 
                        Zero, 
                        0x22
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x03, 
                        Zero, 
                        0x13
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        If (\NAPC)
                        {
                            Return (NR00) /* \_SB_.PCI0.GP11.NR00 */
                        }
                        Else
                        {
                            Return (AR00) /* \_SB_.PCI0.GP11.AR00 */
                        }
                    }
                    Else
                    {
                        Return (PR00) /* \_SB_.PCI0.GP11.PR00 */
                    }
                }
            }

            Device (GP12)
            {
                Name (_ADR, 0x00010002)  // _ADR: Address
                Name (PR00, Package (0x0E)
                {
                    Package (0x04)
                    {
                        0x0001FFFF, 
                        Zero, 
                        LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        One, 
                        LNKB, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        0x02, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        Zero, 
                        LNKE, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        One, 
                        LNKF, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x02, 
                        LNKG, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x03, 
                        LNKH, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        Zero, 
                        LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        One, 
                        LNKB, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        0x02, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        Zero, 
                        LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        One, 
                        LNKB, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x02, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x03, 
                        LNKD, 
                        Zero
                    }
                })
                Name (AR00, Package (0x0E)
                {
                    Package (0x04)
                    {
                        0x0001FFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        Zero, 
                        Zero, 
                        0x14
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        One, 
                        Zero, 
                        0x15
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x02, 
                        Zero, 
                        0x16
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x03, 
                        Zero, 
                        0x17
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x03, 
                        Zero, 
                        0x13
                    }
                })
                Name (NR00, Package (0x0E)
                {
                    Package (0x04)
                    {
                        0x0001FFFF, 
                        Zero, 
                        Zero, 
                        0x28
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        One, 
                        Zero, 
                        0x29
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        0x02, 
                        Zero, 
                        0x2A
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        Zero, 
                        Zero, 
                        0x24
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        One, 
                        Zero, 
                        0x25
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x02, 
                        Zero, 
                        0x26
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x03, 
                        Zero, 
                        0x27
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        Zero, 
                        Zero, 
                        0x20
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        One, 
                        Zero, 
                        0x21
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        One, 
                        Zero, 
                        0x22
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x03, 
                        Zero, 
                        0x13
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        If (\NAPC)
                        {
                            Return (NR00) /* \_SB_.PCI0.GP12.NR00 */
                        }
                        Else
                        {
                            Return (AR00) /* \_SB_.PCI0.GP12.AR00 */
                        }
                    }
                    Else
                    {
                        Return (PR00) /* \_SB_.PCI0.GP12.PR00 */
                    }
                }
            }

            Device (GP13)
            {
                Name (_ADR, 0x00010003)  // _ADR: Address
                Name (PR00, Package (0x0E)
                {
                    Package (0x04)
                    {
                        0x0001FFFF, 
                        Zero, 
                        LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        One, 
                        LNKB, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        0x02, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        Zero, 
                        LNKE, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        One, 
                        LNKF, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x02, 
                        LNKG, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x03, 
                        LNKH, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        Zero, 
                        LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        One, 
                        LNKB, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        0x02, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        Zero, 
                        LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        One, 
                        LNKB, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x02, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x03, 
                        LNKD, 
                        Zero
                    }
                })
                Name (AR00, Package (0x0E)
                {
                    Package (0x04)
                    {
                        0x0001FFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        Zero, 
                        Zero, 
                        0x14
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        One, 
                        Zero, 
                        0x15
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x02, 
                        Zero, 
                        0x16
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x03, 
                        Zero, 
                        0x17
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x03, 
                        Zero, 
                        0x13
                    }
                })
                Name (NR00, Package (0x0E)
                {
                    Package (0x04)
                    {
                        0x0001FFFF, 
                        Zero, 
                        Zero, 
                        0x28
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        One, 
                        Zero, 
                        0x29
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        0x02, 
                        Zero, 
                        0x2A
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        Zero, 
                        Zero, 
                        0x24
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        One, 
                        Zero, 
                        0x25
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x02, 
                        Zero, 
                        0x26
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x03, 
                        Zero, 
                        0x27
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        Zero, 
                        Zero, 
                        0x20
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        One, 
                        Zero, 
                        0x21
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        One, 
                        Zero, 
                        0x22
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x03, 
                        Zero, 
                        0x13
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        If (\NAPC)
                        {
                            Return (NR00) /* \_SB_.PCI0.GP13.NR00 */
                        }
                        Else
                        {
                            Return (AR00) /* \_SB_.PCI0.GP13.AR00 */
                        }
                    }
                    Else
                    {
                        Return (PR00) /* \_SB_.PCI0.GP13.PR00 */
                    }
                }
            }

            Device (GP21)
            {
                Name (_ADR, 0x00020001)  // _ADR: Address
                Name (PR00, Package (0x0E)
                {
                    Package (0x04)
                    {
                        0x0001FFFF, 
                        Zero, 
                        LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        One, 
                        LNKB, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        0x02, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        Zero, 
                        LNKE, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        One, 
                        LNKF, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x02, 
                        LNKG, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x03, 
                        LNKH, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        Zero, 
                        LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        One, 
                        LNKB, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        0x02, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        Zero, 
                        LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        One, 
                        LNKB, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x02, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x03, 
                        LNKD, 
                        Zero
                    }
                })
                Name (AR00, Package (0x0E)
                {
                    Package (0x04)
                    {
                        0x0001FFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        Zero, 
                        Zero, 
                        0x14
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        One, 
                        Zero, 
                        0x15
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x02, 
                        Zero, 
                        0x16
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x03, 
                        Zero, 
                        0x17
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x03, 
                        Zero, 
                        0x13
                    }
                })
                Name (NR00, Package (0x0E)
                {
                    Package (0x04)
                    {
                        0x0001FFFF, 
                        Zero, 
                        Zero, 
                        0x28
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        One, 
                        Zero, 
                        0x29
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        0x02, 
                        Zero, 
                        0x2A
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        Zero, 
                        Zero, 
                        0x24
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        One, 
                        Zero, 
                        0x25
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x02, 
                        Zero, 
                        0x26
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x03, 
                        Zero, 
                        0x27
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        Zero, 
                        Zero, 
                        0x20
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        One, 
                        Zero, 
                        0x21
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        One, 
                        Zero, 
                        0x22
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x03, 
                        Zero, 
                        0x13
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        If (\NAPC)
                        {
                            Return (NR00) /* \_SB_.PCI0.GP21.NR00 */
                        }
                        Else
                        {
                            Return (AR00) /* \_SB_.PCI0.GP21.AR00 */
                        }
                    }
                    Else
                    {
                        Return (PR00) /* \_SB_.PCI0.GP21.PR00 */
                    }
                }
            }

            Device (GP22)
            {
                Name (_ADR, 0x00020002)  // _ADR: Address
                Name (PR00, Package (0x0E)
                {
                    Package (0x04)
                    {
                        0x0001FFFF, 
                        Zero, 
                        LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        One, 
                        LNKB, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        0x02, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        Zero, 
                        LNKE, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        One, 
                        LNKF, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x02, 
                        LNKG, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x03, 
                        LNKH, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        Zero, 
                        LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        One, 
                        LNKB, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        0x02, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        Zero, 
                        LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        One, 
                        LNKB, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x02, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x03, 
                        LNKD, 
                        Zero
                    }
                })
                Name (AR00, Package (0x0E)
                {
                    Package (0x04)
                    {
                        0x0001FFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        Zero, 
                        Zero, 
                        0x14
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        One, 
                        Zero, 
                        0x15
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x02, 
                        Zero, 
                        0x16
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x03, 
                        Zero, 
                        0x17
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x03, 
                        Zero, 
                        0x13
                    }
                })
                Name (NR00, Package (0x0E)
                {
                    Package (0x04)
                    {
                        0x0001FFFF, 
                        Zero, 
                        Zero, 
                        0x28
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        One, 
                        Zero, 
                        0x29
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        0x02, 
                        Zero, 
                        0x2A
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        Zero, 
                        Zero, 
                        0x24
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        One, 
                        Zero, 
                        0x25
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x02, 
                        Zero, 
                        0x26
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x03, 
                        Zero, 
                        0x27
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        Zero, 
                        Zero, 
                        0x20
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        One, 
                        Zero, 
                        0x21
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        One, 
                        Zero, 
                        0x22
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x03, 
                        Zero, 
                        0x13
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        If (\NAPC)
                        {
                            Return (NR00) /* \_SB_.PCI0.GP22.NR00 */
                        }
                        Else
                        {
                            Return (AR00) /* \_SB_.PCI0.GP22.AR00 */
                        }
                    }
                    Else
                    {
                        Return (PR00) /* \_SB_.PCI0.GP22.PR00 */
                    }
                }
            }

            Device (GP23)
            {
                Name (_ADR, 0x00020003)  // _ADR: Address
                Name (PR00, Package (0x0E)
                {
                    Package (0x04)
                    {
                        0x0001FFFF, 
                        Zero, 
                        LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        One, 
                        LNKB, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        0x02, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        Zero, 
                        LNKE, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        One, 
                        LNKF, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x02, 
                        LNKG, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x03, 
                        LNKH, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        Zero, 
                        LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        One, 
                        LNKB, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        0x02, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        Zero, 
                        LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        One, 
                        LNKB, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x02, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x03, 
                        LNKD, 
                        Zero
                    }
                })
                Name (AR00, Package (0x0E)
                {
                    Package (0x04)
                    {
                        0x0001FFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        Zero, 
                        Zero, 
                        0x14
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        One, 
                        Zero, 
                        0x15
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x02, 
                        Zero, 
                        0x16
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x03, 
                        Zero, 
                        0x17
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x03, 
                        Zero, 
                        0x13
                    }
                })
                Name (NR00, Package (0x0E)
                {
                    Package (0x04)
                    {
                        0x0001FFFF, 
                        Zero, 
                        Zero, 
                        0x28
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        One, 
                        Zero, 
                        0x29
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        0x02, 
                        Zero, 
                        0x2A
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        Zero, 
                        Zero, 
                        0x24
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        One, 
                        Zero, 
                        0x25
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x02, 
                        Zero, 
                        0x26
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x03, 
                        Zero, 
                        0x27
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        Zero, 
                        Zero, 
                        0x20
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        One, 
                        Zero, 
                        0x21
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        One, 
                        Zero, 
                        0x22
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x03, 
                        Zero, 
                        0x13
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        If (\NAPC)
                        {
                            Return (NR00) /* \_SB_.PCI0.GP23.NR00 */
                        }
                        Else
                        {
                            Return (AR00) /* \_SB_.PCI0.GP23.AR00 */
                        }
                    }
                    Else
                    {
                        Return (PR00) /* \_SB_.PCI0.GP23.PR00 */
                    }
                }
            }

            Device (GP24)
            {
                Name (_ADR, 0x00020004)  // _ADR: Address
                Name (PR00, Package (0x0E)
                {
                    Package (0x04)
                    {
                        0x0001FFFF, 
                        Zero, 
                        LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        One, 
                        LNKB, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        0x02, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        Zero, 
                        LNKE, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        One, 
                        LNKF, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x02, 
                        LNKG, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x03, 
                        LNKH, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        Zero, 
                        LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        One, 
                        LNKB, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        0x02, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        Zero, 
                        LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        One, 
                        LNKB, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x02, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x03, 
                        LNKD, 
                        Zero
                    }
                })
                Name (AR00, Package (0x0E)
                {
                    Package (0x04)
                    {
                        0x0001FFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        Zero, 
                        Zero, 
                        0x14
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        One, 
                        Zero, 
                        0x15
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x02, 
                        Zero, 
                        0x16
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x03, 
                        Zero, 
                        0x17
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x03, 
                        Zero, 
                        0x13
                    }
                })
                Name (NR00, Package (0x0E)
                {
                    Package (0x04)
                    {
                        0x0001FFFF, 
                        Zero, 
                        Zero, 
                        0x28
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        One, 
                        Zero, 
                        0x29
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        0x02, 
                        Zero, 
                        0x2A
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        Zero, 
                        Zero, 
                        0x24
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        One, 
                        Zero, 
                        0x25
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x02, 
                        Zero, 
                        0x26
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x03, 
                        Zero, 
                        0x27
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        Zero, 
                        Zero, 
                        0x20
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        One, 
                        Zero, 
                        0x21
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        One, 
                        Zero, 
                        0x22
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x03, 
                        Zero, 
                        0x13
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        If (\NAPC)
                        {
                            Return (NR00) /* \_SB_.PCI0.GP24.NR00 */
                        }
                        Else
                        {
                            Return (AR00) /* \_SB_.PCI0.GP24.AR00 */
                        }
                    }
                    Else
                    {
                        Return (PR00) /* \_SB_.PCI0.GP24.PR00 */
                    }
                }
            }

            Device (GP25)
            {
                Name (_ADR, 0x00020005)  // _ADR: Address
                Name (PR00, Package (0x0E)
                {
                    Package (0x04)
                    {
                        0x0001FFFF, 
                        Zero, 
                        LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        One, 
                        LNKB, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        0x02, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        Zero, 
                        LNKE, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        One, 
                        LNKF, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x02, 
                        LNKG, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x03, 
                        LNKH, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        Zero, 
                        LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        One, 
                        LNKB, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        0x02, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        Zero, 
                        LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        One, 
                        LNKB, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x02, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x03, 
                        LNKD, 
                        Zero
                    }
                })
                Name (AR00, Package (0x0E)
                {
                    Package (0x04)
                    {
                        0x0001FFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        Zero, 
                        Zero, 
                        0x14
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        One, 
                        Zero, 
                        0x15
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x02, 
                        Zero, 
                        0x16
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x03, 
                        Zero, 
                        0x17
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x03, 
                        Zero, 
                        0x13
                    }
                })
                Name (NR00, Package (0x0E)
                {
                    Package (0x04)
                    {
                        0x0001FFFF, 
                        Zero, 
                        Zero, 
                        0x28
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        One, 
                        Zero, 
                        0x29
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        0x02, 
                        Zero, 
                        0x2A
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        Zero, 
                        Zero, 
                        0x24
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        One, 
                        Zero, 
                        0x25
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x02, 
                        Zero, 
                        0x26
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x03, 
                        Zero, 
                        0x27
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        Zero, 
                        Zero, 
                        0x20
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        One, 
                        Zero, 
                        0x21
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        One, 
                        Zero, 
                        0x22
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x03, 
                        Zero, 
                        0x13
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        If (\NAPC)
                        {
                            Return (NR00) /* \_SB_.PCI0.GP25.NR00 */
                        }
                        Else
                        {
                            Return (AR00) /* \_SB_.PCI0.GP25.AR00 */
                        }
                    }
                    Else
                    {
                        Return (PR00) /* \_SB_.PCI0.GP25.PR00 */
                    }
                }
            }

            Device (GP26)
            {
                Name (_ADR, 0x00020006)  // _ADR: Address
                Name (PR00, Package (0x0E)
                {
                    Package (0x04)
                    {
                        0x0001FFFF, 
                        Zero, 
                        LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        One, 
                        LNKB, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        0x02, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        Zero, 
                        LNKE, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        One, 
                        LNKF, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x02, 
                        LNKG, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x03, 
                        LNKH, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        Zero, 
                        LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        One, 
                        LNKB, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        0x02, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        Zero, 
                        LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        One, 
                        LNKB, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x02, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x03, 
                        LNKD, 
                        Zero
                    }
                })
                Name (AR00, Package (0x0E)
                {
                    Package (0x04)
                    {
                        0x0001FFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        Zero, 
                        Zero, 
                        0x14
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        One, 
                        Zero, 
                        0x15
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x02, 
                        Zero, 
                        0x16
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x03, 
                        Zero, 
                        0x17
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x03, 
                        Zero, 
                        0x13
                    }
                })
                Name (NR00, Package (0x0E)
                {
                    Package (0x04)
                    {
                        0x0001FFFF, 
                        Zero, 
                        Zero, 
                        0x28
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        One, 
                        Zero, 
                        0x29
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        0x02, 
                        Zero, 
                        0x2A
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        Zero, 
                        Zero, 
                        0x24
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        One, 
                        Zero, 
                        0x25
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x02, 
                        Zero, 
                        0x26
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x03, 
                        Zero, 
                        0x27
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        Zero, 
                        Zero, 
                        0x20
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        One, 
                        Zero, 
                        0x21
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        One, 
                        Zero, 
                        0x22
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x03, 
                        Zero, 
                        0x13
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        If (\NAPC)
                        {
                            Return (NR00) /* \_SB_.PCI0.GP26.NR00 */
                        }
                        Else
                        {
                            Return (AR00) /* \_SB_.PCI0.GP26.AR00 */
                        }
                    }
                    Else
                    {
                        Return (PR00) /* \_SB_.PCI0.GP26.PR00 */
                    }
                }
            }

            Device (GP27)
            {
                Name (_ADR, 0x00020007)  // _ADR: Address
                Name (PR00, Package (0x0E)
                {
                    Package (0x04)
                    {
                        0x0001FFFF, 
                        Zero, 
                        LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        One, 
                        LNKB, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        0x02, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        Zero, 
                        LNKE, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        One, 
                        LNKF, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x02, 
                        LNKG, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x03, 
                        LNKH, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        Zero, 
                        LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        One, 
                        LNKB, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        0x02, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        Zero, 
                        LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        One, 
                        LNKB, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x02, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x03, 
                        LNKD, 
                        Zero
                    }
                })
                Name (AR00, Package (0x0E)
                {
                    Package (0x04)
                    {
                        0x0001FFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        Zero, 
                        Zero, 
                        0x14
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        One, 
                        Zero, 
                        0x15
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x02, 
                        Zero, 
                        0x16
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x03, 
                        Zero, 
                        0x17
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x03, 
                        Zero, 
                        0x13
                    }
                })
                Name (NR00, Package (0x0E)
                {
                    Package (0x04)
                    {
                        0x0001FFFF, 
                        Zero, 
                        Zero, 
                        0x28
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        One, 
                        Zero, 
                        0x29
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        0x02, 
                        Zero, 
                        0x2A
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        Zero, 
                        Zero, 
                        0x24
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        One, 
                        Zero, 
                        0x25
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x02, 
                        Zero, 
                        0x26
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x03, 
                        Zero, 
                        0x27
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        Zero, 
                        Zero, 
                        0x20
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        One, 
                        Zero, 
                        0x21
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        One, 
                        Zero, 
                        0x22
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x03, 
                        Zero, 
                        0x13
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        If (\NAPC)
                        {
                            Return (NR00) /* \_SB_.PCI0.GP27.NR00 */
                        }
                        Else
                        {
                            Return (AR00) /* \_SB_.PCI0.GP27.AR00 */
                        }
                    }
                    Else
                    {
                        Return (PR00) /* \_SB_.PCI0.GP27.PR00 */
                    }
                }
            }

            Name (PRWP, Package (0x02)
            {
                0x19, 
                0x04
            })
            Device (BUSA)
            {
                Name (_ADR, 0x00080001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (PRWP) /* \_SB_.PCI0.PRWP */
                }

                Device (GFX0)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0F)
                    }

                    OperationRegion (PCIG, PCI_Config, Zero, 0x50)
                    Field (PCIG, ByteAcc, NoLock, Preserve)
                    {
                        GVID,   16, 
                        Offset (0x2C), 
                        SVID,   32
                    }
                }

                Event (^^G027)
                Event (^^G009)
                Scope (GFX0)
                {
                    Method (ADR, 1, Serialized)
                    {
                        Local1 = DIDM ()
                        Local2 = SizeOf (Local1)
                        If ((Arg0 < Local2))
                        {
                            Local0 = DerefOf (Local1 [Arg0])
                            If ((GTOS () < 0x06))
                            {
                                Local0 &= 0xFFFF
                            }
                        }
                        Else
                        {
                            Local0 = Zero
                        }

                        Return (Local0)
                    }

                    Method (DCS, 1, Serialized)
                    {
                        Local1 = (One << Arg0)
                        Local0 = Zero
                        If ((G005 (Zero) & Local1))
                        {
                            Local0 = One
                            If ((G090 & Local1))
                            {
                                Local0 = 0x1D
                                If ((G08F & Local1))
                                {
                                    Local0 = 0x1F
                                }
                            }
                        }

                        Return (Local0)
                    }

                    Method (DGS, 1, Serialized)
                    {
                        Local2 = (One << Arg0)
                        Local0 = Zero
                        If ((G091 & Local2))
                        {
                            Local0 = One
                        }

                        Return (Local0)
                    }

                    Method (DSS, 2, Serialized)
                    {
                        Local1 = (One << Arg0)
                        Local0 = G092 /* \G092 */
                        If ((Arg1 & One))
                        {
                            Local0 |= Local1
                        }
                        Else
                        {
                            Local0 &= ~Local1
                        }

                        G092 = Local0
                        If ((Arg1 & 0x40000000))
                        {
                            G08F = Local0
                        }
                    }

                    Method (_DOS, 1, NotSerialized)  // _DOS: Disable Output Switching
                    {
                        Local0 = (G08E & 0xF8)
                        Local1 = (G08E & 0x83)
                        G08E = (Local0 | Arg0)
                        If (CondRefOf (^G007, Local2))
                        {
                            G007 (Arg0, Local1)
                        }
                    }

                    Device (LCD)
                    {
                        Method (_ADR, 0, Serialized)  // _ADR: Address
                        {
                            Return (ADR (Zero))
                        }

                        Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                        {
                            If (^^^^^LID._LID ())
                            {
                                Return (DCS (Zero))
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                        {
                            Return (DGS (Zero))
                        }

                        Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                        {
                            DSS (Zero, Arg0)
                        }

                        Method (_BCL, 0, Serialized)  // _BCL: Brightness Control Levels
                        {
                            If ((ILUX == One))
                            {
                                Return (BCL ())
                            }
                            ElseIf ((GTOS () <= 0x07))
                            {
                                Return (BCL ())
                            }
                            Else
                            {
                                Return (Package (0x67)
                                {
                                    0x50, 
                                    0x32, 
                                    Zero, 
                                    One, 
                                    0x02, 
                                    0x03, 
                                    0x04, 
                                    0x05, 
                                    0x06, 
                                    0x07, 
                                    0x08, 
                                    0x09, 
                                    0x0A, 
                                    0x0B, 
                                    0x0C, 
                                    0x0D, 
                                    0x0E, 
                                    0x0F, 
                                    0x10, 
                                    0x11, 
                                    0x12, 
                                    0x13, 
                                    0x14, 
                                    0x15, 
                                    0x16, 
                                    0x17, 
                                    0x18, 
                                    0x19, 
                                    0x1A, 
                                    0x1B, 
                                    0x1C, 
                                    0x1D, 
                                    0x1E, 
                                    0x1F, 
                                    0x20, 
                                    0x21, 
                                    0x22, 
                                    0x23, 
                                    0x24, 
                                    0x25, 
                                    0x26, 
                                    0x27, 
                                    0x28, 
                                    0x29, 
                                    0x2A, 
                                    0x2B, 
                                    0x2C, 
                                    0x2D, 
                                    0x2E, 
                                    0x2F, 
                                    0x30, 
                                    0x31, 
                                    0x32, 
                                    0x33, 
                                    0x34, 
                                    0x35, 
                                    0x36, 
                                    0x37, 
                                    0x38, 
                                    0x39, 
                                    0x3A, 
                                    0x3B, 
                                    0x3C, 
                                    0x3D, 
                                    0x3E, 
                                    0x3F, 
                                    0x40, 
                                    0x41, 
                                    0x42, 
                                    0x43, 
                                    0x45, 
                                    0x45, 
                                    0x46, 
                                    0x47, 
                                    0x48, 
                                    0x49, 
                                    0x4A, 
                                    0x4B, 
                                    0x4C, 
                                    0x4D, 
                                    0x4E, 
                                    0x4F, 
                                    0x50, 
                                    0x51, 
                                    0x52, 
                                    0x53, 
                                    0x54, 
                                    0x55, 
                                    0x56, 
                                    0x57, 
                                    0x58, 
                                    0x59, 
                                    0x5A, 
                                    0x5B, 
                                    0x5C, 
                                    0x5D, 
                                    0x5E, 
                                    0x5F, 
                                    0x60, 
                                    0x61, 
                                    0x62, 
                                    0x63, 
                                    0x64
                                })
                            }
                        }

                        Method (_BCM, 1, Serialized)  // _BCM: Brightness Control Method
                        {
                            Local0 = BCM (Arg0)
                            If (Local0)
                            {
                                If ((G045 == Zero))
                                {
                                    If (CondRefOf (\_SB.PCI0.BUSA.GFX0.G01F))
                                    {
                                        If ((G01F () == Zero)){}
                                    }
                                }
                                ElseIf (CondRefOf (\_SB.PCI0.BUSA.GFX0.G01E))
                                {
                                    If ((G01E () == Zero)){}
                                }

                                Signal (G027)
                            }
                        }

                        Method (_BQC, 0, Serialized)  // _BQC: Brightness Query Current
                        {
                            Return (BQC ())
                        }
                    }

                    Device (CRT)
                    {
                        Method (_ADR, 0, Serialized)  // _ADR: Address
                        {
                            Return (ADR (One))
                        }

                        Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                        {
                            Return (DCS (One))
                        }

                        Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                        {
                            Return (DGS (One))
                        }

                        Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                        {
                            DSS (One, Arg0)
                        }
                    }

                    Device (TV)
                    {
                        Method (_ADR, 0, Serialized)  // _ADR: Address
                        {
                            Return (ADR (0x02))
                        }

                        Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                        {
                            Return (DCS (0x02))
                        }

                        Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                        {
                            Return (DGS (0x02))
                        }

                        Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                        {
                            DSS (0x02, Arg0)
                        }
                    }

                    Device (DVI)
                    {
                        Method (_ADR, 0, Serialized)  // _ADR: Address
                        {
                            Return (ADR (0x03))
                        }

                        Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                        {
                            Return (DCS (0x03))
                        }

                        Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                        {
                            Return (DGS (0x03))
                        }

                        Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                        {
                            DSS (0x03, Arg0)
                        }
                    }

                    Device (DD04)
                    {
                        Method (_ADR, 0, Serialized)  // _ADR: Address
                        {
                            Return (ADR (0x04))
                        }

                        Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                        {
                            Return (DCS (0x04))
                        }

                        Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                        {
                            Return (DGS (0x04))
                        }

                        Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                        {
                            DSS (0x04, Arg0)
                        }
                    }

                    Device (DD05)
                    {
                        Method (_ADR, 0, Serialized)  // _ADR: Address
                        {
                            Return (ADR (0x05))
                        }

                        Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                        {
                            Return (DCS (0x05))
                        }

                        Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                        {
                            Return (DGS (0x05))
                        }

                        Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                        {
                            DSS (0x05, Arg0)
                        }
                    }

                    Device (DD06)
                    {
                        Method (_ADR, 0, Serialized)  // _ADR: Address
                        {
                            Return (ADR (0x06))
                        }

                        Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                        {
                            Return (DCS (0x06))
                        }

                        Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                        {
                            Return (DGS (0x06))
                        }

                        Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                        {
                            DSS (0x06, Arg0)
                        }
                    }

                    Device (DD07)
                    {
                        Method (_ADR, 0, Serialized)  // _ADR: Address
                        {
                            Return (ADR (0x07))
                        }

                        Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                        {
                            Return (DCS (0x07))
                        }

                        Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                        {
                            Return (DGS (0x07))
                        }

                        Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                        {
                            DSS (0x07, Arg0)
                        }
                    }

                    Device (DD08)
                    {
                        Method (_ADR, 0, Serialized)  // _ADR: Address
                        {
                            Return (ADR (0x08))
                        }

                        Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                        {
                            Return (DCS (0x08))
                        }

                        Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                        {
                            Return (DGS (0x08))
                        }

                        Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                        {
                            DSS (0x08, Arg0)
                        }
                    }

                    Name (_S3D, 0x03)  // _S3D: S3 Device State
                    Name (_S4D, 0x03)  // _S4D: S4 Device State
                    Name (INIM, Zero)
                    Name (DIDX, Package (0x09)
                    {
                        0x0110, 
                        0x0100, 
                        0x0200, 
                        0x0210, 
                        0x0220, 
                        0x0230, 
                        0x0240, 
                        0x0250, 
                        0x0260
                    })
                    Method (DIDM, 0, Serialized)
                    {
                        Return (DIDX) /* \_SB_.PCI0.BUSA.GFX0.DIDX */
                    }

                    Method (_DOD, 0, NotSerialized)  // _DOD: Display Output Devices
                    {
                        Name (DODS, Package (0x05)
                        {
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero
                        })
                        DODS [Zero] = (0x00010000 | DerefOf (DIDX [One]))
                        DODS [One] = (0x00010000 | DerefOf (DIDX [Zero]))
                        DODS [0x02] = (0x00010000 | DerefOf (DIDX [0x03]))
                        DODS [0x03] = (0x00010000 | DerefOf (DIDX [0x04]))
                        DODS [0x04] = (0x00010000 | DerefOf (DIDX [0x05]))
                        Return (DODS) /* \_SB_.PCI0.BUSA.GFX0._DOD.DODS */
                    }

                    Method (_INI, 0, NotSerialized)  // _INI: Initialize
                    {
                        INIM = One
                    }

                    Method (_REG, 2, NotSerialized)  // _REG: Region Availability
                    {
                        If ((INIM == One))
                        {
                            INIM = Zero
                        }
                    }

                    Name (PSBR, Zero)
                    Name (ABRI, 0xFF)
                    Name (VGSD, Zero)
                    Name (BRIN, Zero)
                    Name (ABRT, Buffer (0x62)
                    {
                        /* 0000 */  0x02, 0x0E, 0x04, 0x10, 0x06, 0x12, 0x08, 0x15,  // ........
                        /* 0008 */  0x0A, 0x17, 0x0C, 0x1A, 0x0E, 0x1D, 0x10, 0x20,  // ....... 
                        /* 0010 */  0x12, 0x23, 0x14, 0x26, 0x16, 0x29, 0x18, 0x2C,  // .#.&.).,
                        /* 0018 */  0x1A, 0x30, 0x1C, 0x34, 0x1E, 0x37, 0x20, 0x3B,  // .0.4.7 ;
                        /* 0020 */  0x22, 0x3E, 0x24, 0x43, 0x26, 0x47, 0x28, 0x4B,  // ">$C&G(K
                        /* 0028 */  0x2A, 0x50, 0x2C, 0x54, 0x2E, 0x58, 0x30, 0x5D,  // *P,T.X0]
                        /* 0030 */  0x32, 0x62, 0x34, 0x67, 0x36, 0x6C, 0x38, 0x71,  // 2b4g6l8q
                        /* 0038 */  0x3A, 0x76, 0x3C, 0x7B, 0x3E, 0x81, 0x40, 0x87,  // :v<{>.@.
                        /* 0040 */  0x42, 0x8C, 0x44, 0x92, 0x46, 0x98, 0x48, 0x9E,  // B.D.F.H.
                        /* 0048 */  0x4A, 0xA4, 0x4C, 0xAB, 0x4E, 0xB1, 0x50, 0xB7,  // J.L.N.P.
                        /* 0050 */  0x52, 0xBE, 0x54, 0xC5, 0x56, 0xCC, 0x58, 0xD3,  // R.T.V.X.
                        /* 0058 */  0x5A, 0xDA, 0x5C, 0xE1, 0x5E, 0xE8, 0x60, 0xF0,  // Z.\.^.`.
                        /* 0060 */  0x62, 0xF7                                       // b.
                    })
                    Name (DEVM, Package (0x09)
                    {
                        One, 
                        0x02, 
                        0x04, 
                        0x08, 
                        0x80, 
                        0x0200, 
                        0x0400, 
                        0x0800, 
                        0x1000
                    })
                    Method (ATIF, 2, Serialized)
                    {
                        G08D |= 0x03
                        Switch (Arg0)
                        {
                            Case (Zero)
                            {
                                Local0 = AFN0 ()
                            }
                            Case (One)
                            {
                                Local0 = AFN1 ()
                            }
                            Case (0x02)
                            {
                                Local0 = AFN2 ()
                            }
                            Case (0x03)
                            {
                                Local0 = AFN3 (Arg1)
                            }
                            Case (0x04)
                            {
                                Local0 = AFN4 ()
                            }
                            Case (0x0F)
                            {
                                Local0 = AF15 ()
                            }
                            Case (0x10)
                            {
                                Local0 = AF16 ()
                            }
                            Default
                            {
                                Local0 = Buffer (0x0100)
                                    {
                                         0x00, 0x00                                       // ..
                                    }
                            }

                        }

                        Return (Local0)
                    }

                    Method (AFN0, 0, Serialized)
                    {
                        Local0 = Buffer (0x0100){}
                        CreateWordField (Local0, Zero, SIZE)
                        CreateWordField (Local0, 0x02, IVER)
                        CreateDWordField (Local0, 0x04, SNMK)
                        CreateDWordField (Local0, 0x08, SFBV)
                        SIZE = 0x0C
                        IVER = One
                        SNMK = 0xF1
                        SFBV = 0xC00F
                        If (CondRefOf (\_SB.PCI0.G0BA))
                        {
                            Local1 = (SNMK & 0xFFFFFFFFFFFFEFFF)
                            SNMK = (Local1 | 0x1000)
                            G0BA ()
                        }

                        If (CondRefOf (\_SB.PCI0.HGME))
                        {
                            HGME (0x03)
                        }

                        If (CondRefOf (\_SB.PCI0.G0CA))
                        {
                            G0CA (Zero)
                        }

                        Return (Local0)
                    }

                    Method (AFN1, 0, Serialized)
                    {
                        Local0 = Buffer (0x0100){}
                        CreateWordField (Local0, Zero, SIZE)
                        CreateDWordField (Local0, 0x02, VFMK)
                        CreateDWordField (Local0, 0x06, FLAG)
                        CreateByteField (Local0, 0x0A, NOCC)
                        SIZE = 0x0B
                        VFMK = 0x0107
                        FLAG = 0x0106
                        NOCC = 0xD0
                        Return (Local0)
                    }

                    Method (AFN2, 0, Serialized)
                    {
                        Local0 = Buffer (0x0100){}
                        CreateWordField (Local0, Zero, SIZE)
                        CreateDWordField (Local0, 0x02, PBRO)
                        CreateByteField (Local0, 0x06, REVE)
                        CreateByteField (Local0, 0x07, TSGC)
                        CreateByteField (Local0, 0x08, TSSD)
                        CreateByteField (Local0, 0x09, FPGC)
                        CreateByteField (Local0, 0x0A, FPSD)
                        CreateByteField (Local0, 0x0B, SPSE)
                        CreateByteField (Local0, 0x0C, PBBL)
                        CreateByteField (Local0, 0x0D, PLTG)
                        CreateDWordField (Local0, 0x0E, PLVW)
                        SIZE = 0x12
                        PBRO = PSBR /* \_SB_.PCI0.BUSA.GFX0.PSBR */
                        PSBR = Zero
                        Local1 = 0x06
                        While ((Local1 < 0x12))
                        {
                            Local0 [Local1] = Zero
                            Local1++
                        }

                        If (((PBRO == Zero) && (GTOS () < 0x06)))
                        {
                            ABRI = G02B ()
                            PBRO = 0x80
                        }

                        If ((PBRO && 0x10))
                        {
                            Local2 = 0x02
                            If ((^^^LPCB.EC0.GACS () == One))
                            {
                                If ((^^^LPCB.EC0.GPID () == Zero))
                                {
                                    Local2 = One
                                }
                                Else
                                {
                                    Local2 = 0x03
                                }
                            }

                            SPSE = Local2
                        }

                        If ((PBRO && 0x80))
                        {
                            PBBL = ABRI /* \_SB_.PCI0.BUSA.GFX0.ABRI */
                        }

                        If ((PBRO && 0x1000))
                        {
                            If (CondRefOf (\_SB.PCI0.G0BB))
                            {
                                Local3 = G0BB ()
                                PLTG = DerefOf (Local3 [Zero])
                                PLVW = DerefOf (Local3 [One])
                            }
                        }

                        Return (Local0)
                    }

                    Method (AFN3, 1, Serialized)
                    {
                        CreateWordField (Arg0, Zero, SIZI)
                        CreateWordField (Arg0, 0x02, DISI)
                        CreateWordField (Arg0, 0x04, CDIS)
                        Local0 = Buffer (0x0100){}
                        CreateWordField (Local0, Zero, SIZE)
                        CreateDWordField (Local0, 0x02, DISP)
                        DISP = Zero
                        SIZE = 0x04
                        Switch (VGSD)
                        {
                            Case (One)
                            {
                                G090 = TOHP (CDIS)
                                G08F = TOHP (DISI)
                                DISP = DISI /* \_SB_.PCI0.BUSA.GFX0.AFN3.DISI */
                            }
                            Case (0x02)
                            {
                                DISP = TOAF (G091)
                                G08F = G091 /* \G091 */
                            }
                            Default
                            {
                                If ((DISI == One))
                                {
                                    DISP = (CDIS | One)
                                }
                                ElseIf ((DISI & One))
                                {
                                    DISP = (CDIS & 0xFFFFFFFFFFFFFFFE)
                                }
                                Else
                                {
                                    DISP = One
                                }

                                G08F = TOHP (DISI)
                                G091 = TOHP (DISP)
                            }

                        }

                        Signal (G009)
                        VGSD = Zero
                        If (BRIN)
                        {
                            G01E ()
                            BRIN = Zero
                        }

                        Return (Local0)
                    }

                    Method (AFN4, 0, Serialized)
                    {
                        Local0 = Buffer (0x0100){}
                        CreateWordField (Local0, Zero, SIZE)
                        CreateByteField (Local0, 0x02, LIDS)
                        SIZE = 0x03
                        If (^^^^LID._LID ())
                        {
                            LIDS = Zero
                        }
                        Else
                        {
                            LIDS = One
                        }

                        Return (Local0)
                    }

                    Method (AF15, 0, Serialized)
                    {
                        Local0 = Buffer (0x0100){}
                        CreateWordField (Local0, Zero, DNUM)
                        CreateWordField (Local0, 0x02, DSZE)
                        CreateDWordField (Local0, 0x04, FLG1)
                        CreateWordField (Local0, 0x08, BUS1)
                        CreateWordField (Local0, 0x0A, DEV1)
                        CreateDWordField (Local0, 0x0C, FLG2)
                        CreateWordField (Local0, 0x10, BUS2)
                        CreateWordField (Local0, 0x12, DEV2)
                        DNUM = 0x02
                        DSZE = 0x08
                        FLG1 = 0x04
                        BUS1 = Zero
                        DEV1 = One
                        FLG2 = 0x05
                        BUS2 = One
                        DEV2 = Zero
                        Return (Local0)
                    }

                    Method (AF16, 0, Serialized)
                    {
                        Local0 = Buffer (0x0100){}
                        Local7 = G084 /* \G084 */
                        Local1 = SizeOf (Local7)
                        Local3 = Zero
                        Local4 = Zero
                        While ((Local3 < Local1))
                        {
                            Local2 = DerefOf (Local7 [Local3])
                            If ((Local2 != Zero))
                            {
                                Local4++
                            }

                            Local3++
                        }

                        Divide (Local4, 0x02, Local3, Local2)
                        Local6 = DerefOf (Local7 [Local2])
                        Local1 = DerefOf (Local7 [Zero])
                        If (((Local6 - Local1) < 0x32))
                        {
                            Local4 = Zero
                        }

                        If ((Local4 != Zero))
                        {
                            Local5 = Buffer (0xC6){}
                        }
                        Else
                        {
                            Local5 = ABRT /* \_SB_.PCI0.BUSA.GFX0.ABRT */
                        }

                        Local1 = SizeOf (Local5)
                        CreateWordField (Local0, Zero, SIZE)
                        CreateWordField (Local0, 0x02, FLGS)
                        CreateByteField (Local0, 0x04, ERRC)
                        CreateByteField (Local0, 0x05, ACLV)
                        CreateByteField (Local0, 0x06, DCLV)
                        CreateByteField (Local0, 0x07, MIIS)
                        CreateByteField (Local0, 0x08, MAIS)
                        CreateByteField (Local0, 0x09, COUN)
                        Local2 = (0x0A + Local1)
                        SIZE = Local2
                        FLGS = Zero
                        ERRC = Zero
                        ACLV = 0x64
                        DCLV = 0x20
                        If ((Local4 != Zero))
                        {
                            MIIS = DerefOf (Local7 [Zero])
                            MAIS = DerefOf (Local7 [(Local4 - One)])
                        }
                        Else
                        {
                            MIIS = 0x0C
                            MAIS = 0xFF
                        }

                        Divide (Local1, 0x02, Local3, Local2)
                        COUN = Local2
                        If ((Local4 != Zero))
                        {
                            Local3 = ((Local6 - MIIS) / 0x32)
                            Local2 = Zero
                            While ((Local2 < 0x31))
                            {
                                Local5 [(Local2 * 0x02)] = (Local2 + One)
                                Local5 [((Local2 * 0x02) + One)] = (
                                    MIIS + (Local3 * (Local2 + One)))
                                Local2++
                            }

                            Local5 [(Local2 * 0x02)] = (Local2 + One)
                            Local5 [((Local2 * 0x02) + One)] = Local6
                            Local2++
                            Local3 = ((MAIS - Local6) / 0x32)
                            While ((Local2 < 0x63))
                            {
                                Local5 [(Local2 * 0x02)] = (Local2 + One)
                                Local5 [((Local2 * 0x02) + One)] = (
                                    Local6 + (Local3 * (Local2 - 0x31)))
                                Local2++
                            }
                        }

                        Local2 = Zero
                        While ((Local2 < Local1))
                        {
                            Local3 = (0x0A + Local2)
                            Local0 [Local3] = DerefOf (Local5 [Local2])
                            Local2++
                        }

                        Return (Local0)
                    }

                    Method (G031, 0, Serialized)
                    {
                        PSBR |= 0x20
                        Notify (^, 0xD0) // Hardware-Specific
                        Return (One)
                    }

                    Method (G02C, 0, Serialized)
                    {
                        PSBR |= One
                        Notify (^, 0xD0) // Hardware-Specific
                        Return (One)
                    }

                    Method (G02F, 0, Serialized)
                    {
                        Local0 = Zero
                    }

                    Method (G02E, 0, Serialized)
                    {
                        PSBR |= 0x10
                        Notify (^, 0xD0) // Hardware-Specific
                        Return (One)
                    }

                    Method (G01E, 0, Serialized)
                    {
                        ABRI = G02B ()
                        PSBR |= 0x80
                        Notify (^, 0xD0) // Hardware-Specific
                        Return (One)
                    }

                    Method (G0BC, 0, Serialized)
                    {
                        PSBR |= 0x1000
                        Notify (^, 0xD0) // Hardware-Specific
                        Return (One)
                    }

                    Method (G01A, 1, Serialized)
                    {
                        If (Arg0)
                        {
                            VGSD = One
                            Reset (G009)
                            G02C ()
                        }

                        Wait (G009, 0x0500)
                    }

                    Method (G01C, 0, Serialized)
                    {
                        VGSD = 0x02
                        G02C ()
                        Wait (G009, 0x0500)
                    }

                    Method (G002, 1, Serialized)
                    {
                        If ((Arg0 >= 0x03))
                        {
                            If (((G08E & 0x44) == Zero))
                            {
                                BRIN = One
                            }
                        }
                    }

                    Method (TOHP, 1, Serialized)
                    {
                        Local0 = Zero
                        Local1 = Arg0
                        Local2 = Zero
                        While (((Local0 < 0x09) && Local1))
                        {
                            Local3 = DerefOf (DEVM [Local0])
                            If ((Local1 & Local3))
                            {
                                Local4 = (One << Local0)
                                Local2 |= Local4
                            }

                            Local1 &= ~Local3
                            Local0++
                        }

                        Return (Local2)
                    }

                    Method (TOAF, 1, Serialized)
                    {
                        Local0 = Zero
                        Local1 = Arg0
                        Local2 = Zero
                        While (((Local0 < 0x09) && Local1))
                        {
                            Local3 = (One << Local0)
                            If ((Local1 & Local3))
                            {
                                Local4 = DerefOf (DEVM [Local0])
                                Local2 |= Local4
                            }

                            Local1 &= ~Local3
                            Local0++
                        }

                        Return (Local2)
                    }

                    Method (G030, 0, Serialized)
                    {
                        PSBR |= 0x0100
                        Notify (^, 0xD0) // Hardware-Specific
                        Return (One)
                    }

                    Scope (\_GPE)
                    {
                        Method (G00D, 3, Serialized)
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (One)
                                {
                                    If ((Arg0 & 0x80))
                                    {
                                        Notify (\_SB.PCI0.BUSA.GFX0.LCD, Arg0)
                                    }
                                    ElseIf (((G08E & 0x44) == Zero))
                                    {
                                        \_SB.PCI0.BUSA.GFX0.G01E ()
                                    }
                                }
                                Case (0x02)
                                {
                                    \_SB.PCI0.BUSA.GFX0.G005 (One)
                                    \_SB.PCI0.BUSA.GFX0.G031 ()
                                }
                                Case (0x03)
                                {
                                    \_SB.PCI0.BUSA.GFX0.G02F ()
                                }
                                Case (0x04)
                                {
                                    If (((G08E & 0x03) == Zero))
                                    {
                                        \_SB.PCI0.BUSA.GFX0.G02C ()
                                    }
                                }
                                Case (0x05)
                                {
                                    \_SB.PCI0.BUSA.GFX0.G02E ()
                                }
                                Case (0x06)
                                {
                                    If ((G08D & One))
                                    {
                                        \_SB.PCI0.BUSA.GFX0.G01C ()
                                    }
                                    Else
                                    {
                                        Notify (\_SB.PCI0.BUSA.GFX0, 0x80) // Status Change
                                    }
                                }
                                Case (0x07)
                                {
                                    \_SB.PCI0.BUSA.GFX0.G01A (Arg0)
                                }
                                Case (0x08)
                                {
                                    \_SB.PCI0.BUSA.GFX0.G002 (Arg0)
                                }
                                Case (0x0A)
                                {
                                    \_SB.ODGW (0xFF02)
                                    \_SB.PCI0.BUSA.GFX0.G030 ()
                                }

                            }

                            Return (Zero)
                        }
                    }

                    Scope (\_GPE)
                    {
                        Method (G001, 1, Serialized)
                        {
                            Local1 = One
                            If (Local1)
                            {
                                If (CondRefOf (\_GPE.G00D))
                                {
                                    Local1 = G00D (Arg0, Zero, One)
                                }
                            }
                        }

                        Method (G012, 0, Serialized)
                        {
                            Signal (\_SB.G009)
                            Local1 = One
                            If (Local1)
                            {
                                If (CondRefOf (\_GPE.G00D))
                                {
                                    Local1 = G00D (Zero, Zero, 0x04)
                                }
                            }
                        }

                        Method (G013, 0, Serialized)
                        {
                            Local1 = One
                            If (Local1)
                            {
                                If (CondRefOf (\_GPE.G00D))
                                {
                                    Local1 = G00D (Zero, Zero, 0x02)
                                }
                            }
                        }

                        Name (G00E, One)
                        Method (G014, 0, Serialized)
                        {
                            G00E = One
                            G06C = 0x77
                            Local1 = One
                            If (Local1)
                            {
                                If (CondRefOf (\_GPE.G00D))
                                {
                                    Local1 = G00D (Zero, Zero, 0x03)
                                }
                            }

                            Return (G00E) /* \_GPE.G00E */
                        }

                        Method (G015, 2, Serialized)
                        {
                            Local1 = One
                            If (Local1)
                            {
                                If (CondRefOf (\_GPE.G00D))
                                {
                                    Local1 = G00D (Arg0, Arg1, 0x05)
                                }
                            }
                        }

                        Method (G016, 0, Serialized)
                        {
                            Local1 = One
                            If (Local1)
                            {
                                If (CondRefOf (\_GPE.G00D))
                                {
                                    Local1 = G00D (Zero, Zero, 0x0A)
                                }
                            }
                        }
                    }

                    Scope (\_SB)
                    {
                        Method (G004, 1, Serialized)
                        {
                            If ((G08D & 0x04))
                            {
                                Return (0xFFFF)
                            }
                            Else
                            {
                                If (((G08E & 0x03) == Zero))
                                {
                                    G091 = Arg0
                                    Local1 = One
                                    If (Local1)
                                    {
                                        If (CondRefOf (\_GPE.G00D))
                                        {
                                            Local1 = \_GPE.G00D (Arg0, Zero, 0x06)
                                        }
                                    }
                                }

                                Return (Zero)
                            }

                            Return (Zero)
                        }

                        Method (G003, 1, Serialized)
                        {
                            If (((G08D & 0x04) && Arg0))
                            {
                                Return (0xFFFF)
                            }
                            Else
                            {
                                If ((G08D & One))
                                {
                                    If ((Arg0 == Zero))
                                    {
                                        Local0 = Wait (G009, 0x0500)
                                        If ((Local0 != Zero)){}
                                    }

                                    Local1 = One
                                    If (Local1)
                                    {
                                        If (CondRefOf (\_GPE.G00D))
                                        {
                                            Local1 = \_GPE.G00D (Arg0, Zero, 0x07)
                                        }
                                    }
                                }
                                ElseIf (Arg0)
                                {
                                    SSMI (0xEA74, 0x02, Zero, Zero, Zero)
                                }

                                Return (G090) /* \G090 */
                            }
                        }

                        Method (G002, 1, Serialized)
                        {
                            Local1 = One
                            If (Local1)
                            {
                                If (CondRefOf (\_GPE.G00D))
                                {
                                    Local1 = \_GPE.G00D (Arg0, Zero, 0x08)
                                }
                            }
                        }

                        Method (G09F, 0, NotSerialized)
                        {
                            Local1 = One
                            If (Local1)
                            {
                                If (CondRefOf (\_GPE.G00D))
                                {
                                    Local1 = \_GPE.G00D (Zero, Zero, 0x09)
                                }
                            }
                        }
                    }

                    Name (ATCB, Buffer (0x0100){})
                    Name (ATCC, Buffer (0x03){})
                    Method (ATCS, 2, Serialized)
                    {
                        If ((Arg0 == Zero))
                        {
                            Return (ATC0 ())
                        }

                        If ((Arg0 == One))
                        {
                            Return (ATC1 ())
                        }

                        If ((Arg0 == 0x02))
                        {
                            Return (ATC2 (Arg1))
                        }

                        If ((Arg0 == 0x03))
                        {
                            Return (ATC3 ())
                        }

                        If ((Arg0 == 0x04))
                        {
                            Return (ATC4 (Arg1))
                        }

                        If ((Arg0 == 0x06))
                        {
                            Return (ATC6 (Arg1))
                        }

                        If ((Arg0 == 0x07))
                        {
                            Return (ATC7 (Arg1))
                        }
                        Else
                        {
                            CreateWordField (ATCB, Zero, SSZE)
                            CreateWordField (ATCB, 0x02, VERN)
                            CreateDWordField (ATCB, 0x04, NMSK)
                            SSZE = Zero
                            VERN = Zero
                            NMSK = Zero
                            Return (ATCB) /* \_SB_.PCI0.BUSA.GFX0.ATCB */
                        }
                    }

                    Method (ATC0, 0, NotSerialized)
                    {
                        CreateWordField (ATCB, Zero, SSZE)
                        CreateWordField (ATCB, 0x02, VERN)
                        CreateDWordField (ATCB, 0x04, NMSK)
                        SSZE = 0x08
                        VERN = One
                        NMSK = 0x6F
                        Return (ATCB) /* \_SB_.PCI0.BUSA.GFX0.ATCB */
                    }

                    Method (ATC1, 0, NotSerialized)
                    {
                        CreateWordField (ATCB, Zero, SSZE)
                        CreateDWordField (ATCB, 0x02, VMSK)
                        CreateDWordField (ATCB, 0x06, FLGS)
                        SSZE = 0x0A
                        VMSK = One
                        FLGS = Zero
                        Return (ATCB) /* \_SB_.PCI0.BUSA.GFX0.ATCB */
                    }

                    Method (ATC2, 1, Serialized)
                    {
                        CreateField (Arg0, 0x10, 0x03, FUCC)
                        CreateField (Arg0, 0x13, 0x06, DEVV)
                        CreateByteField (Arg0, 0x03, BUSS)
                        CreateDWordField (Arg0, 0x04, VFMK)
                        CreateDWordField (Arg0, 0x06, FLAG)
                        CreateField (Arg0, 0x30, One, ADVC)
                        CreateField (Arg0, 0x31, One, WFCM)
                        CreateByteField (Arg0, 0x08, RQST)
                        CreateByteField (Arg0, 0x09, PFRQ)
                        CreateWordField (ATCB, Zero, SZZE)
                        CreateByteField (ATCB, 0x02, RETV)
                        SZZE = 0x03
                        RETV = One
                        ATCB = ALIB (0x02, Arg0)
                        Return (ATCB) /* \_SB_.PCI0.BUSA.GFX0.ATCB */
                    }

                    Method (ATC3, 0, Serialized)
                    {
                        CreateWordField (ATCB, Zero, SZZE)
                        CreateByteField (ATCB, 0x02, RETV)
                        CreateWordField (ATCC, Zero, SZZB)
                        CreateByteField (ATCC, 0x02, PSPP)
                        SZZE = 0x03
                        RETV = One
                        SZZB = 0x03
                        PSPP = One
                        ATCB = ALIB (0x03, ATCC)
                        Return (ATCB) /* \_SB_.PCI0.BUSA.GFX0.ATCB */
                    }

                    Method (ATC4, 1, Serialized)
                    {
                        CreateField (Arg0, 0x10, 0x03, FUCC)
                        CreateField (Arg0, 0x13, 0x06, DEVV)
                        CreateByteField (Arg0, 0x03, BUSS)
                        CreateByteField (Arg0, 0x04, NULN)
                        CreateWordField (ATCB, Zero, SZZE)
                        CreateByteField (ATCB, 0x02, NULM)
                        SZZE = 0x03
                        NULM = One
                        ATCB = ALIB (0x04, Arg0)
                        Return (ATCB) /* \_SB_.PCI0.BUSA.GFX0.ATCB */
                    }

                    Method (ATC6, 1, Serialized)
                    {
                        CreateWordField (ATCB, Zero, SZZE)
                        CreateDWordField (ATCB, 0x02, UMAZ)
                        SZZE = 0x06
                        UMAZ = M233 /* External reference */
                        Return (ATCB) /* \_SB_.PCI0.BUSA.GFX0.ATCB */
                    }

                    Method (ATC7, 1, Serialized)
                    {
                        If ((G065 != Zero))
                        {
                            GSWS (M235)
                        }

                        Return (ATCB) /* \_SB_.PCI0.BUSA.GFX0.ATCB */
                    }

                    OperationRegion (VIDR, PCI_Config, Zero, 0x02)
                    Field (VIDR, WordAcc, NoLock, Preserve)
                    {
                        G008,   16
                    }

                    Name (G006, 0xFF)
                    Method (G005, 1, Serialized)
                    {
                        If ((Arg0 && (G006 == 0xFF)))
                        {
                            Local0 = 0x07
                            If (DCKD ())
                            {
                                Local0 |= 0x08
                            }

                            G006 = Local0
                        }

                        Return (G006) /* \_SB_.PCI0.BUSA.GFX0.G006 */
                    }

                    Method (G007, 2, NotSerialized)
                    {
                        If ((Arg0 && Arg1)){}
                    }

                    Method (LCD._DDC, 1, Serialized)  // _DDC: Display Data Current
                    {
                        Return (HDDC (Arg0))
                    }
                }

                Device (PSP)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    OperationRegion (PSPX, PCI_Config, 0x20, 0x04)
                    Field (PSPX, AnyAcc, NoLock, Preserve)
                    {
                        PBR3,   32
                    }
                }

                Device (XHC0)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Local0 = Package (0x02)
                            {
                                Zero, 
                                Zero
                            }
                        Local0 [Zero] = 0x19
                        If ((USWE == One))
                        {
                            Local0 [One] = 0x03
                        }

                        Return (Local0)
                    }

                    Device (RHUB)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Device (HS01)
                        {
                            Name (_ADR, One)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One, 0x0A))
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (GPLD (One, One))
                            }
                        }

                        Device (HS02)
                        {
                            Name (_ADR, 0x02)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One, 0x03))
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (GPLD (One, 0x02))
                            }
                        }

                        Device (HS03)
                        {
                            Name (_ADR, 0x03)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One, 0xFF))
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (GPLD (Zero, 0x03))
                            }
                        }

                        Device (HS04)
                        {
                            Name (_ADR, 0x04)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One, 0xFF))
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (GPLD (Zero, 0x04))
                            }
                        }

                        Device (SS01)
                        {
                            Name (_ADR, 0x05)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One, 0x0A))
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (GPLD (One, One))
                            }
                        }

                        Device (SS02)
                        {
                            Name (_ADR, 0x06)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One, 0x03))
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (GPLD (One, 0x02))
                            }
                        }

                        Device (SS03)
                        {
                            Name (_ADR, 0x07)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (Zero, 0xFF))
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (GPLD (Zero, 0x03))
                            }
                        }

                        Device (SS04)
                        {
                            Name (_ADR, 0x08)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (Zero, 0xFF))
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (GPLD (Zero, 0x04))
                            }
                        }
                    }
                }

                Device (XHC1)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Local0 = Package (0x02)
                            {
                                Zero, 
                                Zero
                            }
                        Local0 [Zero] = 0x19
                        If ((USWE == One))
                        {
                            Local0 [One] = 0x03
                        }

                        Return (Local0)
                    }

                    Device (RHUB)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Device (HS01)
                        {
                            Name (_ADR, One)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (Zero, 0xFF))
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (GPLD (Zero, 0x05))
                            }
                        }

                        Device (HS02)
                        {
                            Name (_ADR, 0x02)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One, 0x03))
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (GPLD (One, 0x06))
                            }
                        }

                        Device (HS03)
                        {
                            Name (_ADR, 0x03)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One, 0x03))
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (GPLD (One, 0x07))
                            }
                        }

                        Device (HS04)
                        {
                            Name (_ADR, 0x04)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One, 0xFF))
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (GPLD (Zero, 0x08))
                            }

                            Device (CAM0)
                            {
                                Name (_ADR, 0x04)  // _ADR: Address
                                Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                                {
                                    ToPLD (
                                        PLD_Revision           = 0x2,
                                        PLD_IgnoreColor        = 0x1,
                                        PLD_Red                = 0x0,
                                        PLD_Green              = 0x0,
                                        PLD_Blue               = 0x0,
                                        PLD_Width              = 0x0,
                                        PLD_Height             = 0x0,
                                        PLD_UserVisible        = 0x0,
                                        PLD_Dock               = 0x0,
                                        PLD_Lid                = 0x1,
                                        PLD_Panel              = "FRONT",
                                        PLD_VerticalPosition   = "UPPER",
                                        PLD_HorizontalPosition = "CENTER",
                                        PLD_Shape              = "ROUND",
                                        PLD_GroupOrientation   = 0x0,
                                        PLD_GroupToken         = 0x0,
                                        PLD_GroupPosition      = 0x0,
                                        PLD_Bay                = 0x0,
                                        PLD_Ejectable          = 0x0,
                                        PLD_EjectRequired      = 0x0,
                                        PLD_CabinetNumber      = 0x0,
                                        PLD_CardCageNumber     = 0x0,
                                        PLD_Reference          = 0x0,
                                        PLD_Rotation           = 0x0,
                                        PLD_Order              = 0x0,
                                        PLD_VerticalOffset     = 0xC8,
                                        PLD_HorizontalOffset   = 0xA0)

                                })
                            }

                            Device (IRCM)
                            {
                                Name (_ADR, 0x06)  // _ADR: Address
                                Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                                {
                                    ToPLD (
                                        PLD_Revision           = 0x2,
                                        PLD_IgnoreColor        = 0x1,
                                        PLD_Red                = 0x0,
                                        PLD_Green              = 0x0,
                                        PLD_Blue               = 0x0,
                                        PLD_Width              = 0x0,
                                        PLD_Height             = 0x0,
                                        PLD_UserVisible        = 0x0,
                                        PLD_Dock               = 0x0,
                                        PLD_Lid                = 0x1,
                                        PLD_Panel              = "FRONT",
                                        PLD_VerticalPosition   = "UPPER",
                                        PLD_HorizontalPosition = "CENTER",
                                        PLD_Shape              = "ROUND",
                                        PLD_GroupOrientation   = 0x0,
                                        PLD_GroupToken         = 0x0,
                                        PLD_GroupPosition      = 0x0,
                                        PLD_Bay                = 0x0,
                                        PLD_Ejectable          = 0x0,
                                        PLD_EjectRequired      = 0x0,
                                        PLD_CabinetNumber      = 0x0,
                                        PLD_CardCageNumber     = 0x0,
                                        PLD_Reference          = 0x0,
                                        PLD_Rotation           = 0x0,
                                        PLD_Order              = 0x0,
                                        PLD_VerticalOffset     = 0xC8,
                                        PLD_HorizontalOffset   = 0xA0)

                                })
                            }
                        }

                        Device (SS01)
                        {
                            Name (_ADR, 0x05)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (Zero, 0xFF))
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (GPLD (Zero, 0x05))
                            }
                        }

                        Device (SS02)
                        {
                            Name (_ADR, 0x06)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One, 0x03))
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (GPLD (One, 0x06))
                            }
                        }

                        Device (SS03)
                        {
                            Name (_ADR, 0x07)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (Zero, 0xFF))
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (GPLD (Zero, 0x07))
                            }
                        }

                        Device (SS04)
                        {
                            Name (_ADR, 0x08)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (Zero, 0xFF))
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (GPLD (Zero, 0x08))
                            }
                        }
                    }
                }

                Device (ACP)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_WOV, 0, NotSerialized)
                    {
                        Return (Zero)
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0F)
                    }
                }

                Device (HDEF)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Name (_STA, 0x0F)  // _STA: Status
                    Name (ASTA, Zero)
                    Name (ASTI, Zero)
                    PowerResource (APPR, 0x00, 0x0000)
                    {
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (ASTA) /* \_SB_.PCI0.BUSA.HDEF.ASTA */
                        }

                        Method (_ON, 0, NotSerialized)  // _ON_: Power On
                        {
                            ASTA = One
                        }

                        Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                        {
                            ASTA = Zero
                        }
                    }

                    Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                    {
                        APPR
                    })
                }

                Device (MP2C)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                }

                Name (PR17, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        LNKG, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        LNKH, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        LNKE, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        LNKF, 
                        Zero
                    }
                })
                Name (AR17, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x16
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x17
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x14
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x15
                    }
                })
                Name (NR17, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x26
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x27
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x24
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x25
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        If (\NAPC)
                        {
                            Return (NR17) /* \_SB_.PCI0.BUSA.NR17 */
                        }
                        Else
                        {
                            Return (AR17) /* \_SB_.PCI0.BUSA.AR17 */
                        }
                    }
                    Else
                    {
                        Return (PR17) /* \_SB_.PCI0.BUSA.PR17 */
                    }
                }
            }

            Device (BUSB)
            {
                Name (_ADR, 0x00080002)  // _ADR: Address
                Device (SATA)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Device (PRT0)
                    {
                        Name (_ADR, 0xFFFF)  // _ADR: Address
                        Name (IDAS, 0xFF)
                        Name (IDDC, 0xFF)
                        Method (_SDD, 1, Serialized)  // _SDD: Set Device Data
                        {
                            CreateByteField (Arg0, 0x0100, BFAS)
                            ToInteger (BFAS, IDAS) /* \_SB_.PCI0.BUSB.SATA.PRT0.IDAS */
                            CreateByteField (Arg0, 0xA7, BFDC)
                            ToInteger (BFDC, IDDC) /* \_SB_.PCI0.BUSB.SATA.PRT0.IDDC */
                            Return (Zero)
                        }

                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            If ((((IDAS & One) == One) && ((IDDC & 0x08
                                ) == 0x08)))
                            {
                                Return (Buffer (0x0E)
                                {
                                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xF5, 0xC1,  // ........
                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xE0, 0xB1               // ......
                                })
                            }

                            If (((IDAS & One) == One))
                            {
                                Return (Buffer (0x07)
                                {
                                     0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xF5         // .......
                                })
                            }

                            If (((IDDC & 0x08) == 0x08))
                            {
                                Return (Buffer (0x07)
                                {
                                     0xC1, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xB1         // .......
                                })
                            }

                            Return (Buffer (0x07)
                            {
                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00         // .......
                            })
                        }
                    }

                    Device (PRT1)
                    {
                        Name (_ADR, 0x0001FFFF)  // _ADR: Address
                        Name (IDAS, 0xFF)
                        Name (IDDC, 0xFF)
                        Method (_SDD, 1, Serialized)  // _SDD: Set Device Data
                        {
                            CreateByteField (Arg0, 0x0100, BFAS)
                            ToInteger (BFAS, IDAS) /* \_SB_.PCI0.BUSB.SATA.PRT1.IDAS */
                            CreateByteField (Arg0, 0xA7, BFDC)
                            ToInteger (BFDC, IDDC) /* \_SB_.PCI0.BUSB.SATA.PRT1.IDDC */
                            Return (Zero)
                        }

                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            If ((((IDAS & One) == One) && ((IDDC & 0x08
                                ) == 0x08)))
                            {
                                Return (Buffer (0x0E)
                                {
                                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xF5, 0xC1,  // ........
                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xE0, 0xB1               // ......
                                })
                            }

                            If (((IDAS & One) == One))
                            {
                                Return (Buffer (0x07)
                                {
                                     0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xF5         // .......
                                })
                            }

                            If (((IDDC & 0x08) == 0x08))
                            {
                                Return (Buffer (0x07)
                                {
                                     0xC1, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xB1         // .......
                                })
                            }

                            Return (Buffer (0x07)
                            {
                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00         // .......
                            })
                        }
                    }
                }

                Name (PR18, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        LNKD, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        LNKB, 
                        Zero
                    }
                })
                Name (AR18, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x13
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x11
                    }
                })
                Name (NR18, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x22
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x23
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x20
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x21
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        If (\NAPC)
                        {
                            Return (NR18) /* \_SB_.PCI0.BUSB.NR18 */
                        }
                        Else
                        {
                            Return (AR18) /* \_SB_.PCI0.BUSB.AR18 */
                        }
                    }
                    Else
                    {
                        Return (PR18) /* \_SB_.PCI0.BUSB.PR18 */
                    }
                }
            }

            Device (LPCB)
            {
                Name (_ADR, 0x00140003)  // _ADR: Address
                Mutex (PSMX, 0x00)
                Device (EC0)
                {
                    Name (_HID, EisaId ("PNP0C09") /* Embedded Controller Device */)  // _HID: Hardware ID
                    Name (_UID, One)  // _UID: Unique ID
                    Name (_GPE, 0x03)  // _GPE: General Purpose Events
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0F)
                    }

                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0062,             // Range Minimum
                            0x0062,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0066,             // Range Minimum
                            0x0066,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                    })
                    Mutex (ECMX, 0x00)
                    Name (ECRG, Zero)
                    Name (HSWK, Zero)
                    OperationRegion (ERAM, EmbeddedControl, Zero, 0xFF)
                    Field (ERAM, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x1D), 
                        INDI,   8, 
                        Offset (0x20), 
                        DMEE,   8, 
                        Offset (0xF5), 
                        VBPS,   8
                    }

                    Method (GBNT, 2, Serialized)
                    {
                        Local0 = (One << Arg1)
                        If (((Arg0 & Local0) == Local0))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Method (ECRI, 0, Serialized)
                    {
                        Acquire (ECMX, 0xFFFF)
                        CRZN = One
                        PHTP = 0x63
                        Release (ECMX)
                        OST = GTOS ()
                        PWUP (0x07, 0xFF)
                        Local0 = GBAP ()
                        ITLB ()
                        SBTN (Local0, 0x81)
                        PRIT ()
                    }

                    Method (_REG, 2, NotSerialized)  // _REG: Region Availability
                    {
                        If ((Arg0 == 0x03))
                        {
                            ECRG = Arg1
                            If ((Arg1 == One))
                            {
                                ECRI ()
                            }
                        }
                    }

                    OperationRegion (ECRM, EmbeddedControl, Zero, 0xFF)
                    Field (ECRM, ByteAcc, NoLock, Preserve)
                    {
                        PMCD,   32, 
                        S0FL,   8, 
                        SXF0,   8, 
                        SXF1,   8, 
                        CPWR,   16, 
                        CVLT,   16, 
                        CCUR,   16, 
                        DIDX,   8, 
                        CIDX,   8, 
                        PMCC,   8, 
                        PMEP,   8, 
                        Offset (0x22), 
                        CRZN,   8, 
                        THTA,   8, 
                        HYST,   8, 
                        CRIT,   8, 
                        TEMP,   8, 
                        TENA,   8, 
                        KBBL,   8, 
                        TOAD,   8, 
                        PHTP,   8, 
                        THEM,   8, 
                        TMPO,   8, 
                        AFAN,   8, 
                        FRDC,   8, 
                        FTGC,   8, 
                        PLTP,   8, 
                        Offset (0x32), 
                        DTMP,   8, 
                        Offset (0x35), 
                        FR2C,   8, 
                        FT2C,   8, 
                        BCVD,   8, 
                        Offset (0x3F), 
                        SNMD,   8, 
                        ABDI,   8, 
                        ABAD,   8, 
                        ABIX,   8, 
                        ABDA,   8, 
                        ABST,   8, 
                        PORI,   8, 
                        Offset (0x4C), 
                        PSSB,   8, 
                        Offset (0x4E), 
                        SLID,   8, 
                        SLDT,   8, 
                        Offset (0x5E), 
                        PPCM,   8, 
                        PPDS,   8, 
                        UCHC,   8, 
                        UCHS,   8, 
                        UCDB,   8, 
                        UCCS,   8, 
                        UCPN,   8, 
                        Offset (0x70), 
                        WKTR,   16, 
                        S5TR,   16, 
                        AS4F,   8, 
                        Offset (0x78), 
                            ,   7, 
                        BCML,   1, 
                        BRIM,   1, 
                        CCFG,   1, 
                            ,   1, 
                            ,   1, 
                        EXTP,   1, 
                        BKDT,   1, 
                        BOTP,   1, 
                        Offset (0x7B), 
                        LMBC,   1, 
                        PPUI,   1, 
                        Offset (0x80), 
                        ESID,   8, 
                            ,   4, 
                        SLPT,   4, 
                        FNSW,   1, 
                        SFNC,   1, 
                        ACPI,   1, 
                            ,   1, 
                            ,   1, 
                            ,   1, 
                            ,   1, 
                        DETF,   1, 
                        LIDS,   1, 
                        TBLT,   1, 
                            ,   1, 
                        LIDN,   1, 
                        TBTA,   1, 
                            ,   1, 
                            ,   1, 
                        Offset (0x84), 
                        ADP,    1, 
                        ADID,   2, 
                        LCTV,   1, 
                        BATP,   4, 
                        BPU,    1, 
                        Offset (0x86), 
                        BSEL,   4, 
                        Offset (0x87), 
                        LB1,    8, 
                        LB2,    8, 
                        BDC,    16, 
                        Offset (0x8D), 
                        BFC,    16, 
                        BRTE,   16, 
                        BTC,    1, 
                        Offset (0x92), 
                        BME,    16, 
                        BDN,    8, 
                        BDV,    16, 
                        BCV1,   16, 
                        BST,    4, 
                        Offset (0x9B), 
                        BATE,   16, 
                        BPR,    16, 
                        BCR,    16, 
                        BRC,    16, 
                        BCC,    16, 
                        BPV,    16, 
                        BCV2,   16, 
                        BCV3,   16, 
                        BCV4,   16, 
                        BCW,    16, 
                        BATF,   16, 
                        BCL,    16, 
                        MAXC,   16, 
                        BCG1,   8, 
                        BT1I,   1, 
                        BT2I,   1, 
                            ,   2, 
                        BATN,   4, 
                        BSTS,   16, 
                        BCG2,   8, 
                        Offset (0xBD), 
                        BMO,    8, 
                        Offset (0xBF), 
                        BRCV,   8, 
                        Offset (0xC1), 
                        BIF,    8, 
                        BRCC,   8, 
                        Offset (0xC4), 
                        CPSN,   8, 
                        SCPS,   8, 
                        Offset (0xC7), 
                        MXCG,   8, 
                        MNCG,   8, 
                        BSN,    16, 
                        BDAT,   16, 
                        BMF,    8, 
                        Offset (0xCF), 
                        CTLB,   8, 
                        Offset (0xD1), 
                        BTY,    8, 
                        Offset (0xD5), 
                        MFAC,   8, 
                        CFAN,   8, 
                        PFAN,   8, 
                        OCPS,   8, 
                        OCPR,   8, 
                        OCPE,   8, 
                        TMP1,   8, 
                        TMP2,   8, 
                        NABT,   4, 
                        BCM,    4, 
                        STTI,   8, 
                        STTD,   8, 
                        CBT,    16, 
                        Offset (0xE3), 
                        OST,    4, 
                        Offset (0xE4), 
                        RWTM,   8, 
                        TPTE,   1, 
                        TBBN,   1, 
                            ,   1, 
                        FCDE,   1, 
                            ,   1, 
                        TP,     1, 
                        Offset (0xE6), 
                        SHK,    8, 
                        AUDS,   1, 
                        SPKR,   1, 
                        Offset (0xE8), 
                        PPDT,   8, 
                        Offset (0xEA), 
                            ,   2, 
                        WWP,    1, 
                        WLP,    1, 
                            ,   1, 
                        WWS3,   1, 
                        WLS3,   1, 
                        Offset (0xEC), 
                            ,   4, 
                        PTEN,   1, 
                        ERWB,   1, 
                            ,   1, 
                        Offset (0xED), 
                        Offset (0xEF), 
                        INCH,   2, 
                        IDIS,   2, 
                        INAC,   1, 
                        Offset (0xF3), 
                        COL1,   3, 
                            ,   2, 
                        LDCD,   3, 
                        LEDS,   2, 
                        LEDF,   6, 
                        Offset (0xF6), 
                        AAPI,   8, 
                        ACSE,   8, 
                        ACIX,   8, 
                        ACPR,   16, 
                        Offset (0xFD), 
                        Offset (0xFF)
                    }

                    OperationRegion (SSRM, EmbeddedControl, 0x50, 0x0A)
                    Field (SSRM, ByteAcc, NoLock, Preserve)
                    {
                        FBCM,   8, 
                        FBGI,   8, 
                        FBAE,   8, 
                        FBCB,   8, 
                        FBW1,   8, 
                        FBW2,   8, 
                        Offset (0x07), 
                        FBID,   8, 
                        FUAE,   8, 
                        FRPS,   8
                    }

                    Method (_Q01, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        ^^^^WMIV.GVWE (0x00020002, Zero)
                    }

                    Method (_Q02, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        ^^^^WMIV.GVWE (0x00020002, 0x02)
                    }

                    Method (_Q10, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        ^^^^WMIV.GVWE (0x00020002, One)
                    }

                    Method (_Q11, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        ^^^^WMIV.GVWE (0x00020002, 0x03)
                    }

                    Method (_Q12, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        ^^^^WMIV.GVWE (0x00020002, 0x04)
                    }

                    Method (_Q13, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        ^^^^WMIV.GVWE (0x00020002, 0x05)
                    }

                    Method (_INI, 0, NotSerialized)  // _INI: Initialize
                    {
                    }

                    OperationRegion (MAIO, SystemMemory, SMHO, 0xFF)
                    Field (MAIO, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x0A), 
                            ,   7, 
                        CLID,   1, 
                        Offset (0x95), 
                        PWM0,   8, 
                        Offset (0x9D), 
                        PWMC,   8
                    }

                    Method (KFCL, 2, NotSerialized)
                    {
                        Acquire (ECMX, 0xFFFF)
                        If (ECRG)
                        {
                            MFAC = Arg1
                            If (((Arg0 >= Zero) && (Arg0 <= 0x64)))
                            {
                                CFAN = Arg0
                            }
                        }

                        Release (ECMX)
                    }

                    Method (KSFS, 1, NotSerialized)
                    {
                        Acquire (ECMX, 0xFFFF)
                        If (ECRG)
                        {
                            CFAN = Arg0
                        }

                        Release (ECMX)
                    }

                    Method (KGFS, 0, NotSerialized)
                    {
                        Local0 = 0x14
                        Acquire (ECMX, 0xFFFF)
                        If (ECRG)
                        {
                            Local0 = CFAN /* \_SB_.PCI0.LPCB.EC0_.CFAN */
                        }

                        Release (ECMX)
                        Return (Local0)
                    }

                    Method (KRFS, 0, NotSerialized)
                    {
                        Local0 = 0x1E
                        Acquire (ECMX, 0xFFFF)
                        If (ECRG)
                        {
                            Local0 = PFAN /* \_SB_.PCI0.LPCB.EC0_.PFAN */
                        }

                        Release (ECMX)
                        Return (Local0)
                    }

                    Method (SFSD, 1, Serialized)
                    {
                        Local1 = (Arg0 * 0x40)
                        Local0 = (Local1 / 0x64)
                        Local0 = (0x40 - Local0)
                        Local1 = (PWM0 & 0x80)
                        If ((Local0 == 0x40))
                        {
                            Local1 |= One
                        }
                        Else
                        {
                            Local0 <<= One
                            Local1 |= Local0
                        }

                        PWM0 = Local1
                    }

                    Method (GFSD, 0, Serialized)
                    {
                        Local0 = (PWM0 & 0x7F)
                        If ((Local0 & One))
                        {
                            Local1 = Zero
                        }
                        Else
                        {
                            Local0 >>= One
                            Local0 = (0x40 - Local0)
                            Local0 *= 0x64
                            Local1 = ((Local0 + 0x20) / 0x40)
                            Local1++
                        }

                        Return (Local1)
                    }

                    Method (GSHK, 0, Serialized)
                    {
                        Acquire (ECMX, 0xFFFF)
                        If (ECRG)
                        {
                            Local0 = SHK /* \_SB_.PCI0.LPCB.EC0_.SHK_ */
                        }

                        Release (ECMX)
                        Return (Local0)
                    }

                    Method (SSHK, 1, Serialized)
                    {
                        Acquire (ECMX, 0xFFFF)
                        If (ECRG)
                        {
                            Debug = Arg0
                            SHK = Arg0
                        }

                        Release (ECMX)
                    }

                    Method (SAST, 1, Serialized)
                    {
                        Local0 = Zero
                        Acquire (ECMX, 0xFFFF)
                        If (ECRG)
                        {
                            AUDS = Arg0
                            Local0 = One
                        }

                        Release (ECMX)
                        Return (Local0)
                    }

                    Method (HSPW, 2, Serialized)
                    {
                        If ((Arg0 && Arg1)){}
                    }

                    Method (UHSW, 0, Serialized)
                    {
                    }

                    Method (CHSW, 1, Serialized)
                    {
                        If (Arg0){}
                        Local1 = Zero
                        Return (Local1)
                    }

                    Method (HWLP, 1, NotSerialized)
                    {
                        Acquire (ECMX, 0xFFFF)
                        If (ECRG)
                        {
                            WLP = (Arg0 ^ Zero)
                        }

                        Release (ECMX)
                    }

                    Method (HWWP, 1, Serialized)
                    {
                        If (Arg0){}
                        Acquire (ECMX, 0xFFFF)
                        If (ECRG){}
                        Release (ECMX)
                    }

                    Method (ECAB, 4, Serialized)
                    {
                        Local0 = 0xECAB
                        Acquire (ECMX, 0xFFFF)
                        If (ECRG)
                        {
                            Local0 = 0xFF00
                            ABDI = Arg0
                            ABAD = Arg1
                            ABIX = Arg2
                            If (((Arg1 & One) == Zero))
                            {
                                ABDA = Arg3
                            }

                            ABST = 0xFF
                            Sleep (0x5A)
                            Local0 = 0x80
                            Local1 = 0x0B
                            While (((Local0 & 0x80) && (Local1 > Zero)))
                            {
                                Sleep (0x0A)
                                Local0 = ABST /* \_SB_.PCI0.LPCB.EC0_.ABST */
                                Local1--
                            }

                            Local0 <<= 0x08
                            If (((Local0 == Zero) && (Arg1 & One)))
                            {
                                Local1 = (ABDA & 0xFF)
                                Local0 |= Local1
                            }
                        }

                        Release (ECMX)
                        Return (Local0)
                    }

                    Name (NGBF, 0xFF)
                    Name (NGBT, 0xFF)
                    Name (NBGX, 0xFF)
                    Name (GACP, 0x07)
                    Name (ACST, One)
                    Name (SMAR, Zero)
                    Name (NBAP, Zero)
                    Name (NNBO, One)
                    Name (NDCB, Zero)
                    Name (NLB1, 0x0A)
                    Name (NLB2, 0x05)
                    Name (NLO2, 0x04)
                    Mutex (BTMX, 0x00)
                    Method (UPAD, 0, Serialized)
                    {
                        Acquire (BTMX, 0xFFFF)
                        If ((GACP & One))
                        {
                            GACP &= 0x06
                            Release (BTMX)
                            Local0 = One
                            Local1 = Zero
                            Acquire (ECMX, 0xFFFF)
                            If (ECRG)
                            {
                                Local0 = ADP /* External reference */
                                ACSE = 0xFF
                                Local2 = ACIX /* \_SB_.PCI0.LPCB.EC0_.ACIX */
                                If ((Local2 & 0x08))
                                {
                                    Local1 = One
                                }
                                ElseIf ((Local2 & 0x10))
                                {
                                    Local1 = 0x04
                                }
                                ElseIf ((Local2 & 0x40))
                                {
                                    Local1 = 0x02
                                }
                                ElseIf ((Local2 & 0x80))
                                {
                                    Local1 = 0x03
                                }
                            }

                            Release (ECMX)
                            ACST = Local0
                            SMAR = Local1
                        }
                        Else
                        {
                            Release (BTMX)
                        }
                    }

                    Method (GACS, 0, Serialized)
                    {
                        UPAD ()
                        Return (ACST) /* \_SB_.PCI0.LPCB.EC0_.ACST */
                    }

                    Method (GPID, 0, Serialized)
                    {
                        UPAD ()
                        Return (SMAR) /* \_SB_.PCI0.LPCB.EC0_.SMAR */
                    }

                    Method (GBAP, 0, Serialized)
                    {
                        Acquire (BTMX, 0xFFFF)
                        If ((GACP & 0x02))
                        {
                            GACP &= 0x05
                            Release (BTMX)
                            Acquire (ECMX, 0xFFFF)
                            If (ECRG)
                            {
                                NBAP = BATP /* \_SB_.PCI0.LPCB.EC0_.BATP */
                            }

                            Release (ECMX)
                        }
                        Else
                        {
                            Release (BTMX)
                        }

                        Return (NBAP) /* \_SB_.PCI0.LPCB.EC0_.NBAP */
                    }

                    Method (PWUP, 2, Serialized)
                    {
                        Local0 = Zero
                        Acquire (BTMX, 0xFFFF)
                        Local1 = (Arg0 | GACP) /* \_SB_.PCI0.LPCB.EC0_.GACP */
                        GACP = (Local1 & 0x07)
                        If ((GACP & 0x02))
                        {
                            NGBF |= Arg1
                            NBGX |= Arg1
                        }

                        If ((GACP & 0x04))
                        {
                            If ((NGBT != 0xFF))
                            {
                                Local0 = One
                            }

                            NGBT |= Arg1
                        }

                        Release (BTMX)
                        Return (Local0)
                    }

                    Method (BTDR, 1, Serialized)
                    {
                        If ((Arg0 == One))
                        {
                            NNBO = One
                        }
                        ElseIf ((Arg0 == Zero))
                        {
                            NNBO = Zero
                        }

                        Return (NNBO) /* \_SB_.PCI0.LPCB.EC0_.NNBO */
                    }

                    Method (BSTA, 1, Serialized)
                    {
                        BTDR (One)
                        Local0 = GBAP ()
                        Local1 = 0x0F
                        If ((Local0 & Arg0))
                        {
                            Local1 = 0x1F
                        }

                        Return (Local1)
                    }

                    Method (GBSS, 2, Serialized)
                    {
                        ToBCD (Arg0, Local0)
                        Local3 = ISTR (Local0, 0x05)
                        Concatenate (Local3, " ", Local4)
                        Local0 = (Arg1 >> 0x09)
                        Local1 = (Local0 + 0x07BC)
                        ToBCD (Local1, Local0)
                        Local2 = ISTR (Local0, 0x04)
                        Concatenate (Local4, Local2, Local3)
                        Concatenate (Local3, "/", Local4)
                        Local0 = (Arg1 >> 0x05)
                        Local1 = (Local0 & 0x0F)
                        ToBCD (Local1, Local0)
                        Local2 = ISTR (Local0, 0x02)
                        Concatenate (Local4, Local2, Local3)
                        Concatenate (Local3, "/", Local4)
                        Local1 = (Arg1 & 0x1F)
                        ToBCD (Local1, Local0)
                        Local2 = ISTR (Local0, 0x02)
                        Concatenate (Local4, Local2, Local3)
                        Return (Local3)
                    }

                    Method (GBMF, 0, Serialized)
                    {
                        Local0 = Buffer (0x12){}
                        Local3 = Zero
                        Local1 = BMF /* \_SB_.PCI0.LPCB.EC0_.BMF_ */
                        While (((Local3 < 0x10) && (Local1 != Zero)))
                        {
                            Local0 [Local3] = Local1
                            Local3++
                            Local1 = BMF /* \_SB_.PCI0.LPCB.EC0_.BMF_ */
                        }

                        Return (Local0)
                    }

                    Method (GCTL, 1, Serialized)
                    {
                        If (Arg0){}
                        Name (CTBF, Buffer (0x10){})
                        Local3 = Zero
                        Local2 = Zero
                        While ((Local3 != 0x10))
                        {
                            CTBF [Local2] = CTLB /* \_SB_.PCI0.LPCB.EC0_.CTLB */
                            Local2++
                            Local3++
                        }

                        Return (CTBF) /* \_SB_.PCI0.LPCB.EC0_.GCTL.CTBF */
                    }

                    Method (GDNM, 1, Serialized)
                    {
                        If (Arg0){}
                        Name (DNBF, Buffer (0x07){})
                        Local3 = Zero
                        Local2 = Zero
                        While ((Local3 != 0x07))
                        {
                            DNBF [Local2] = BDN /* \_SB_.PCI0.LPCB.EC0_.BDN_ */
                            Local2++
                            Local3++
                        }

                        Return (DNBF) /* \_SB_.PCI0.LPCB.EC0_.GDNM.DNBF */
                    }

                    Method (GDCH, 1, Serialized)
                    {
                        If (Arg0){}
                        Name (DCBF, Buffer (0x04){})
                        Local3 = Zero
                        Local2 = Zero
                        While ((Local3 != 0x04))
                        {
                            DCBF [Local2] = BTY /* \_SB_.PCI0.LPCB.EC0_.BTY_ */
                            Local2++
                            Local3++
                        }

                        Return (DCBF) /* \_SB_.PCI0.LPCB.EC0_.GDCH.DCBF */
                    }

                    Method (BTIF, 1, Serialized)
                    {
                        Local7 = (One << Arg0)
                        BTDR (One)
                        If ((BSTA (Local7) == 0x0F))
                        {
                            Return (0xFF)
                        }

                        Acquire (BTMX, 0xFFFF)
                        Local0 = NGBF /* \_SB_.PCI0.LPCB.EC0_.NGBF */
                        Release (BTMX)
                        If (((Local0 & Local7) == Zero))
                        {
                            Return (Zero)
                        }

                        NBST [Arg0] = NDBS /* \_SB_.NDBS */
                        Acquire (BTMX, 0xFFFF)
                        NGBT |= Local7
                        Release (BTMX)
                        Acquire (ECMX, 0xFFFF)
                        If (ECRG)
                        {
                            BSEL = Arg0
                            DerefOf (NBTI [Arg0]) [One] = BDC /* External reference */
                            DerefOf (NBTI [Arg0]) [0x02] = BFC /* \_SB_.PCI0.LPCB.EC0_.BFC_ */
                            DerefOf (NBTI [Arg0]) [0x04] = BDV /* External reference */
                            Local0 = (BFC * NLB1) /* \_SB_.PCI0.LPCB.EC0_.NLB1 */
                            Local4 = (Local0 / 0x64)
                            DerefOf (NBTI [Arg0]) [0x05] = Local4
                            Local0 = (BFC * NLO2) /* \_SB_.PCI0.LPCB.EC0_.NLO2 */
                            Local4 = (Local0 / 0x64)
                            DerefOf (NBTI [Arg0]) [0x06] = Local4
                            Local0 = BSN /* \_SB_.PCI0.LPCB.EC0_.BSN_ */
                            Local1 = BDAT /* \_SB_.PCI0.LPCB.EC0_.BDAT */
                        }

                        Release (ECMX)
                        Local2 = GBSS (Local0, Local1)
                        DerefOf (NBTI [Arg0]) [0x0A] = Local2
                        Acquire (BTMX, 0xFFFF)
                        NGBF &= ~Local7
                        Release (BTMX)
                        Return (Zero)
                    }

                    Method (BTIX, 1, Serialized)
                    {
                        Local7 = (One << Arg0)
                        BTDR (One)
                        If ((BSTA (Local7) == 0x0F))
                        {
                            Return (0xFF)
                        }

                        Acquire (BTMX, 0xFFFF)
                        Local0 = NBGX /* \_SB_.PCI0.LPCB.EC0_.NBGX */
                        Release (BTMX)
                        If (((Local0 & Local7) == Zero))
                        {
                            Return (Zero)
                        }

                        NBST [Arg0] = NDBS /* \_SB_.NDBS */
                        Acquire (BTMX, 0xFFFF)
                        NGBT |= Local7
                        Release (BTMX)
                        Acquire (ECMX, 0xFFFF)
                        If (ECRG)
                        {
                            BSEL = Arg0
                            DerefOf (NBTE [Arg0]) [0x02] = BDC /* External reference */
                            If ((MXCG == 0x50))
                            {
                                Local0 = (BFC * 0x04)
                                Local1 = (Local0 / 0x05)
                                DerefOf (NBTE [Arg0]) [0x03] = Local1
                            }
                            Else
                            {
                                DerefOf (NBTE [Arg0]) [0x03] = BFC /* \_SB_.PCI0.LPCB.EC0_.BFC_ */
                            }

                            DerefOf (NBTE [Arg0]) [0x05] = BDV /* External reference */
                            Local0 = (BFC * NLB1) /* \_SB_.PCI0.LPCB.EC0_.NLB1 */
                            Local4 = (Local0 / 0x64)
                            DerefOf (NBTE [Arg0]) [0x06] = Local4
                            Local0 = (BFC * NLO2) /* \_SB_.PCI0.LPCB.EC0_.NLO2 */
                            Local4 = (Local0 / 0x64)
                            DerefOf (NBTE [Arg0]) [0x07] = Local4
                            DerefOf (NBTE [Arg0]) [0x08] = BCC /* \_SB_.PCI0.LPCB.EC0_.BCC_ */
                            Local0 = BSN /* \_SB_.PCI0.LPCB.EC0_.BSN_ */
                            Local1 = BDAT /* \_SB_.PCI0.LPCB.EC0_.BDAT */
                        }

                        Release (ECMX)
                        Local2 = GBSS (Local0, Local1)
                        DerefOf (NBTE [Arg0]) [0x11] = Local2
                        Acquire (BTMX, 0xFFFF)
                        NBGX &= ~Local7
                        Release (BTMX)
                        Return (Zero)
                    }

                    Method (BTST, 2, Serialized)
                    {
                        Local7 = (One << Arg0)
                        BTDR (One)
                        If ((BSTA (Local7) == 0x0F))
                        {
                            NBST [Arg0] = Package (0x04)
                                {
                                    Zero, 
                                    0xFFFFFFFF, 
                                    0xFFFFFFFF, 
                                    0xFFFFFFFF
                                }
                            Return (0xFF)
                        }

                        Acquire (BTMX, 0xFFFF)
                        If (Arg1)
                        {
                            NGBT = 0xFF
                        }

                        Local0 = NGBT /* \_SB_.PCI0.LPCB.EC0_.NGBT */
                        Release (BTMX)
                        If (((Local0 & Local7) == Zero))
                        {
                            Return (Zero)
                        }

                        Acquire (ECMX, 0xFFFF)
                        If (ECRG)
                        {
                            BSEL = Arg0
                            Local0 = BST /* \_SB_.PCI0.LPCB.EC0_.BST_ */
                            Local3 = BPR /* \_SB_.PCI0.LPCB.EC0_.BPR_ */
                            DerefOf (NBST [Arg0]) [0x02] = BRC /* \_SB_.PCI0.LPCB.EC0_.BRC_ */
                            DerefOf (NBST [Arg0]) [0x03] = BPV /* \_SB_.PCI0.LPCB.EC0_.BPV_ */
                        }

                        Release (ECMX)
                        If ((GACS () == One))
                        {
                            Local0 &= 0xFFFFFFFFFFFFFFFE
                        }
                        Else
                        {
                            Local0 &= 0xFFFFFFFFFFFFFFFD
                        }

                        If ((Local0 & One))
                        {
                            Acquire (BTMX, 0xFFFF)
                            NDCB = Local7
                            Release (BTMX)
                        }

                        DerefOf (NBST [Arg0]) [Zero] = Local0
                        If ((Local0 & One))
                        {
                            If (((Local3 < 0x0190) || (Local3 > 0x1964)))
                            {
                                Local5 = DerefOf (DerefOf (NBST [Arg0]) [One])
                                If (((Local5 < 0x0190) || (Local5 > 0x1964)))
                                {
                                    Local3 = 0x0D7A
                                }
                                Else
                                {
                                    Local3 = Local5
                                }
                            }

                            Local3 = 0xFFFFFFFF
                        }
                        ElseIf (((Local0 & 0x02) == Zero))
                        {
                            Local3 = Zero
                        }

                        DerefOf (NBST [Arg0]) [One] = Local3
                        Acquire (BTMX, 0xFFFF)
                        NGBT &= ~Local7
                        Release (BTMX)
                        Return (Zero)
                    }

                    Method (ITLB, 0, NotSerialized)
                    {
                        Local0 = (BFC * NLB1) /* \_SB_.PCI0.LPCB.EC0_.NLB1 */
                        Local4 = (Local0 / 0x64)
                        Divide ((Local4 + 0x09), 0x0A, Local0, Local1)
                        Local0 = (BFC * NLB2) /* \_SB_.PCI0.LPCB.EC0_.NLB2 */
                        Local4 = (Local0 / 0x64)
                        Divide ((Local4 + 0x09), 0x0A, Local0, Local2)
                        If (ECRG)
                        {
                            LB1 = Local1
                            LB2 = Local2
                        }
                    }

                    Method (GBTI, 1, NotSerialized)
                    {
                        Debug = "Enter getbattinfo"
                        Acquire (ECMX, 0xFFFF)
                        If (ECRG)
                        {
                            If ((BATP & (One << Arg0)))
                            {
                                BSEL = Arg0
                                Local0 = Package (0x02)
                                    {
                                        Zero, 
                                        Buffer (0x6B){}
                                    }
                                DerefOf (Local0 [One]) [Zero] = BDC /* External reference */
                                DerefOf (Local0 [One]) [One] = (BDC >> 0x08
                                    )
                                DerefOf (Local0 [One]) [0x02] = BFC /* \_SB_.PCI0.LPCB.EC0_.BFC_ */
                                DerefOf (Local0 [One]) [0x03] = (BFC >> 0x08
                                    )
                                DerefOf (Local0 [One]) [0x04] = BRC /* \_SB_.PCI0.LPCB.EC0_.BRC_ */
                                DerefOf (Local0 [One]) [0x05] = (BRC >> 0x08
                                    )
                                DerefOf (Local0 [One]) [0x06] = BME /* \_SB_.PCI0.LPCB.EC0_.BME_ */
                                DerefOf (Local0 [One]) [0x07] = (BME >> 0x08
                                    )
                                DerefOf (Local0 [One]) [0x08] = BCC /* \_SB_.PCI0.LPCB.EC0_.BCC_ */
                                DerefOf (Local0 [One]) [0x09] = (BCC >> 0x08
                                    )
                                Local1 = CBT /* \_SB_.PCI0.LPCB.EC0_.CBT_ */
                                Local1 -= 0x0AAC
                                Divide (Local1, 0x0A, Local2, Local3)
                                DerefOf (Local0 [One]) [0x0A] = Local3
                                DerefOf (Local0 [One]) [0x0B] = (Local3 >> 0x08
                                    )
                                DerefOf (Local0 [One]) [0x0C] = BPV /* \_SB_.PCI0.LPCB.EC0_.BPV_ */
                                DerefOf (Local0 [One]) [0x0D] = (BPV >> 0x08
                                    )
                                Local1 = BPR /* \_SB_.PCI0.LPCB.EC0_.BPR_ */
                                If (Local1)
                                {
                                    If ((BSTS & 0x40))
                                    {
                                        Local1 = (~Local1 + One)
                                        Local1 &= 0xFFFF
                                    }
                                }

                                DerefOf (Local0 [One]) [0x0E] = Local1
                                DerefOf (Local0 [One]) [0x0F] = (Local1 >> 0x08
                                    )
                                DerefOf (Local0 [One]) [0x10] = BDV /* External reference */
                                DerefOf (Local0 [One]) [0x11] = (BDV >> 0x08
                                    )
                                DerefOf (Local0 [One]) [0x12] = BSTS /* \_SB_.PCI0.LPCB.EC0_.BSTS */
                                DerefOf (Local0 [One]) [0x13] = (BSTS >> 0x08
                                    )
                                DerefOf (Local0 [One]) [0x14] = BCV1 /* \_SB_.PCI0.LPCB.EC0_.BCV1 */
                                DerefOf (Local0 [One]) [0x15] = (BCV1 >> 0x08
                                    )
                                DerefOf (Local0 [One]) [0x16] = BCV2 /* \_SB_.PCI0.LPCB.EC0_.BCV2 */
                                DerefOf (Local0 [One]) [0x17] = (BCV2 >> 0x08
                                    )
                                DerefOf (Local0 [One]) [0x18] = BCV3 /* \_SB_.PCI0.LPCB.EC0_.BCV3 */
                                DerefOf (Local0 [One]) [0x19] = (BCV3 >> 0x08
                                    )
                                DerefOf (Local0 [One]) [0x1A] = BCV4 /* \_SB_.PCI0.LPCB.EC0_.BCV4 */
                                DerefOf (Local0 [One]) [0x1B] = (BCV4 >> 0x08
                                    )
                                CreateField (DerefOf (Local0 [One]), 0xE0, 0x80, BTSN)
                                BTSN = GBSS (BSN, BDAT)
                                Local1 = GBMF ()
                                Local2 = SizeOf (Local1)
                                CreateField (DerefOf (Local0 [One]), 0x0160, (Local2 * 0x08), BMAN)
                                BMAN = Local1
                                Local2 += 0x2C
                                CreateField (DerefOf (Local0 [One]), (Local2 * 0x08), 0x80, CLBL)
                                CLBL = GCTL (Zero)
                                Local2 += 0x11
                                CreateField (DerefOf (Local0 [One]), (Local2 * 0x08), 0x38, DNAM)
                                DNAM = GDNM (Zero)
                                Local2 += 0x07
                                CreateField (DerefOf (Local0 [One]), (Local2 * 0x08), 0x20, DCHE)
                                DCHE = GDCH (Zero)
                                Local2 += 0x04
                                CreateField (DerefOf (Local0 [One]), (Local2 * 0x08), 0x10, BMAC)
                                BMAC = Zero
                                Local2 += 0x02
                                CreateField (DerefOf (Local0 [One]), (Local2 * 0x08), 0x10, BMAD)
                                BMAD = BDAT /* \_SB_.PCI0.LPCB.EC0_.BDAT */
                                Local2 += 0x02
                                CreateField (DerefOf (Local0 [One]), (Local2 * 0x08), 0x10, BCCU)
                                BCCU = BRCC /* \_SB_.PCI0.LPCB.EC0_.BRCC */
                                Local2 += 0x02
                                CreateField (DerefOf (Local0 [One]), (Local2 * 0x08), 0x10, BCVO)
                                BCVO = BRCV /* \_SB_.PCI0.LPCB.EC0_.BRCV */
                                Local2 += 0x02
                                CreateField (DerefOf (Local0 [One]), (Local2 * 0x08), 0x10, BAVC)
                                Local1 = BCR /* \_SB_.PCI0.LPCB.EC0_.BCR_ */
                                If (Local1)
                                {
                                    If ((BSTS & 0x40))
                                    {
                                        Local1 = (~Local1 + One)
                                        Local1 &= 0xFFFF
                                    }
                                }

                                BAVC = Local1
                                Local2 += 0x02
                                CreateField (DerefOf (Local0 [One]), (Local2 * 0x08), 0x10, RTTE)
                                RTTE = BRTE /* \_SB_.PCI0.LPCB.EC0_.BRTE */
                                Local2 += 0x02
                                CreateField (DerefOf (Local0 [One]), (Local2 * 0x08), 0x10, ATTE)
                                ATTE = BATE /* \_SB_.PCI0.LPCB.EC0_.BATE */
                                Local2 += 0x02
                                CreateField (DerefOf (Local0 [One]), (Local2 * 0x08), 0x10, ATTF)
                                ATTF = BATF /* \_SB_.PCI0.LPCB.EC0_.BATF */
                                Local2 += 0x02
                                CreateField (DerefOf (Local0 [One]), (Local2 * 0x08), 0x08, NOBS)
                                NOBS = BATN /* \_SB_.PCI0.LPCB.EC0_.BATN */
                            }
                            Else
                            {
                                Local0 = Package (0x01)
                                    {
                                        0x34
                                    }
                            }
                        }
                        Else
                        {
                            Local0 = Package (0x01)
                                {
                                    0x0D
                                }
                        }

                        Release (ECMX)
                        Return (Local0)
                    }

                    Method (GBTC, 0, NotSerialized)
                    {
                        Debug = "Enter GetBatteryControl"
                        Acquire (ECMX, 0xFFFF)
                        If (ECRG)
                        {
                            Local0 = Package (0x02)
                                {
                                    Zero, 
                                    Buffer (0x04){}
                                }
                            If ((BATP & One))
                            {
                                BSEL = Zero
                                DerefOf (Local0 [One]) [Zero] = Zero
                                If ((((INAC == Zero) && (INCH == Zero)) && (IDIS == Zero)))
                                {
                                    DerefOf (Local0 [One]) [Zero] = Zero
                                }
                                ElseIf (((((INAC == Zero) && (INCH == 0x02)) && (
                                    IDIS == One)) && (MAXC == Zero)))
                                {
                                    DerefOf (Local0 [One]) [Zero] = One
                                }
                                ElseIf (((INAC == One) && (IDIS == 0x02)))
                                {
                                    DerefOf (Local0 [One]) [Zero] = 0x02
                                }
                                ElseIf (((((INAC == Zero) && (INCH == 0x02)) && (
                                    IDIS == One)) && (MAXC == 0xFA)))
                                {
                                    DerefOf (Local0 [One]) [Zero] = 0x03
                                }
                                ElseIf (((INAC == Zero) && (INCH == 0x03)))
                                {
                                    DerefOf (Local0 [One]) [Zero] = 0x04
                                }
                            }
                            Else
                            {
                                DerefOf (Local0 [One]) [Zero] = 0xFF
                            }

                            If ((BATP & 0x02))
                            {
                                BSEL = One
                                DerefOf (Local0 [One]) [One] = Zero
                                If ((((INAC == Zero) && (INCH == Zero)) && (IDIS == Zero)))
                                {
                                    DerefOf (Local0 [One]) [One] = Zero
                                }
                                ElseIf (((((INAC == Zero) && (INCH == One)) && (
                                    IDIS == 0x02)) && (MAXC == Zero)))
                                {
                                    DerefOf (Local0 [One]) [One] = One
                                }
                                ElseIf (((INAC == One) && (IDIS == One)))
                                {
                                    DerefOf (Local0 [One]) [One] = 0x02
                                }
                                ElseIf (((((INAC == Zero) && (INCH == One)) && (
                                    IDIS == 0x02)) && (MAXC == 0xFA)))
                                {
                                    DerefOf (Local0 [One]) [One] = 0x03
                                }
                                ElseIf (((INAC == Zero) && (INCH == 0x03)))
                                {
                                    DerefOf (Local0 [One]) [One] = 0x04
                                }
                            }
                            Else
                            {
                                DerefOf (Local0 [One]) [One] = 0xFF
                            }
                        }
                        Else
                        {
                            Local0 = Package (0x02)
                                {
                                    0x35, 
                                    Zero
                                }
                        }

                        Release (ECMX)
                        Return (Local0)
                    }

                    Method (SBTC, 3, NotSerialized)
                    {
                        Debug = "Enter SetBatteryControl"
                        Debug = Arg0
                        Debug = Arg1
                        Debug = Arg2
                        Acquire (ECMX, 0xFFFF)
                        If (ECRG)
                        {
                            Local0 = Arg2
                            Debug = Local0
                            Local4 = Package (0x01)
                                {
                                    0x06
                                }
                            Local1 = Zero
                            Local2 = Zero
                            Local1 = DerefOf (Local0 [Zero])
                            If ((Local1 == Zero))
                            {
                                Debug = "battery 0"
                                If ((BATP & One))
                                {
                                    Local2 = DerefOf (Local0 [One])
                                    If ((Local2 == Zero))
                                    {
                                        INCH = Zero
                                        IDIS = Zero
                                        INAC = Zero
                                        MAXC = Zero
                                        PSSB = One
                                        Local4 = Package (0x01)
                                            {
                                                Zero
                                            }
                                    }

                                    If ((Local2 == One))
                                    {
                                        INAC = Zero
                                        INCH = 0x02
                                        IDIS = One
                                        MAXC = Zero
                                        PSSB = Zero
                                        Local4 = Package (0x01)
                                            {
                                                Zero
                                            }
                                    }

                                    If ((Local2 == 0x02))
                                    {
                                        INAC = One
                                        INCH = One
                                        IDIS = 0x02
                                        PSSB = Zero
                                        Local4 = Package (0x01)
                                            {
                                                Zero
                                            }
                                    }

                                    If ((Local2 == 0x03))
                                    {
                                        INCH = 0x02
                                        IDIS = One
                                        INAC = Zero
                                        MAXC = 0xFA
                                        PSSB = Zero
                                        Local4 = Package (0x01)
                                            {
                                                Zero
                                            }
                                    }

                                    If ((Local2 == 0x04))
                                    {
                                        MAXC = 0xFA
                                        Local4 = Package (0x01)
                                            {
                                                Zero
                                            }
                                    }

                                    If ((Local2 == 0x05))
                                    {
                                        INAC = Zero
                                        INCH = 0x03
                                        Local4 = Package (0x01)
                                            {
                                                Zero
                                            }
                                    }
                                }
                                Else
                                {
                                    Local4 = Package (0x01)
                                        {
                                            0x34
                                        }
                                }
                            }

                            If ((Local1 == One))
                            {
                                If ((BATP & 0x02))
                                {
                                    Debug = "battery 1"
                                    Local2 = DerefOf (Local0 [One])
                                    If ((Local2 == Zero))
                                    {
                                        INCH = Zero
                                        IDIS = Zero
                                        INAC = Zero
                                        MAXC = Zero
                                        PSSB = One
                                        Local4 = Package (0x01)
                                            {
                                                Zero
                                            }
                                    }

                                    If ((Local2 == One))
                                    {
                                        INAC = Zero
                                        INCH = One
                                        IDIS = 0x02
                                        MAXC = Zero
                                        PSSB = Zero
                                        Local4 = Package (0x01)
                                            {
                                                Zero
                                            }
                                    }

                                    If ((Local2 == 0x02))
                                    {
                                        INAC = One
                                        INCH = 0x02
                                        IDIS = One
                                        PSSB = Zero
                                        Local4 = Package (0x01)
                                            {
                                                Zero
                                            }
                                    }

                                    If ((Local2 == 0x03))
                                    {
                                        INCH = One
                                        IDIS = 0x02
                                        INAC = Zero
                                        MAXC = 0xFA
                                        PSSB = Zero
                                        Local4 = Package (0x01)
                                            {
                                                Zero
                                            }
                                    }

                                    If ((Local2 == 0x04))
                                    {
                                        INCH = Zero
                                        IDIS = Zero
                                        INAC = Zero
                                        Local4 = Package (0x01)
                                            {
                                                Zero
                                            }
                                    }

                                    If ((Local2 == 0x05))
                                    {
                                        INAC = Zero
                                        INCH = 0x03
                                        Local4 = Package (0x01)
                                            {
                                                Zero
                                            }
                                    }
                                }
                                Else
                                {
                                    Local4 = Package (0x01)
                                        {
                                            0x34
                                        }
                                }
                            }
                        }

                        Release (ECMX)
                        Return (Local4)
                    }

                    Mutex (OTMT, 0x00)
                    Name (OTLL, Zero)
                    Name (OTSI, One)
                    Name (OTRT, Zero)
                    Name (OTEN, Zero)
                    Name (LRPC, Zero)
                    Name (ACS1, 0xFF)
                    Method (_Q03, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Acquire (BTMX, 0xFFFF)
                        Local0 = NDCB /* \_SB_.PCI0.LPCB.EC0_.NDCB */
                        Release (BTMX)
                        PWUP (0x04, Local0)
                        SBTN (Local0, 0x80)
                    }

                    Method (_Q04, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Acquire (OTMT, 0xFFFF)
                        OTLL = GTST ()
                        OTSI = One
                        Release (OTMT)
                        RPPC ()
                        Notify (^^^^PLTF.C000, 0x80) // Status Change
                        Notify (^^^^PLTF.C001, 0x80) // Status Change
                        If (CondRefOf (\_SB.PLTF.C002.PPCV, Local0))
                        {
                            Notify (^^^^PLTF.C002, 0x80) // Status Change
                            Notify (^^^^PLTF.C003, 0x80) // Status Change
                        }

                        If (CondRefOf (\_SB.PLTF.C004.PPCV, Local0))
                        {
                            Notify (^^^^PLTF.C004, 0x80) // Status Change
                            Notify (^^^^PLTF.C005, 0x80) // Status Change
                            Notify (^^^^PLTF.C006, 0x80) // Status Change
                            Notify (^^^^PLTF.C007, 0x80) // Status Change
                        }

                        If (CondRefOf (\_SB.PLTF.C008.PPCV, Local0))
                        {
                            Notify (^^^^PLTF.C008, 0x80) // Status Change
                            Notify (^^^^PLTF.C009, 0x80) // Status Change
                            Notify (^^^^PLTF.C00A, 0x80) // Status Change
                            Notify (^^^^PLTF.C00B, 0x80) // Status Change
                        }

                        If (CondRefOf (\_SB.PLTF.C00C.PPCV, Local0))
                        {
                            Notify (^^^^PLTF.C00C, 0x80) // Status Change
                            Notify (^^^^PLTF.C00D, 0x80) // Status Change
                            Notify (^^^^PLTF.C00E, 0x80) // Status Change
                            Notify (^^^^PLTF.C00F, 0x80) // Status Change
                        }
                    }

                    Method (_Q05, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Local0 = THEM /* \_SB_.PCI0.LPCB.EC0_.THEM */
                        \_TZ.ECTE (Local0)
                    }

                    Method (_Q06, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        PWUP (0x05, 0x03)
                        If (CondRefOf (\_SB.PCI0.LPCB.EC0.EC12))
                        {
                            EC14 = EC12 ()
                        }

                        If (BTDR (0x02))
                        {
                            Notify (AC, 0x80) // Status Change
                            Notify (^^^^PLTF.C000, 0x80) // Status Change
                        }

                        \_GPE.G001 (Zero)
                    }

                    Method (_Q07, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Acquire (ECMX, 0xFFFF)
                        If (ECRG)
                        {
                            Local0 = UCPN /* \_SB_.PCI0.LPCB.EC0_.UCPN */
                            ^^^^WMIV.GVWE (0x00020001, Local0)
                        }

                        Release (ECMX)
                    }

                    Method (_Q08, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        PWUP (0x06, One)
                        If (CondRefOf (\_SB.PCI0.LPCB.EC0.EC13))
                        {
                            EC15 = EC13 ()
                        }

                        Local0 = GBAP ()
                        If ((Local0 != 0x02))
                        {
                            PWUP (0x04, 0x02)
                            If (BTDR (0x02))
                            {
                                Notify (BAT1, 0x80) // Status Change
                            }
                        }

                        If (BTDR (0x02))
                        {
                            Notify (BAT0, 0x81) // Information Change
                        }
                    }

                    Method (_Q0A, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Local4 = \_GPE.G014 ()
                        Notify (LID, 0x80) // Status Change
                        ^^^ACEL.AJAL ()
                    }

                    Method (_Q09, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        PWUP (0x04, One)
                        If (BTDR (0x02))
                        {
                            Notify (BAT0, 0x80) // Status Change
                        }
                    }

                    Method (_Q0B, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                    }

                    Method (_Q18, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        PWUP (0x06, 0x02)
                        Local0 = GBAP ()
                        If ((Local0 != One))
                        {
                            PWUP (0x04, One)
                            If (BTDR (0x02))
                            {
                                Notify (BAT0, 0x80) // Status Change
                            }
                        }

                        If (BTDR (0x02))
                        {
                            Notify (BAT1, 0x81) // Information Change
                        }
                    }

                    Method (_Q19, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        PWUP (0x04, 0x02)
                        If (BTDR (0x02))
                        {
                            Notify (BAT1, 0x80) // Status Change
                        }
                    }

                    Method (_Q24, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Acquire (ECMX, 0xFFFF)
                        If (ECRG)
                        {
                            PPCM = 0x03
                            PPDS = One
                            Local0 = PPDT /* \_SB_.PCI0.LPCB.EC0_.PPDT */
                            Local0 <<= 0x08
                            PPCM = One
                            PPDS = One
                            Local1 = PPDT /* \_SB_.PCI0.LPCB.EC0_.PPDT */
                            If ((Local1 == 0xFC))
                            {
                                Local1 = 0xFE
                            }

                            Local2 = (Local0 | Local1)
                            ^^^^WMIV.GVWE (0x14, Local2)
                        }

                        Release (ECMX)
                    }

                    Method (_Q25, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        ^^^^WMIV.GVWE (0x14, 0xFD)
                    }

                    Method (_Q26, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Acquire (ECMX, 0xFFFF)
                        If (ECRG)
                        {
                            PPCM = 0x03
                            PPDS = One
                            Local0 = PPDT /* \_SB_.PCI0.LPCB.EC0_.PPDT */
                            Local0 <<= 0x08
                            ^^^^WMIV.GVWE (0x14, Local0)
                        }

                        Release (ECMX)
                    }

                    Name (LICN, Zero)
                    Method (SBTN, 2, Serialized)
                    {
                        If ((Arg0 & One))
                        {
                            Notify (BAT0, Arg1)
                        }

                        If ((Arg0 & 0x02))
                        {
                            Notify (BAT1, Arg1)
                        }
                    }

                    Method (PRIT, 0, NotSerialized)
                    {
                        ETSI (0x03, 0x14)
                        If ((^^^BUSA.HDEF.ASTI == Zero))
                        {
                            SAST (^^^BUSA.HDEF.ASTA)
                        }

                        If ((GBAP () & One))
                        {
                            BT0P = 0x1F
                        }

                        ECPB ()
                        If (CondRefOf (\_SB.PCI0.LPCB.EC0.EC12))
                        {
                            EC14 = EC12 ()
                        }

                        If (CondRefOf (\_SB.PCI0.LPCB.EC0.EC13))
                        {
                            EC15 = EC13 ()
                        }
                    }

                    Method (GTST, 0, Serialized)
                    {
                        Local0 = 0x02
                        Acquire (ECMX, 0xFFFF)
                        If (ECRG)
                        {
                            Local0 = OCPS /* \_SB_.PCI0.LPCB.EC0_.OCPS */
                        }

                        Release (ECMX)
                        Return (Local0)
                    }

                    Method (ETSI, 2, Serialized)
                    {
                        If (((Arg1 != OTRT) || (Arg0 != OTEN)))
                        {
                            Acquire (ECMX, 0xFFFF)
                            If (ECRG)
                            {
                                If ((Arg1 != OTRT))
                                {
                                    OCPR = Arg1
                                    OTRT = Arg1
                                }

                                OCPE = Arg0
                                OTEN = Arg0
                            }

                            Release (ECMX)
                        }
                    }

                    Method (RPPC, 0, Serialized)
                    {
                        Local1 = Zero
                        If (CondRefOf (\_SB.PLTF.C000._PSS, Local2))
                        {
                            Local0 = ^^^^PLTF.C000._PSS /* \_SB_.PLTF.C000._PSS */
                            Local1 = SizeOf (Local0)
                        }

                        Local3 = Zero
                        If ((Local1 > Zero))
                        {
                            Local1 -= One
                        }
                        Else
                        {
                            Local3 = 0x03
                        }

                        Acquire (OTMT, 0xFFFF)
                        If (OTSI)
                        {
                            Local0 = OTLL /* \_SB_.PCI0.LPCB.EC0_.OTLL */
                            OTSI = Zero
                            If ((Local0 == Zero))
                            {
                                If ((LRPC < Local1))
                                {
                                    LRPC += One
                                }
                            }
                            ElseIf ((Local0 == 0x02))
                            {
                                If ((LRPC > Zero))
                                {
                                    LRPC -= One
                                }
                            }
                        }

                        If ((LRPC < Local1))
                        {
                            Local3 |= One
                        }

                        If ((LRPC > Zero))
                        {
                            Local3 |= 0x02
                        }

                        ETSI (Local3, 0x14)
                        Release (OTMT)
                        If (CondRefOf (\_SB.PLTF.C000.PPCV, Local5))
                        {
                            ^^^^PLTF.C000.PPCV = LRPC /* \_SB_.PCI0.LPCB.EC0_.LRPC */
                            ^^^^PLTF.C001.PPCV = LRPC /* \_SB_.PCI0.LPCB.EC0_.LRPC */
                            If (CondRefOf (\_SB.PLTF.C002.PPCV, Local6))
                            {
                                ^^^^PLTF.C002.PPCV = LRPC /* \_SB_.PCI0.LPCB.EC0_.LRPC */
                                ^^^^PLTF.C003.PPCV = LRPC /* \_SB_.PCI0.LPCB.EC0_.LRPC */
                            }

                            If (CondRefOf (\_SB.PLTF.C004.PPCV, Local6))
                            {
                                ^^^^PLTF.C004.PPCV = LRPC /* \_SB_.PCI0.LPCB.EC0_.LRPC */
                                ^^^^PLTF.C005.PPCV = LRPC /* \_SB_.PCI0.LPCB.EC0_.LRPC */
                                ^^^^PLTF.C006.PPCV = LRPC /* \_SB_.PCI0.LPCB.EC0_.LRPC */
                                ^^^^PLTF.C007.PPCV = LRPC /* \_SB_.PCI0.LPCB.EC0_.LRPC */
                            }

                            If (CondRefOf (\_SB.PLTF.C008.PPCV, Local0))
                            {
                                ^^^^PLTF.C008.PPCV = LRPC /* \_SB_.PCI0.LPCB.EC0_.LRPC */
                                ^^^^PLTF.C009.PPCV = LRPC /* \_SB_.PCI0.LPCB.EC0_.LRPC */
                                ^^^^PLTF.C00A.PPCV = LRPC /* \_SB_.PCI0.LPCB.EC0_.LRPC */
                                ^^^^PLTF.C00B.PPCV = LRPC /* \_SB_.PCI0.LPCB.EC0_.LRPC */
                            }

                            If (CondRefOf (\_SB.PLTF.C00C.PPCV, Local0))
                            {
                                ^^^^PLTF.C00C.PPCV = LRPC /* \_SB_.PCI0.LPCB.EC0_.LRPC */
                                ^^^^PLTF.C00D.PPCV = LRPC /* \_SB_.PCI0.LPCB.EC0_.LRPC */
                                ^^^^PLTF.C00E.PPCV = LRPC /* \_SB_.PCI0.LPCB.EC0_.LRPC */
                                ^^^^PLTF.C00F.PPCV = LRPC /* \_SB_.PCI0.LPCB.EC0_.LRPC */
                            }
                        }
                    }

                    Method (ECPB, 0, Serialized)
                    {
                        Name (ALDB, Buffer (0x03){})
                        CreateWordField (ALDB, Zero, SZZE)
                        CreateByteField (ALDB, 0x02, ACDC)
                        SZZE = 0x03
                        Local0 = GACS ()
                        If ((Local0 != ACS1))
                        {
                            If ((Local0 == One))
                            {
                                ACS1 = One
                                ACDC = Zero
                            }
                            Else
                            {
                                ACS1 = Zero
                                ACDC = One
                            }

                            ALIB (One, ALDB)
                        }
                    }
                }

                Device (DMAC)
                {
                    Name (_HID, EisaId ("PNP0200") /* PC-class DMA Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0081,             // Range Minimum
                            0x0081,             // Range Maximum
                            0x01,               // Alignment
                            0x0F,               // Length
                            )
                        IO (Decode16,
                            0x00C0,             // Range Minimum
                            0x00C0,             // Range Maximum
                            0x01,               // Alignment
                            0x20,               // Length
                            )
                        DMA (Compatibility, NotBusMaster, Transfer8_16, )
                            {4}
                    })
                }

                Device (COPR)
                {
                    Name (_HID, EisaId ("PNP0C04") /* x87-compatible Floating Point Processing Unit */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x00F0,             // Range Minimum
                            0x00F0,             // Range Maximum
                            0x01,               // Alignment
                            0x0F,               // Length
                            )
                        IRQNoFlags ()
                            {13}
                    })
                }

                Device (PIC)
                {
                    Name (_HID, EisaId ("PNP0000") /* 8259-compatible Programmable Interrupt Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0020,             // Range Minimum
                            0x0020,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00A0,             // Range Minimum
                            0x00A0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {2}
                    })
                }

                Device (RTC)
                {
                    Name (_HID, EisaId ("PNP0B00") /* AT Real-Time Clock */)  // _HID: Hardware ID
                    Name (BUF0, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                    })
                    Name (BUF1, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {8}
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        If ((HPEN == One))
                        {
                            Return (BUF0) /* \_SB_.PCI0.LPCB.RTC_.BUF0 */
                        }

                        Return (BUF1) /* \_SB_.PCI0.LPCB.RTC_.BUF1 */
                    }
                }

                Device (SPKR)
                {
                    Name (_HID, EisaId ("PNP0800") /* Microsoft Sound System Compatible Device */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0061,             // Range Minimum
                            0x0061,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                    })
                }

                Device (TMR)
                {
                    Name (_HID, EisaId ("PNP0100") /* PC-class System Timer */)  // _HID: Hardware ID
                    Name (BUF0, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0040,             // Range Minimum
                            0x0040,             // Range Maximum
                            0x01,               // Alignment
                            0x04,               // Length
                            )
                    })
                    Name (BUF1, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0040,             // Range Minimum
                            0x0040,             // Range Maximum
                            0x01,               // Alignment
                            0x04,               // Length
                            )
                        IRQNoFlags ()
                            {0}
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        If ((HPEN == One))
                        {
                            Return (BUF0) /* \_SB_.PCI0.LPCB.TMR_.BUF0 */
                        }

                        Return (BUF1) /* \_SB_.PCI0.LPCB.TMR_.BUF1 */
                    }
                }

                Device (SYSR)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0010,             // Range Minimum
                            0x0010,             // Range Maximum
                            0x01,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x002E,             // Range Minimum
                            0x002E,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0072,             // Range Minimum
                            0x0072,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0080,             // Range Minimum
                            0x0080,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x00B0,             // Range Minimum
                            0x00B0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0092,             // Range Minimum
                            0x0092,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0400,             // Range Minimum
                            0x0400,             // Range Maximum
                            0x01,               // Alignment
                            0xD0,               // Length
                            )
                        IO (Decode16,
                            0x04D0,             // Range Minimum
                            0x04D0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x04D6,             // Range Minimum
                            0x04D6,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0680,             // Range Minimum
                            0x0680,             // Range Maximum
                            0x01,               // Alignment
                            0x80,               // Length
                            )
                        IO (Decode16,
                            0x077A,             // Range Minimum
                            0x077A,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0C00,             // Range Minimum
                            0x0C00,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0C14,             // Range Minimum
                            0x0C14,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0C50,             // Range Minimum
                            0x0C50,             // Range Maximum
                            0x01,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0C6C,             // Range Minimum
                            0x0C6C,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0C6F,             // Range Minimum
                            0x0C6F,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0CD0,             // Range Minimum
                            0x0CD0,             // Range Maximum
                            0x01,               // Alignment
                            0x0C,               // Length
                            )
                        IO (Decode16,
                            0x0840,             // Range Minimum
                            0x0840,             // Range Maximum
                            0x01,               // Alignment
                            0x08,               // Length
                            )
                    })
                }

                Device (MEM)
                {
                    Name (_HID, EisaId ("PNP0C01") /* System Board */)  // _HID: Hardware ID
                    Name (MSRC, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadOnly,
                            0x000E0000,         // Address Base
                            0x00020000,         // Address Length
                            )
                        Memory32Fixed (ReadWrite,
                            0xFFF00000,         // Address Base
                            0x00100000,         // Address Length
                            _Y02)
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (MSRC, \_SB.PCI0.LPCB.MEM._Y02._LEN, PSIZ)  // _LEN: Length
                        CreateDWordField (MSRC, \_SB.PCI0.LPCB.MEM._Y02._BAS, PBAS)  // _BAS: Base Address
                        PSIZ = ROMS /* \ROMS */
                        Local0 = (ROMS - One)
                        PBAS = (0xFFFFFFFF - Local0)
                        Return (MSRC) /* \_SB_.PCI0.LPCB.MEM_.MSRC */
                    }
                }

                Device (KBC0)
                {
                    Name (_HID, EisaId ("HPQ8002"))  // _HID: Hardware ID
                    Name (_CID, EisaId ("PNP0303") /* IBM Enhanced Keyboard (101/102-key, PS/2 Mouse) */)  // _CID: Compatible ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0060,             // Range Minimum
                            0x0060,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0064,             // Range Minimum
                            0x0064,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IRQNoFlags ()
                            {1}
                    })
                }

                OperationRegion (LCLM, SystemIO, 0x0C50, 0x03)
                Field (LCLM, ByteAcc, NoLock, Preserve)
                {
                    CLMI,   8, 
                    CLMD,   8, 
                    CLGP,   8
                }

                IndexField (CLMI, CLMD, ByteAcc, NoLock, Preserve)
                {
                    IDRG,   8, 
                    Offset (0x02), 
                    TSTS,   8, 
                    TINT,   8, 
                    Offset (0x12), 
                    I2CC,   8, 
                    GPIO,   8
                }

                Method (RGPM, 0, NotSerialized)
                {
                    Local0 = GPIO /* \_SB_.PCI0.LPCB.GPIO */
                    Local0 &= 0xFFFFFFFFFFFFFF3F
                    GPIO = Local0
                    Local1 = CLGP /* \_SB_.PCI0.LPCB.CLGP */
                    Return (Local1)
                }
            }

            Device (ACEL)
            {
                Name (_HID, EisaId ("HPQ6007"))  // _HID: Hardware ID
                Name (DEPT, 0xFF)
                Name (CTST, 0xFF)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    ITAL ()
                }

                Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                {
                    Interrupt (ResourceConsumer, Edge, ActiveHigh, Exclusive, ,, )
                    {
                        0x00000015,
                    }
                })
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((DEPT == 0xFF))
                    {
                        Local0 = 0x0F
                        Local1 = ALRD (0x20)
                        If ((Local1 & 0xFF00))
                        {
                            Local0 = Zero
                        }

                        DEPT = Local0
                    }

                    Return (DEPT) /* \_SB_.PCI0.ACEL.DEPT */
                }

                Method (ITAL, 0, Serialized)
                {
                    Name (BUFF, Buffer (0x02)
                    {
                         0x16, 0x13                                       // ..
                    })
                    CreateByteField (BUFF, Zero, THFF)
                    CreateByteField (BUFF, One, THWU)
                    If (_STA ())
                    {
                        If (CondRefOf (\_SB.PCI0.ACEL.GATH))
                        {
                            BUFF = GATH ()
                        }

                        ALWR (0x20, 0x57)
                        ALWR (0x21, 0x22)
                        ALWR (0x32, THFF)
                        ALWR (0x33, 0x02)
                        ALWR (0x30, 0x95)
                        ALWR (0x36, THWU)
                        ALWR (0x37, One)
                        ALWR (0x34, 0x0A)
                        CTST = 0xFF
                        AJAL ()
                    }
                }

                Method (AJAL, 0, Serialized)
                {
                    If (_STA ())
                    {
                        Local0 = ^^LPCB.EC0.GACS ()
                        If (((^^^LID._LID () == Zero) && (Local0 == Zero)))
                        {
                            If ((CTST != One))
                            {
                                CTST = One
                                ALWR (0x22, 0x20)
                            }
                        }
                        ElseIf ((CTST != Zero))
                        {
                            CTST = Zero
                            ALWR (0x22, 0x40)
                        }
                    }
                }

                Method (CLRI, 0, Serialized)
                {
                    Local2 = Zero
                    If ((^^LPCB.EC0.GACS () == Zero))
                    {
                        Local0 = 0x04
                        Local1 = 0x04
                        If ((^^^BAT0._STA () == 0x1F))
                        {
                            Local0 = DerefOf (DerefOf (NBST [Zero]) [Zero])
                        }

                        If ((^^^BAT1._STA () == 0x1F))
                        {
                            Local1 = DerefOf (DerefOf (NBST [One]) [Zero])
                        }

                        Local0 &= Local1
                        If ((Local0 & 0x04))
                        {
                            Local2 = One
                        }
                    }

                    Return (Local2)
                }

                Method (ALRD, 1, Serialized)
                {
                    IM71 = Zero
                    IM72 = Zero
                    Local0 = ^^SMBS.SMBA (0x53, Arg0, Zero)
                    IM71 = One
                    IM72 = One
                    Return (Local0)
                }

                Method (ALWR, 2, Serialized)
                {
                    IM71 = Zero
                    IM72 = Zero
                    Local0 = ^^SMBS.SMBA (0x52, Arg0, Arg1)
                    IM71 = One
                    IM72 = One
                    Return (Local0)
                }

                Method (ALID, 1, Serialized)
                {
                    Return (^^^LID._LID ())
                }

                Method (ADSN, 0, Serialized)
                {
                    Local0 = Zero
                    Return (Local0)
                }

                Method (ALED, 1, Serialized)
                {
                    ^^SMBS.O129 = Arg0
                }
            }
        }

        Name (NBTI, Package (0x02)
        {
            Package (0x0D)
            {
                One, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                One, 
                0xFFFFFFFF, 
                Zero, 
                Zero, 
                0x64, 
                0x64, 
                "Primary", 
                "100000", 
                "LIon", 
                "Hewlett-Packard"
            }, 

            Package (0x0D)
            {
                One, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                One, 
                0xFFFFFFFF, 
                Zero, 
                Zero, 
                0x64, 
                0x64, 
                "Travel", 
                "100000", 
                "LIon", 
                "Hewlett-Packard"
            }
        })
        Name (NBTE, Package (0x02)
        {
            Package (0x15)
            {
                One, 
                One, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                One, 
                0xFFFFFFFF, 
                Zero, 
                Zero, 
                0x64, 
                0x00017318, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                0x64, 
                0x64, 
                "Primary", 
                "123456789", 
                "LIon", 
                "Hewlett-Packard", 
                One
            }, 

            Package (0x15)
            {
                One, 
                One, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                One, 
                0xFFFFFFFF, 
                Zero, 
                Zero, 
                0x64, 
                0x00017318, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                0x64, 
                0x64, 
                "Primary", 
                "100000", 
                "LIon", 
                "Hewlett-Packard", 
                One
            }
        })
        Name (NBST, Package (0x02)
        {
            Package (0x04)
            {
                Zero, 
                Zero, 
                0x0FA0, 
                0x04B0
            }, 

            Package (0x04)
            {
                Zero, 
                Zero, 
                0x0FA0, 
                0x04B0
            }
        })
        Name (NDBS, Package (0x04)
        {
            Zero, 
            Zero, 
            0x0FA0, 
            0x04B0
        })
        Name (ACST, One)
        Name (SMAR, Zero)
        Name (BT0P, 0x0F)
        Method (BTIF, 1, Serialized)
        {
            Local0 = ^PCI0.LPCB.EC0.BTIF (Arg0)
            If ((Local0 == 0xFF))
            {
                Return (Package (0x0D)
                {
                    Zero, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    One, 
                    0xFFFFFFFF, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    "", 
                    "", 
                    "", 
                    Zero
                })
            }
            Else
            {
                Return (DerefOf (NBTI [Arg0]))
            }
        }

        Method (BTIX, 1, Serialized)
        {
            Local0 = ^PCI0.LPCB.EC0.BTIX (Arg0)
            If ((Local0 == 0xFF))
            {
                Return (Package (0x15)
                {
                    One, 
                    One, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    One, 
                    0xFFFFFFFF, 
                    Zero, 
                    Zero, 
                    0x64, 
                    0x00017318, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    0x64, 
                    0x64, 
                    "", 
                    "", 
                    "", 
                    "", 
                    One
                })
            }
            Else
            {
                Return (DerefOf (NBTE [Arg0]))
            }
        }

        Name (NFBS, One)
        Method (BTST, 1, Serialized)
        {
            Local1 = NFBS /* \_SB_.NFBS */
            If (NFBS)
            {
                NFBS = Zero
            }

            Local0 = ^PCI0.LPCB.EC0.BTST (Arg0, Local1)
            Return (DerefOf (NBST [Arg0]))
        }

        Device (BAT0)
        {
            Name (_HID, EisaId ("PNP0C0A") /* Control Method Battery */)  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = ^^PCI0.LPCB.EC0.BSTA (One)
                If ((BT0P ^ Local0))
                {
                    BT0P = Local0
                    Local1 = Local0
                    If ((Local1 != 0x1F))
                    {
                        Local1 = Zero
                    }

                    SSMI (0xEA3A, Zero, Local1, Zero, Zero)
                }

                Return (Local0)
            }

            Method (_BIX, 0, NotSerialized)  // _BIX: Battery Information Extended
            {
                Return (BTIX (Zero))
            }

            Method (_BST, 0, NotSerialized)  // _BST: Battery Status
            {
                Return (BTST (Zero))
            }

            Name (_PCL, Package (0x01)  // _PCL: Power Consumer List
            {
                _SB
            })
        }

        Device (BAT1)
        {
            Name (_HID, EisaId ("PNP0C0A") /* Control Method Battery */)  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (Zero)
            }

            Method (_BIF, 0, NotSerialized)  // _BIF: Battery Information
            {
                Return (BTIF (One))
            }

            Method (_BST, 0, NotSerialized)  // _BST: Battery Status
            {
                Return (BTST (One))
            }

            Name (_PCL, Package (0x01)  // _PCL: Power Consumer List
            {
                _SB
            })
        }

        Device (AC)
        {
            Name (_HID, "ACPI0003" /* Power Source Device */)  // _HID: Hardware ID
            Name (_PCL, Package (0x01)  // _PCL: Power Consumer List
            {
                _SB
            })
            Method (_PSR, 0, NotSerialized)  // _PSR: Power Source
            {
                Local0 = ^^PCI0.LPCB.EC0.GACS ()
                Local1 = ^^PCI0.LPCB.EC0.GPID ()
                If ((Local0 ^ ACST))
                {
                    ^^PCI0.ACEL.AJAL ()
                }

                If (((Local0 && !ACST) || (Local1 && !SMAR)))
                {
                    ^^WMIV.GVWE (0x03, Zero)
                }

                ACST = Local0
                SMAR = Local1
                ^^PCI0.LPCB.EC0.ECPB ()
                Return (Local0)
            }
        }

        Device (SLPB)
        {
            Name (_HID, EisaId ("PNP0C0E") /* Sleep Button Device */)  // _HID: Hardware ID
        }

        Device (LID)
        {
            Name (_HID, EisaId ("PNP0C0D") /* Lid Device */)  // _HID: Hardware ID
            Method (_LID, 0, NotSerialized)  // _LID: Lid Status
            {
                Local0 = One
                If (CondRefOf (\_SB.PCI0.LPCB.EC0.EC10))
                {
                    Local0 = ^^PCI0.LPCB.EC0.EC10 ()
                }

                Return (Local0)
            }
        }

        Mutex (LDPS, 0x00)
        Mutex (LEXD, 0x00)
        Name (EDDA, Zero)
        OperationRegion (LDPT, SystemIO, 0x80, One)
        Field (LDPT, ByteAcc, NoLock, Preserve)
        {
            LPDG,   8
        }

        OperationRegion (LDBP, SystemIO, 0x024E, 0x02)
        Field (LDBP, ByteAcc, NoLock, Preserve)
        {
            LLPD,   8, 
            LUPD,   8
        }

        Method (ODBB, 2, Serialized)
        {
            Acquire (LDPS, 0xFFFF)
            LLPD = (Arg0 & 0xFF)
            If ((Arg1 >= 0x02))
            {
                LUPD = ((Arg0 >> 0x08) & 0xFF)
            }

            Release (LDPS)
            Acquire (LDPS, 0xFFFF)
            LPDG = (Arg0 & 0xFF)
            Release (LDPS)
            Return (Zero)
        }

        Method (ODBG, 1, NotSerialized)
        {
            ODBB (Arg0, One)
            Return (Zero)
        }

        Method (ODG1, 1, NotSerialized)
        {
            Acquire (LDPS, 0xFFFF)
            LUPD = Arg0
            Release (LDPS)
            Return (Zero)
        }

        Method (ODGW, 1, NotSerialized)
        {
            ODBB (Arg0, 0x02)
            Return (Zero)
        }

        Method (ODGD, 1, NotSerialized)
        {
            ODBB (Arg0, 0x03)
            Return (Zero)
        }

        Method (EODB, 0, Serialized)
        {
            Acquire (LEXD, 0xFFFF)
            ODBG (EDDA)
            Release (LEXD)
        }

        Method (EODW, 0, Serialized)
        {
            Acquire (LEXD, 0xFFFF)
            ODGW (EDDA)
            Release (LEXD)
        }

        Method (EODD, 0, Serialized)
        {
            Acquire (LEXD, 0xFFFF)
            ODGD (EDDA)
            Release (LEXD)
        }

        Device (HTAM)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, 0xF3000005)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Return (ResourceTemplate ()
                {
                    Memory32Fixed (ReadOnly,
                        0xFED40000,         // Address Base
                        0x00005000,         // Address Length
                        )
                })
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (CondRefOf (\_SB.TPM._STA))
                {
                    Local0 = Zero
                }
                Else
                {
                    Local0 = 0x0F
                }

                Return (Local0)
            }
        }

        Device (HST1)
        {
            Name (_HID, EisaId ("PNP0C32"))  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Name (HS1S, 0xFF)
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                If ((HS1S == 0xFF))
                {
                    Local0 = Zero
                    If ((GTOS () >= 0x06))
                    {
                        If (ISUD ())
                        {
                            Local0 = 0x0F
                        }
                    }

                    HS1S = Local0
                }

                Return (HS1S) /* \_SB_.HST1.HS1S */
            }

            Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
            {
                0x0A, 
                0x05
            })
            Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
            {
                ^^PCI0.LPCB.EC0.HSPW (Arg0, One)
            }

            Method (GHID, 0, Serialized)
            {
                If (_STA ())
                {
                    If (^^PCI0.LPCB.EC0.CHSW (One))
                    {
                        Notify (HST1, 0x02) // Device Wake
                    }
                }

                Return (Buffer (One)
                {
                     0x01                                             // .
                })
            }
        }
    }

    Method (_SB.ISLF, 0, NotSerialized)
    {
        Local0 = LEGF /* \LEGF */
        Return (Local0)
    }

    Method (_SB.DCKD, 0, Serialized)
    {
        Local0 = Zero
        Return (Local0)
    }

    Method (_SB.HST1.ISUD, 0, Serialized)
    {
        Return (Zero)
    }

    Method (HPTS, 1, NotSerialized)
    {
        SLPT = Arg0
        If ((Arg0 == 0x04))
        {
            If (\_SB.PCI0.LPCB.EC0.ECRG)
            {
                Acquire (\_SB.PCI0.LPCB.EC0.ECMX, 0xFFFF)
                \_SB.PCI0.LPCB.EC0.ACPI = Zero
                Release (\_SB.PCI0.LPCB.EC0.ECMX)
            }
        }

        If ((Arg0 == 0x05))
        {
            If (\_SB.PCI0.LPCB.EC0.ECRG)
            {
                Acquire (\_SB.PCI0.LPCB.EC0.ECMX, 0xFFFF)
                \_SB.PCI0.LPCB.EC0.ACPI = Zero
                Release (\_SB.PCI0.LPCB.EC0.ECMX)
            }
        }

        \_SB.PCI0.G0B0 (Arg0)
        \_SB.ODGW ((0x5400 | Arg0))
    }

    Method (HWAK, 1, NotSerialized)
    {
        SLPT = Zero
        \_SB.PCI0.G0B1 (Arg0)
        \_SB.ODGW ((0x5600 | Arg0))
    }

    Name (PICM, Zero)
    Name (GPIC, Zero)
    OperationRegion (HPET, SystemMemory, 0xFED00000, 0x0200)
    Field (HPET, AnyAcc, NoLock, Preserve)
    {
        Offset (0x10), 
        TMRE,   1, 
        LGEN,   1
    }

    Method (_PIC, 1, NotSerialized)  // _PIC: Interrupt Model
    {
        PICM = Arg0
        GPIC = Arg0
        If (PICM)
        {
            \_SB.DSPI ()
            If (NAPC)
            {
                \_SB.PCI0.NAPE ()
            }
        }
    }

    Name (XX11, Buffer (0x07){})
    Method (RSTM, 0, NotSerialized)
    {
        CreateWordField (XX11, Zero, SSZE)
        CreateByteField (XX11, 0x02, SMUF)
        CreateDWordField (XX11, 0x03, SMUD)
        SSZE = 0x07
        SMUF = One
        SMUD = 0x00030D40
        \_SB.ALIB (0x0C, XX11)
        SMUF = 0x02
        SMUD = 0x55
        \_SB.ALIB (0x0C, XX11)
    }

    Name (RTMA, Buffer (0x20)
    {
        /* 0000 */  0x00, 0x5F, 0x52, 0x54, 0x58, 0x4D, 0x41, 0x43,  // ._RTXMAC
        /* 0008 */  0x5F, 0x23, 0x30, 0x24, 0xA9, 0x78, 0x84, 0x82,  // _#0$.x..
        /* 0010 */  0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // #.......
        /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
    })
    Method (_WAK, 1, NotSerialized)  // _WAK: Wake
    {
        Acquire (\_SB.PCI0.LPCB.EC0.ECMX, 0xFFFF)
        \_SB.PCI0.LPCB.EC0.CRZN = One
        \_SB.PCI0.LPCB.EC0.PHTP = 0x63
        Release (\_SB.PCI0.LPCB.EC0.ECMX)
        HWAK (Arg0)
        SWAK (Arg0)
        \_SB.AWAK (Arg0)
        \_SB.PCI0.LPCB.EC0.ACS1 = 0xFF
        If (((Arg0 == 0x03) || (Arg0 == 0x04)))
        {
            TMRE = One
            LGEN = One
            If ((GPIC != Zero))
            {
                \_SB.DSPI ()
                If (NAPC)
                {
                    \_SB.PCI0.NAPE ()
                }
            }
        }

        If ((Arg0 == 0x03))
        {
            Sleep (0x01F4)
            H24E = 0xE3
            IO80 = 0xE3
            \_SB.ECMI = 0xF1
            \_SB.ECMD = 0xE3
            Notify (\_SB.PWRB, 0x02) // Device Wake
            \_SB.PCI0.LPCB.EC0.PWUP (0x07, 0xFF)
            \_SB.PCI0.ACEL.ITAL ()
            Notify (\_SB.PCI0.GP21, Zero) // Bus Check
            \_SB.SSMI (0xEA91, Arg0, Zero, Zero, Zero)
        }

        If ((Arg0 == 0x04))
        {
            H24E = 0xE4
            IO80 = 0xE4
            \_SB.ECMI = 0xF1
            \_SB.ECMD = 0xE4
            If ((\_SB.PCI0.LPCB.EC0.OST == Zero))
            {
                \_SB.PCI0.LPCB.EC0.OST = GTOS ()
            }

            \_SB.PCI0._INI ()
            Notify (\_SB.PWRB, 0x02) // Device Wake
            \_SB.PCI0.LPCB.EC0.PWUP (0x07, 0xFF)
            \_SB.PCI0.ACEL.ITAL ()
        }

        If ((Arg0 == 0x05))
        {
            H24E = 0xE5
            IO80 = 0xE5
            \_SB.ECMI = 0xF1
            \_SB.ECMD = 0xE5
        }

        Return (Zero)
    }

    Method (_PTS, 1, NotSerialized)  // _PTS: Prepare To Sleep
    {
        HPTS (Arg0)
        SPTS (Arg0)
        If ((Arg0 == 0x03))
        {
            H24E = 0x53
            IO80 = 0x53
            \_SB.ECMI = 0xF1
            \_SB.ECMD = 0x53
            SLPS = One
        }

        If ((Arg0 == 0x04))
        {
            H24E = 0x54
            IO80 = 0x54
            \_SB.ECMI = 0xF1
            \_SB.ECMD = 0x54
            SLPS = One
            RSTU = One
        }

        If ((Arg0 == 0x05))
        {
            H24E = 0x55
            IO80 = 0x55
            \_SB.ECMI = 0xF1
            \_SB.ECMD = 0x55
        }

        \_SB.SSMI (0xEA92, Arg0, Zero, Zero, Zero)
        \_SB.APTS (Arg0)
        If (CondRefOf (\_SB.TPM.PTS))
        {
            \_SB.TPM.PTS (Arg0)
        }
    }

    Scope (_SB.PCI0)
    {
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            If ((GPIC == Zero)){}
            Else
            {
                DSPI ()
                NAPE ()
            }

            \_TZ.BOTT ()
            \_TZ.RETD ()
        }
    }

    Method (_SB.THID, 0, Serialized)
    {
        Return ("ELAN2513")
    }

    Scope (_SB)
    {
        Device (PLTF)
        {
            Name (_HID, "ACPI0010" /* Processor Container Device */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A05") /* Generic Container Device */)  // _CID: Compatible ID
            Name (_UID, One)  // _UID: Unique ID
            Device (C000)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, Zero)  // _UID: Unique ID
            }

            Device (C001)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, One)  // _UID: Unique ID
            }

            Device (C002)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x02)  // _UID: Unique ID
            }

            Device (C003)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x03)  // _UID: Unique ID
            }

            Device (C004)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x04)  // _UID: Unique ID
            }

            Device (C005)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x05)  // _UID: Unique ID
            }

            Device (C006)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x06)  // _UID: Unique ID
            }

            Device (C007)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x07)  // _UID: Unique ID
            }

            Device (C008)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x08)  // _UID: Unique ID
            }

            Device (C009)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x09)  // _UID: Unique ID
            }

            Device (C00A)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x0A)  // _UID: Unique ID
            }

            Device (C00B)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x0B)  // _UID: Unique ID
            }

            Device (C00C)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x0C)  // _UID: Unique ID
            }

            Device (C00D)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x0D)  // _UID: Unique ID
            }

            Device (C00E)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x0E)  // _UID: Unique ID
            }

            Device (C00F)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x0F)  // _UID: Unique ID
            }
        }
    }

    Scope (_TZ)
    {
        Name (TRPC, Package (0x06)
        {
            Package (0x04)
            {
                0x64, 
                0x64, 
                0x71, 
                0x80
            }, 

            Package (0x04)
            {
                0x5F, 
                0x66, 
                0x80, 
                0x80
            }, 

            Package (0x04)
            {
                0x80, 
                0x80, 
                0x80, 
                0x80
            }, 

            Package (0x04)
            {
                0x80, 
                0x80, 
                0x80, 
                0x80
            }, 

            Package (0x04)
            {
                0x32, 
                0x37, 
                0x80, 
                0x80
            }, 

            Package (0x04)
            {
                0x80, 
                0x80, 
                0x80, 
                0x80
            }
        })
        Name (TRIP, Package (0x06)
        {
            Package (0x04){}, 
            Package (0x04){}, 
            Package (0x04){}, 
            Package (0x04){}, 
            Package (0x04){}, 
            Package (0x04){}
        })
        Method (TRUP, 0, Serialized)
        {
            Local0 = Zero
        }

        Method (INTM, 1, Serialized)
        {
            Local0 = Zero
        }

        Name (WHTR, 0x1F)
        Name (OSTH, Zero)
        Name (LARE, Package (0x05){})
        Name (LARP, Package (0x05){})
        Name (CUZO, Package (0x05){})
        Name (LATR, Package (0x05){})
        Mutex (THER, 0x00)
        Name (THSC, 0x1F)
        Method (BOTT, 0, Serialized)
        {
            TRUP ()
            Local3 = SizeOf (TRPC)
            Local5 = DerefOf (TRPC [Zero])
            Local4 = SizeOf (Local5)
            Local0 = Zero
            While ((Local0 < Local3))
            {
                Local1 = Zero
                While ((Local1 < Local4))
                {
                    Local6 = DerefOf (DerefOf (TRPC [Local0]) [Local1])
                    Local7 = GETK (Local6)
                    DerefOf (TRIP [Local0]) [Local1] = Local7
                    Local1++
                }

                Local0++
            }
        }

        Method (GETK, 1, Serialized)
        {
            Local0 = (Arg0 * 0x0A)
            Local1 = (Local0 + 0x0AAC)
            Return (Local1)
        }

        Method (RETD, 0, Serialized)
        {
            Acquire (THER, 0xFFFF)
            THSC = 0x1F
            WHTR = 0x1F
            Local0 = Zero
            While ((Local0 < 0x05))
            {
                LARE [Local0] = Zero
                LARP [Local0] = Zero
                CUZO [Local0] = 0xFF
                LATR [Local0] = Zero
                Local0++
            }

            Release (THER)
        }

        Method (OTHI, 1, Serialized)
        {
            ECTI (One)
            If (Arg0)
            {
                NTHS (0x1F)
            }
        }

        Name (OTID, Zero)
        Method (ECTI, 1, Serialized)
        {
            If ((Arg0 == One))
            {
                OTID = One
            }

            If ((\_SB.PCI0.LPCB.EC0.ECRG && OTID))
            {
                THSC = 0x1F
                NTHS (0x1F)
                OTID = Zero
            }
        }

        Method (OSIT, 0, Serialized)
        {
            If ((OSTH == Zero))
            {
                INTM (Zero)
                OSTH = One
            }
        }

        Method (GETP, 2, Serialized)
        {
            Local0 = Arg1
            If ((Arg1 == One))
            {
                Local3 = DerefOf (CUZO [Arg0])
                If (((Local3 > One) && (Local3 != 0xFF)))
                {
                    Local0 = Zero
                }
            }

            Local2 = DerefOf (DerefOf (TRIP [Arg0]) [Local0])
            Return (Local2)
        }

        Method (GTTP, 5, Serialized)
        {
            Local1 = Arg2
            If (((Arg0 <= 0x05) && \_SB.PCI0.LPCB.EC0.ECRG))
            {
                Acquire (\_SB.PCI0.LPCB.EC0.ECMX, 0xFFFF)
                \_SB.PCI0.LPCB.EC0.CRZN = Arg1
                Local1 = \_SB.PCI0.LPCB.EC0.TEMP
                Release (\_SB.PCI0.LPCB.EC0.ECMX)
            }

            Local2 = Local1
            If ((Local1 < Arg3))
            {
                If ((DerefOf (LARE [Arg0]) < Arg3))
                {
                    LARP [Arg0] = Arg3
                }

                Local1 = DerefOf (LARP [Arg0])
            }
            ElseIf ((Local1 > Arg4))
            {
                If ((DerefOf (LARE [Arg0]) > Arg4))
                {
                    LARP [Arg0] = Arg4
                }

                Local1 = DerefOf (LARP [Arg0])
            }

            LARE [Arg0] = Local2
            LARP [Arg0] = Local1
            Return (Local1)
        }

        Method (SETM, 3, Serialized)
        {
            Local5 = Zero
            If ((Arg0 <= 0x04))
            {
                Acquire (THER, 0xFFFF)
                Local7 = (One << Arg0)
                If (((THSC & Local7) && \_SB.PCI0.LPCB.EC0.ECRG))
                {
                    If ((DerefOf (LATR [Arg0]) && (Arg0 != 0x04)))
                    {
                        Local4 = (Arg2 + 0x02)
                    }
                    Else
                    {
                        Local4 = Arg2
                    }

                    Local2 = DerefOf (DerefOf (TRPC [Arg0]) [Zero])
                    Local0 = One
                    While ((Local0 <= 0x03))
                    {
                        Local6 = DerefOf (DerefOf (TRPC [Arg0]) [Local0])
                        If ((Local4 < Local6))
                        {
                            Break
                        }
                        Else
                        {
                            Local0++
                        }
                    }

                    If ((Local0 == One))
                    {
                        If ((Arg2 > Local2))
                        {
                            If ((DerefOf (LATR [Arg0]) > Local6))
                            {
                                Local0++
                            }
                        }
                    }

                    Local3 = DerefOf (TRPC [Arg0])
                    Local4 = SizeOf (Local3)
                    If (((Local0 != DerefOf (CUZO [Arg0])) && (Local0 < 
                        Local4)))
                    {
                        Local5 = One
                        CUZO [Arg0] = Local0
                        If ((Arg0 <= 0x05))
                        {
                            Acquire (\_SB.PCI0.LPCB.EC0.ECMX, 0xFFFF)
                            \_SB.PCI0.LPCB.EC0.CRZN = Arg1
                            If ((DerefOf (LATR [Arg0]) == Zero))
                            {
                                \_SB.PCI0.LPCB.EC0.PLTP = Local2
                            }

                            \_SB.PCI0.LPCB.EC0.PHTP = Local6
                            Release (\_SB.PCI0.LPCB.EC0.ECMX)
                        }

                        LATR [Arg0] = Local6
                    }

                    THSC &= ~Local7
                }

                Release (THER)
            }

            Return (Local5)
        }

        Method (CHOT, 1, Serialized)
        {
            If ((DTCD & 0x00020000))
            {
                Local0 = 0x0FAC
            }
            Else
            {
                Local0 = GETP (Arg0, 0x02)
            }

            Return (Local0)
        }

        ThermalZone (CPUZ)
        {
            Method (_HOT, 0, Serialized)  // _HOT: Hot Temperature
            {
                Return (CHOT (Zero))
            }

            Method (_CRT, 0, Serialized)  // _CRT: Critical Temperature
            {
                Return (GETP (Zero, 0x03))
            }

            Method (_TMP, 0, Serialized)  // _TMP: Temperature
            {
                OSIT ()
                Local0 = Zero
                Local0 = GTTP (Zero, One, 0x10, Zero, 0x7F)
                If (SETM (Zero, One, Local0))
                {
                    Notify (CPUZ, 0x81) // Thermal Trip Point Change
                }

                Return (GETK (Local0))
            }
        }

        ThermalZone (GFXZ)
        {
            Method (_CRT, 0, Serialized)  // _CRT: Critical Temperature
            {
                Return (GETP (One, 0x03))
            }

            Method (_TMP, 0, Serialized)  // _TMP: Temperature
            {
                Local0 = Zero
                Local0 = GTTP (One, 0x02, 0x10, Zero, 0x7F)
                Return (GETK (Local0))
            }
        }

        ThermalZone (EXTZ)
        {
            Method (_CRT, 0, Serialized)  // _CRT: Critical Temperature
            {
                Return (GETP (0x02, 0x03))
            }

            Method (_TMP, 0, Serialized)  // _TMP: Temperature
            {
                Local0 = Zero
                Local0 = GTTP (0x02, 0x03, 0x10, Zero, 0x7F)
                Return (GETK (Local0))
            }
        }

        ThermalZone (LOCZ)
        {
            Method (_CRT, 0, Serialized)  // _CRT: Critical Temperature
            {
                Return (GETP (0x03, 0x03))
            }

            Method (_TMP, 0, Serialized)  // _TMP: Temperature
            {
                Local0 = Zero
                Local0 = GTTP (0x03, 0x04, 0x10, Zero, 0x7F)
                Return (GETK (Local0))
            }
        }

        ThermalZone (BATZ)
        {
            Method (_PSV, 0, NotSerialized)  // _PSV: Passive Temperature
            {
                Return (GETP (0x04, One))
            }

            Method (_PSL, 0, NotSerialized)  // _PSL: Passive List
            {
                Return (PSL ())
            }

            Name (_TSP, 0x012C)  // _TSP: Thermal Sampling Period
            Name (_TC1, 0x32)  // _TC1: Thermal Constant 1
            Name (_TC2, Zero)  // _TC2: Thermal Constant 2
            Method (_CRT, 0, Serialized)  // _CRT: Critical Temperature
            {
                Return (GETP (0x04, 0x03))
            }

            Method (_TMP, 0, Serialized)  // _TMP: Temperature
            {
                Local0 = Zero
                Local0 = GTTP (0x04, 0x05, Zero, Zero, 0x7F)
                If (SETM (0x04, 0x05, Local0))
                {
                    Notify (BATZ, 0x81) // Thermal Trip Point Change
                }

                Return (GETK (Local0))
            }
        }

        ThermalZone (CHGZ)
        {
            Method (_CRT, 0, Serialized)  // _CRT: Critical Temperature
            {
                Return (GETP (0x05, 0x03))
            }

            Method (_TMP, 0, Serialized)  // _TMP: Temperature
            {
                Local0 = Zero
                Local0 = GTTP (0x05, 0x06, 0x10, Zero, 0x7F)
                Return (GETK (Local0))
            }
        }

        Method (NTHS, 1, Serialized)
        {
            If ((Arg0 & One))
            {
                Notify (CPUZ, 0x80) // Thermal Status Change
            }

            If ((Arg0 & 0x02))
            {
                Notify (GFXZ, 0x80) // Thermal Status Change
            }

            If ((Arg0 & 0x04))
            {
                Notify (EXTZ, 0x80) // Thermal Status Change
            }

            If ((Arg0 & 0x08))
            {
                Notify (LOCZ, 0x80) // Thermal Status Change
            }

            If ((Arg0 & 0x10))
            {
                Notify (BATZ, 0x80) // Thermal Status Change
            }

            If ((Arg0 & 0x20))
            {
                Notify (CHGZ, 0x80) // Thermal Status Change
            }
        }

        Method (ECTE, 1, Serialized)
        {
            Local1 = Zero
            If (Arg0)
            {
                If ((Arg0 & One))
                {
                    Local1 |= One
                }

                If ((Arg0 & 0x02))
                {
                    Local1 |= 0x02
                }

                If ((Arg0 & 0x04))
                {
                    Local1 |= 0x04
                }

                If ((Arg0 & 0x08))
                {
                    Local1 |= 0x08
                }

                If ((Arg0 & 0x10))
                {
                    Local1 |= 0x10
                }

                If ((Arg0 & 0x20))
                {
                    Local1 |= 0x20
                }
            }
            Else
            {
                Local1 |= 0x10
            }

            Acquire (THER, 0xFFFF)
            THSC |= Local1
            Release (THER)
            NTHS (Local1)
        }

        Method (GFRM, 0, Serialized)
        {
            Local0 = Zero
            If (\_SB.PCI0.LPCB.EC0.ECRG)
            {
                Acquire (\_SB.PCI0.LPCB.EC0.ECMX, 0xFFFF)
                Local0 = \_SB.PCI0.LPCB.EC0.FRDC
                Release (\_SB.PCI0.LPCB.EC0.ECMX)
                If (Local0)
                {
                    Local1 = (Local0 >> One)
                    Local2 = (0x0003C000 + Local1)
                    Divide (Local2, Local0, Local1, Local0)
                }
            }

            Return (Local0)
        }

        Method (GFVE, 1, Serialized)
        {
            Local0 = Zero
            If (\_SB.PCI0.LPCB.EC0.ECRG)
            {
                Acquire (\_SB.PCI0.LPCB.EC0.ECMX, 0xFFFF)
                If ((Arg0 == One))
                {
                    Local0 = \_SB.PCI0.LPCB.EC0.FRDC
                }
                ElseIf ((Arg0 == 0x02))
                {
                    Local0 = \_SB.PCI0.LPCB.EC0.FR2C
                }

                Release (\_SB.PCI0.LPCB.EC0.ECMX)
            }

            Return (Local0)
        }

        Method (GTFV, 1, Serialized)
        {
            Local0 = Zero
            If (\_SB.PCI0.LPCB.EC0.ECRG)
            {
                Acquire (\_SB.PCI0.LPCB.EC0.ECMX, 0xFFFF)
                If ((Arg0 == One))
                {
                    Local0 = \_SB.PCI0.LPCB.EC0.FTGC
                }
                ElseIf ((Arg0 == 0x02))
                {
                    Local0 = \_SB.PCI0.LPCB.EC0.FT2C
                }

                Release (\_SB.PCI0.LPCB.EC0.ECMX)
            }

            Return (Local0)
        }

        Method (GTRM, 0, Serialized)
        {
            Local0 = Zero
            If (\_SB.PCI0.LPCB.EC0.ECRG)
            {
                Acquire (\_SB.PCI0.LPCB.EC0.ECMX, 0xFFFF)
                Local0 = \_SB.PCI0.LPCB.EC0.FTGC
                Release (\_SB.PCI0.LPCB.EC0.ECMX)
                If (Local0)
                {
                    Local1 = (Local0 >> One)
                    Local2 = (0x0003C000 + Local1)
                    Divide (Local2, Local0, Local1, Local0)
                }
            }

            Return (Local0)
        }

        Method (GFSD, 0, Serialized)
        {
            Local0 = GFRM ()
            Local1 = (Local0 * 0x64)
            Divide (Local1, AMFR, Local1, Local2)
            Return (Local2)
        }

        Method (CTCT, 1, Serialized)
        {
            Local1 = (Arg0 * AMFR) /* \AMFR */
            Divide (Local1, 0x64, Local2, Local0)
            If (Local0)
            {
                Local1 = (Local0 >> One)
                Local2 = (0x0003C000 + Local1)
                Divide (Local2, Local0, Local1, Local0)
            }

            If ((Local0 > 0xF4))
            {
                Local0 = 0xF4
            }

            Return (Local0)
        }

        Method (GCGC, 0, Serialized)
        {
            Name (LTMP, Buffer (0x02){})
            If (\_SB.PCI0.LPCB.EC0.ECRG)
            {
                Acquire (\_SB.PCI0.LPCB.EC0.ECMX, 0xFFFF)
                LTMP = \_SB.PCI0.LPCB.EC0.BPR
                Release (\_SB.PCI0.LPCB.EC0.ECMX)
            }

            Return (LTMP) /* \_TZ_.GCGC.LTMP */
        }

        Name (MIFA, Zero)
        Method (CATZ, 1, Serialized)
        {
            Local1 = Arg0
            Return (Local1)
        }

        Method (PSL, 0, Serialized)
        {
            Return (Package (0x10)
            {
                \_SB.PLTF.C000, 
                \_SB.PLTF.C001, 
                \_SB.PLTF.C002, 
                \_SB.PLTF.C003, 
                \_SB.PLTF.C004, 
                \_SB.PLTF.C005, 
                \_SB.PLTF.C006, 
                \_SB.PLTF.C007, 
                \_SB.PLTF.C008, 
                \_SB.PLTF.C009, 
                \_SB.PLTF.C00A, 
                \_SB.PLTF.C00B, 
                \_SB.PLTF.C00C, 
                \_SB.PLTF.C00D, 
                \_SB.PLTF.C00E, 
                \_SB.PLTF.C00F
            })
        }

        Method (GDTP, 2, Serialized)
        {
            If ((Arg1 || DTZS ()))
            {
                Local0 = \_SB.PCI0.SMBS.SRDW (Arg0, 0x05, Zero)
                If ((Local0 == 0xFFFFFFFF))
                {
                    Local0 = Zero
                }
                ElseIf ((Local0 & 0x1000))
                {
                    Local0 = Zero
                }
                Else
                {
                    Local0 >>= 0x04
                    Local0 &= 0xFF
                }

                Return (GETK (Local0))
            }
            Else
            {
                Return (0x0AAC)
            }
        }

        Method (DTZS, 0, NotSerialized)
        {
            If ((DTCD & 0x00010000))
            {
                Return (0x0F)
            }

            Return (Zero)
        }

        Name (ATV4, Zero)
        Name (ATV3, One)
        Name (ATV2, 0x02)
        Name (ATV1, 0x03)
        Name (ATV0, 0x04)
        Name (CUFA, Zero)
    }

    Name (NIST, Package (0x10)
    {
        "0", 
        "1", 
        "2", 
        "3", 
        "4", 
        "5", 
        "6", 
        "7", 
        "8", 
        "9", 
        "A", 
        "B", 
        "C", 
        "D", 
        "E", 
        "F"
    })
    Method (ISTR, 2, NotSerialized)
    {
        Local0 = Arg0
        Local7 = ""
        Local4 = Arg1
        While ((Local4 > Zero))
        {
            Local1 = (Local0 & 0x0F)
            Local2 = DerefOf (NIST [Local1])
            Concatenate (Local2, Local7, Local3)
            Local7 = Local3
            Local0 >>= 0x04
            Local4--
        }

        Return (Local7)
    }

    Method (SRCP, 2, Serialized)
    {
        Local7 = SizeOf (Arg0)
        If ((Local7 != SizeOf (Arg1)))
        {
            Return (Zero)
        }

        Name (ST00, Buffer (Local7){})
        Name (ST01, Buffer (Local7){})
        ST00 = Arg0
        ST01 = Arg1
        Local6 = Zero
        Local0 = One
        While (((Local6 != Local7) && Local0))
        {
            Local2 = DerefOf (ST00 [Local6])
            Local3 = DerefOf (ST01 [Local6])
            Local6++
            If ((Local2 != Local3))
            {
                Local0 = Zero
            }
        }

        Return (Local0)
    }

    Method (SRCM, 3, Serialized)
    {
        Name (ST00, Buffer (0x8C){})
        Name (ST01, Buffer (0x8C){})
        ST00 = Arg0
        ST01 = Arg1
        Local6 = Zero
        Local0 = One
        While (((Local6 != Arg2) && Local0))
        {
            Local2 = DerefOf (ST00 [Local6])
            Local3 = DerefOf (ST01 [Local6])
            Local6++
            If ((Local2 != Local3))
            {
                Local0 = Zero
            }
        }

        Return (Local0)
    }

    Name (EUPC, Package (0x04)
    {
        0xFF, 
        0xFF, 
        Zero, 
        Zero
    })
    Name (EPLD, Package (0x01)
    {
        Buffer (0x14)
        {
            /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0008 */  0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // 0.......
            /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
        }
    })
    Method (GPLD, 2, Serialized)
    {
        Name (PCKG, Package (0x01)
        {
            Buffer (0x14){}
        })
        CreateField (DerefOf (PCKG [Zero]), Zero, 0x07, REV)
        REV = One
        CreateField (DerefOf (PCKG [Zero]), 0x40, One, VISI)
        VISI = Arg0
        CreateField (DerefOf (PCKG [Zero]), 0x57, 0x08, GPOS)
        GPOS = Arg1
        Return (PCKG) /* \GPLD.PCKG */
    }

    Method (TPLD, 2, Serialized)
    {
        Name (PCKG, Package (0x01)
        {
            Buffer (0x10){}
        })
        CreateField (DerefOf (PCKG [Zero]), Zero, 0x07, REV)
        REV = One
        CreateField (DerefOf (PCKG [Zero]), 0x40, One, VISI)
        VISI = Arg0
        CreateField (DerefOf (PCKG [Zero]), 0x57, 0x08, GPOS)
        GPOS = Arg1
        CreateField (DerefOf (PCKG [Zero]), 0x4A, 0x04, SHAP)
        SHAP = One
        CreateField (DerefOf (PCKG [Zero]), 0x20, 0x10, WID)
        WID = 0x08
        CreateField (DerefOf (PCKG [Zero]), 0x30, 0x10, HGT)
        HGT = 0x03
        Return (PCKG) /* \TPLD.PCKG */
    }

    Method (GUPC, 2, Serialized)
    {
        Name (PCKG, Package (0x04)
        {
            Zero, 
            0xFF, 
            Zero, 
            Zero
        })
        PCKG [Zero] = Arg0
        PCKG [One] = Arg1
        Return (PCKG) /* \GUPC.PCKG */
    }

    Method (TUPC, 1, Serialized)
    {
        Name (PCKG, Package (0x04)
        {
            One, 
            Zero, 
            Zero, 
            Zero
        })
        PCKG [One] = Arg0
        Return (PCKG) /* \TUPC.PCKG */
    }

    Method (CBRT, 2, Serialized)
    {
        Local6 = SizeOf (Arg0)
        Local7 = SizeOf (Arg1)
        If ((Local6 == Zero))
        {
            Local0 = Arg1
            Return (Local0)
        }

        If ((Local7 == Zero))
        {
            Local0 = Arg0
            Return (Local0)
        }

        Local1 = (Local7 + Local6)
        Local1 -= 0x02
        Local0 = Buffer (Local1){}
        Local1 = Zero
        While ((Local1 < SizeOf (Arg0)))
        {
            Local0 [Local1] = DerefOf (Arg0 [Local1])
            Local1++
        }

        Local1 -= 0x02
        Local2 = Zero
        While ((Local2 < SizeOf (Arg1)))
        {
            Local0 [Local1] = DerefOf (Arg1 [Local2])
            Local1++
            Local2++
        }

        Return (Local0)
    }

    Scope (_SB)
    {
        Device (WLBU)
        {
            Name (_HID, EisaId ("HPQ6001"))  // _HID: Hardware ID
            Name (DEPT, 0xFF)
            Method (INIT, 0, Serialized)
            {
                If ((DEPT == 0x0F))
                {
                    DEPT = 0xFF
                }
            }

            Method (_STA, 0, Serialized)  // _STA: Status
            {
                If ((DEPT == 0xFF))
                {
                    Local0 = Zero
                    If ((GTOS () >= 0x08))
                    {
                        Local0 = 0x0F
                        UWLS ()
                    }

                    DEPT = Local0
                }

                Return (DEPT) /* \_SB_.WLBU.DEPT */
            }

            Method (UWLS, 0, Serialized)
            {
                Local0 = WDDA /* \WDDA */
                Local1 = DerefOf (Local0 [0x07])
                If ((WFLS & 0x02))
                {
                    WFLS &= 0xFFFFFFFFFFFFFFFD
                }

                Local1 *= 0x10
                Local1 += 0x10
                Local2 = 0x1B
                Local5 = 0x10
                Local4 = Zero
                While ((Local2 < Local1))
                {
                    Local3 = DerefOf (Local0 [Local2])
                    Local6 = DerefOf (Local0 [Local5])
                    If (((Local3 & 0x0A) != 0x0A))
                    {
                        Local0 [Local2] = (Local3 | 0x0A)
                        Local4 = One
                    }

                    If ((Local6 == Zero))
                    {
                        If (((Local3 & 0x10) != Zero))
                        {
                            Local0 [Local2] = (Local3 & 0xEF)
                            Local4 = One
                        }
                    }

                    Local2 += 0x10
                    Local5 += 0x10
                }

                If (Local4)
                {
                    WDDA = Local0
                    SSMI (0xEA84, Zero, Zero, Zero, Zero)
                }
            }

            Method (WLED, 1, Serialized)
            {
                SSMI (0xEA90, Arg0, Zero, Zero, Zero)
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Method (G0B0, 1, Serialized)
        {
        }

        Method (G0B1, 1, Serialized)
        {
        }
    }

    Scope (_SB)
    {
        Name (BCLI, Zero)
        Name (BCLS, Package (0x03)
        {
            Package (0x0D){}, 
            Package (0x17){}, 
            Package (0x1B){}
        })
        Name (NITS, Package (0x03)
        {
            Buffer (0x16){}, 
            Buffer (0x2A){}, 
            Buffer (0x32){}
        })
        Name (G028, Zero)
        Method (BCL, 0, Serialized)
        {
            If ((G028 == Zero))
            {
                If ((ILUX == One))
                {
                    G080 = G081 /* \G081 */
                }
                ElseIf ((GTOS () > 0x06))
                {
                    G080 = G081 /* \G081 */
                }

                Local7 = Zero
                If ((G080 >= 0x15))
                {
                    BCLI = One
                    Local7 = One
                    If ((G080 == 0x19))
                    {
                        BCLI = 0x02
                    }
                }

                Local1 = Zero
                If ((G08D & 0x10))
                {
                    Local0 = G084 /* \G084 */
                    Local5 = Zero
                    Local4 = G082 /* \G082 */
                    While ((Local1 < G080))
                    {
                        If (Local7)
                        {
                            Local3 = Local1
                        }
                        Else
                        {
                            Local3 = DerefOf (Local4 [Local1])
                        }

                        Local2 = DerefOf (Local0 [Local3])
                        Local3 = (Local2 * 0x64)
                        Local2 = ((Local3 + 0x7F) / 0xFF)
                        DerefOf (BCLS [BCLI]) [(Local1 + 0x02)] = 
                            Local2
                        If ((Local2 > Local5))
                        {
                            Local5 = Local2
                        }

                        Local1++
                    }

                    Local3 = (G080 >> One)
                    DerefOf (BCLS [BCLI]) [One] = DerefOf (DerefOf (
                        BCLS [BCLI]) [Local3])
                    DerefOf (BCLS [BCLI]) [Zero] = Local5
                }
                Else
                {
                    Local4 = G083 /* \G083 */
                    Local0 = G082 /* \G082 */
                    While ((Local1 < (G080 + 0x02)))
                    {
                        If ((Local7 || (Local1 < 0x02)))
                        {
                            Local3 = Local1
                        }
                        Else
                        {
                            Local3 = DerefOf (Local0 [(Local1 - 0x02)])
                            Local3 += 0x02
                        }

                        Local2 = DerefOf (Local4 [Local3])
                        DerefOf (BCLS [BCLI]) [Local1] = Local2
                        Local1++
                    }
                }

                Local0 = G085 /* \G085 */
                Local1 = G082 /* \G082 */
                Local2 = Zero
                While ((Local2 < G080))
                {
                    If (Local7)
                    {
                        Local3 = Local2
                    }
                    Else
                    {
                        Local3 = DerefOf (Local1 [Local2])
                    }

                    Local3 <<= One
                    Local5 = (Local2 << One)
                    Local4 = DerefOf (Local0 [Local3])
                    DerefOf (NITS [BCLI]) [Local5] = Local4
                    Local4 = DerefOf (Local0 [(Local3 + One)])
                    DerefOf (NITS [BCLI]) [(Local5 + One)] = 
                        Local4
                    Local2++
                }

                G028 = One
            }

            Return (DerefOf (BCLS [BCLI]))
        }

        Name (G029, Zero)
        Name (G02A, 0x64)
        Method (BCM, 1, Serialized)
        {
            Local0 = Zero
            If ((ILUX == One))
            {
                G08E |= 0x40
                Local0 = One
            }
            ElseIf ((GTOS () > 0x05))
            {
                G08E |= 0x40
                Local0 = One
            }

            G02A = Arg0
            Local1 = Match (DerefOf (BCLS [BCLI]), MGE, Arg0, MTR, Zero, 
                0x02)
            If ((Local1 == Ones))
            {
                Local1 = (SizeOf (DerefOf (BCLS [BCLI])) - One)
            }

            Local1 -= 0x02
            If (Local0)
            {
                G093 = Local1
            }

            G029 = One
            Return (Local0)
        }

        Method (BQC, 0, Serialized)
        {
            Local0 = G02A /* \_SB_.G02A */
            Return (Local0)
        }

        Method (HDDC, 1, Serialized)
        {
            If ((Arg0 == 0x02))
            {
                Local1 = G03E /* \G03E */
            }
            Else
            {
                Local3 = G03E /* \G03E */
                Local0 = 0x80
                Local1 = Buffer (Local0){}
                Local2 = Zero
                While ((Local2 < Local0))
                {
                    Local1 [Local2] = DerefOf (Local3 [Local2])
                    Local2++
                }
            }

            Return (Local1)
        }

        Method (G02B, 0, Serialized)
        {
            Local0 = G093 /* \G093 */
            ODGW (Local0)
            Local4 = (G080 - One)
            If ((G093 > Local4))
            {
                Local0 = Local4
            }

            If ((G093 < Zero))
            {
                Local0 = Zero
            }

            Local2 = G084 /* \G084 */
            Local5 = G082 /* \G082 */
            If ((G080 == 0x0B))
            {
                Local0 = DerefOf (Local5 [Local0])
            }

            Local1 = DerefOf (Local2 [Local0])
            ODGW (Local1)
            Return (Local1)
        }
    }

    Scope (_SB.PCI0)
    {
        Device (MEMR)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Method (BAR3, 0, NotSerialized)
            {
                Return (^^BUSA.PSP.PBR3) /* \_SB_.PCI0.BUSA.PSP_.PBR3 */
            }

            Name (MEM1, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00000000,         // Address Length
                    _Y03)
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00000000,         // Address Length
                    _Y04)
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00000000,         // Address Length
                    _Y05)
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateDWordField (MEM1, \_SB.PCI0.MEMR._Y03._BAS, MB01)  // _BAS: Base Address
                CreateDWordField (MEM1, \_SB.PCI0.MEMR._Y03._LEN, ML01)  // _LEN: Length
                CreateDWordField (MEM1, \_SB.PCI0.MEMR._Y04._BAS, MB02)  // _BAS: Base Address
                CreateDWordField (MEM1, \_SB.PCI0.MEMR._Y04._LEN, ML02)  // _LEN: Length
                CreateDWordField (MEM1, \_SB.PCI0.MEMR._Y05._BAS, MB03)  // _BAS: Base Address
                CreateDWordField (MEM1, \_SB.PCI0.MEMR._Y05._LEN, ML03)  // _LEN: Length
                If (GPIC)
                {
                    MB01 = 0xFEC00000
                    MB02 = 0xFEE00000
                    MB03 = 0xFEC20000
                    ML01 = 0x1000
                    ML02 = 0x1000
                    ML03 = 0x1000
                }

                If ((BAR3 () != Zero))
                {
                    MB03 = BAR3 ()
                    ML03 = 0x00100000
                }

                Return (MEM1) /* \_SB_.PCI0.MEMR.MEM1 */
            }
        }

        OperationRegion (NAPC, PCI_Config, 0xF8, 0x08)
        Field (NAPC, DWordAcc, NoLock, Preserve)
        {
            NAPX,   32, 
            NAPD,   32
        }

        Mutex (NAPM, 0x00)
        Method (NAPE, 0, NotSerialized)
        {
            Acquire (NAPM, 0xFFFF)
            NAPX = Zero
            Local0 = NAPD /* \_SB_.PCI0.NAPD */
            Local0 &= 0xFFFFFFEF
            NAPD = Local0
            Release (NAPM)
        }
    }

    Scope (_SB.PCI0.GP12)
    {
        OperationRegion (PCI, PCI_Config, Zero, 0x0100)
        Field (PCI, AnyAcc, NoLock, Preserve)
        {
            PVID,   16, 
            PDID,   16, 
            Offset (0x68), 
                ,   4, 
            LIDE,   1, 
            Offset (0x69), 
            CPME,   1
        }

        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Local0 = Package (0x02)
                {
                    0x08, 
                    Zero
                }
            If (WOLE)
            {
                Local0 [One] = 0x05
            }

            Return (Local0)
        }

        Device (NIC)
        {
            OperationRegion (PCI, PCI_Config, Zero, 0x0100)
            Field (PCI, AnyAcc, NoLock, Preserve)
            {
                PVID,   16, 
                PDID,   16, 
                Offset (0xBC), 
                LICR,   16
            }

            Name (_ADR, Zero)  // _ADR: Address
            Method (_PRW, 0, Serialized)  // _PRW: Power Resources for Wake
            {
                Return (^^_PRW ())
            }
        }
    }

    Scope (_SB.PCI0.GP13)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Local0 = Package (0x02)
                {
                    0x08, 
                    Zero
                }
            If ((WOWA == One))
            {
                Local0 [One] = 0x05
            }

            Return (Local0)
        }

        Device (NCRD)
        {
            Name (_ADR, Zero)  // _ADR: Address
            OperationRegion (PCFG, PCI_Config, Zero, 0x08)
            Field (PCFG, DWordAcc, NoLock, Preserve)
            {
                DVID,   32, 
                PCMS,   32
            }

            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
            {
                Return (EPLD) /* \EPLD */
            }

            Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
            {
                Return (Zero)
            }

            Method (_PRW, 0, Serialized)  // _PRW: Power Resources for Wake
            {
                Return (^^_PRW ())
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (!GV64)
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }

    Scope (_SB.PCI0.GP21)
    {
        Device (CRDR)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
            {
                Return (Zero)
            }

            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
            {
                Return (EPLD) /* \EPLD */
            }
        }
    }

    Name (PRWP, Package (0x02)
    {
        Zero, 
        Zero
    })
    Method (GPRW, 2, NotSerialized)
    {
        PRWP [Zero] = Arg0
        PRWP [One] = Arg1
        If (((DAS3 == Zero) && (DAS1 == Zero)))
        {
            If ((Arg1 <= 0x03))
            {
                PRWP [One] = Zero
            }
        }
        Else
        {
            If (((DAS3 == Zero) && (Arg1 == 0x03)))
            {
                PRWP [One] = One
            }

            If (((DAS1 == Zero) && (Arg1 == One)))
            {
                PRWP [One] = Zero
            }
        }

        Return (PRWP) /* \PRWP */
    }

    Method (SPTS, 1, NotSerialized)
    {
        If ((Arg0 == 0x03))
        {
            RSTU = Zero
        }

        If ((Arg0 == 0x04)){}
        CLPS = One
        SLPS = One
        PEWS = PEWS /* \PEWS */
    }

    Method (SWAK, 1, NotSerialized)
    {
        If ((Arg0 == 0x03))
        {
            RSTU = One
        }

        PEWS = PEWS /* \PEWS */
        PWDE = One
        PEWD = Zero
    }

    OperationRegion (PIRQ, SystemIO, 0x0C00, 0x02)
    Field (PIRQ, ByteAcc, NoLock, Preserve)
    {
        PIDX,   8, 
        PDAT,   8
    }

    IndexField (PIDX, PDAT, ByteAcc, NoLock, Preserve)
    {
        PIRA,   8, 
        PIRB,   8, 
        PIRC,   8, 
        PIRD,   8, 
        PIRE,   8, 
        PIRF,   8, 
        PIRG,   8, 
        PIRH,   8, 
        Offset (0x0C), 
        SIRA,   8, 
        SIRB,   8, 
        SIRC,   8, 
        SIRD,   8, 
        PIRS,   8, 
        Offset (0x13), 
        HDAD,   8, 
        Offset (0x17), 
        SDCL,   8, 
        Offset (0x1A), 
        SDIO,   8, 
        Offset (0x30), 
        USB1,   8, 
        Offset (0x34), 
        USB3,   8, 
        Offset (0x41), 
        SATA,   8, 
        Offset (0x62), 
        GIOC,   8, 
        Offset (0x70), 
        I2C0,   8, 
        I2C1,   8, 
        I2C2,   8, 
        I2C3,   8, 
        URT0,   8, 
        URT1,   8
    }

    OperationRegion (KBDD, SystemIO, 0x64, One)
    Field (KBDD, ByteAcc, NoLock, Preserve)
    {
        PD64,   8
    }

    Method (INTA, 1, NotSerialized)
    {
        PIRA = Arg0
        If (PICM)
        {
            HDAD = Arg0
            SDCL = Arg0
        }
    }

    Method (INTB, 1, NotSerialized)
    {
        PIRB = Arg0
    }

    Method (INTC, 1, NotSerialized)
    {
        PIRC = Arg0
        If (PICM)
        {
            USB1 = Arg0
            USB3 = Arg0
        }
    }

    Method (INTD, 1, NotSerialized)
    {
        PIRD = Arg0
        If (PICM)
        {
            SATA = Arg0
        }
    }

    Name (PRS1, ResourceTemplate ()
    {
        IRQ (Level, ActiveLow, Shared, )
            {3,5,6,10,11}
    })
    Name (BUFA, ResourceTemplate ()
    {
        IRQ (Level, ActiveLow, Shared, )
            {15}
    })
    Device (LNKA)
    {
        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
        Name (_UID, One)  // _UID: Unique ID
        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If ((PIRA && (PIRA != 0x1F)))
            {
                Return (0x0B)
            }
            Else
            {
                Return (0x09)
            }
        }

        Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
        {
            Return (PRS1) /* \PRS1 */
        }

        Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
        {
            INTA (0x1F)
        }

        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
        {
            CreateWordField (BUFA, One, IRQX)
            IRQX = (One << PIRA) /* \PIRA */
            Return (BUFA) /* \BUFA */
        }

        Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
        {
            CreateWordField (Arg0, One, IRA)
            FindSetRightBit (IRA, Local0)
            Local0--
            PIRA = Local0
        }
    }

    Device (LNKB)
    {
        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
        Name (_UID, 0x02)  // _UID: Unique ID
        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If ((PIRB && (PIRB != 0x1F)))
            {
                Return (0x0B)
            }
            Else
            {
                Return (0x09)
            }
        }

        Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
        {
            Return (PRS1) /* \PRS1 */
        }

        Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
        {
            INTB (0x1F)
        }

        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
        {
            CreateWordField (BUFA, One, IRQX)
            IRQX = (One << PIRB) /* \PIRB */
            Return (BUFA) /* \BUFA */
        }

        Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
        {
            CreateWordField (Arg0, One, IRA)
            FindSetRightBit (IRA, Local0)
            Local0--
            PIRB = Local0
        }
    }

    Device (LNKC)
    {
        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
        Name (_UID, 0x03)  // _UID: Unique ID
        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If ((PIRC && (PIRC != 0x1F)))
            {
                Return (0x0B)
            }
            Else
            {
                Return (0x09)
            }
        }

        Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
        {
            Return (PRS1) /* \PRS1 */
        }

        Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
        {
            INTC (0x1F)
        }

        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
        {
            CreateWordField (BUFA, One, IRQX)
            IRQX = (One << PIRC) /* \PIRC */
            Return (BUFA) /* \BUFA */
        }

        Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
        {
            CreateWordField (Arg0, One, IRA)
            FindSetRightBit (IRA, Local0)
            Local0--
            PIRC = Local0
        }
    }

    Device (LNKD)
    {
        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
        Name (_UID, 0x04)  // _UID: Unique ID
        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If ((PIRD && (PIRD != 0x1F)))
            {
                Return (0x0B)
            }
            Else
            {
                Return (0x09)
            }
        }

        Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
        {
            Return (PRS1) /* \PRS1 */
        }

        Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
        {
            INTD (0x1F)
        }

        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
        {
            CreateWordField (BUFA, One, IRQX)
            IRQX = (One << PIRD) /* \PIRD */
            Return (BUFA) /* \BUFA */
        }

        Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
        {
            CreateWordField (Arg0, One, IRA)
            FindSetRightBit (IRA, Local0)
            Local0--
            PIRD = Local0
        }
    }

    Device (LNKE)
    {
        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
        Name (_UID, 0x05)  // _UID: Unique ID
        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If ((PIRE && (PIRE != 0x1F)))
            {
                Return (0x0B)
            }
            Else
            {
                Return (0x09)
            }
        }

        Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
        {
            Return (PRS1) /* \PRS1 */
        }

        Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
        {
            PIRE = 0x1F
        }

        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
        {
            CreateWordField (BUFA, One, IRQX)
            IRQX = (One << PIRE) /* \PIRE */
            Return (BUFA) /* \BUFA */
        }

        Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
        {
            CreateWordField (Arg0, One, IRA)
            FindSetRightBit (IRA, Local0)
            Local0--
            PIRE = Local0
        }
    }

    Device (LNKF)
    {
        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
        Name (_UID, 0x06)  // _UID: Unique ID
        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If ((PIRF && (PIRF != 0x1F)))
            {
                Return (0x0B)
            }
            Else
            {
                Return (0x09)
            }
        }

        Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
        {
            Return (PRS1) /* \PRS1 */
        }

        Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
        {
            PIRF = 0x1F
        }

        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
        {
            CreateWordField (BUFA, One, IRQX)
            IRQX = (One << PIRF) /* \PIRF */
            Return (BUFA) /* \BUFA */
        }

        Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
        {
            CreateWordField (Arg0, One, IRA)
            FindSetRightBit (IRA, Local0)
            Local0--
            PIRF = Local0
        }
    }

    Device (LNKG)
    {
        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
        Name (_UID, 0x07)  // _UID: Unique ID
        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If ((PIRG && (PIRG != 0x1F)))
            {
                Return (0x0B)
            }
            Else
            {
                Return (0x09)
            }
        }

        Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
        {
            Return (PRS1) /* \PRS1 */
        }

        Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
        {
            PIRG = 0x1F
        }

        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
        {
            CreateWordField (BUFA, One, IRQX)
            IRQX = (One << PIRG) /* \PIRG */
            Return (BUFA) /* \BUFA */
        }

        Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
        {
            CreateWordField (Arg0, One, IRA)
            FindSetRightBit (IRA, Local0)
            Local0--
            PIRG = Local0
        }
    }

    Device (LNKH)
    {
        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
        Name (_UID, 0x08)  // _UID: Unique ID
        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If ((PIRH && (PIRH != 0x1F)))
            {
                Return (0x0B)
            }
            Else
            {
                Return (0x09)
            }
        }

        Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
        {
            Return (PRS1) /* \PRS1 */
        }

        Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
        {
            PIRH = 0x1F
        }

        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
        {
            CreateWordField (BUFA, One, IRQX)
            IRQX = (One << PIRH) /* \PIRH */
            Return (BUFA) /* \BUFA */
        }

        Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
        {
            CreateWordField (Arg0, One, IRA)
            FindSetRightBit (IRA, Local0)
            Local0--
            PIRH = Local0
        }
    }

    Scope (_SB.PCI0)
    {
        Device (SMBS)
        {
            Name (_ADR, 0x00140000)  // _ADR: Address
            OperationRegion (IRQF, PCI_Config, Zero, 0x0100)
            Field (IRQF, AnyAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                RVID,   8
            }

            OperationRegion (SMBO, SystemIO, 0x0B00, 0x07)
            Field (SMBO, ByteAcc, NoLock, Preserve)
            {
                HSSS,   8, 
                SLSS,   8, 
                HSCT,   8, 
                HSCD,   8, 
                XMSL,   8, 
                HSD0,   8, 
                HSD1,   8
            }

            OperationRegion (SMIC, SystemMemory, 0xFED81500, 0x00800000)
            Field (SMIC, ByteAcc, NoLock, Preserve)
            {
                Offset (0x204), 
                    ,   22, 
                O129,   1
            }

            Method (SMBA, 3, Serialized)
            {
                Acquire (_GL, 0xFFFF)
                Local2 = Zero
                Local0 = 0xFA
                While (((HSSS & One) && (Local0 > Zero)))
                {
                    Stall (0x64)
                    Local0--
                }

                If (Local0)
                {
                    HSCD = Arg1
                    XMSL = Arg0
                    If (((Arg0 & One) == Zero))
                    {
                        HSD0 = Arg2
                    }

                    HSSS = 0xFF
                    HSCT = 0x48
                    Local0 = 0xFA
                    While ((((HSSS & 0x1E) == Zero) && (Local0 > Zero)))
                    {
                        Stall (0x64)
                        Local0--
                    }

                    Local1 = (HSSS & 0x1C)
                    HSSS = 0xFF
                    If (((Local1 == Zero) && (Arg0 & One)))
                    {
                        Local2 = HSD0 /* \_SB_.PCI0.SMBS.HSD0 */
                    }
                }
                Else
                {
                    Local1 = One
                }

                Release (_GL)
                If ((Arg0 & One))
                {
                    Local3 = (Local1 << 0x08)
                    Local1 = (Local3 | Local2)
                }

                Return (Local1)
            }

            Method (SRDW, 3, Serialized)
            {
                Acquire (_GL, 0xFFFF)
                Local2 = Zero
                Local0 = 0xFA
                While (((HSSS & One) && (Local0 > Zero)))
                {
                    Stall (0x64)
                    Local0--
                }

                If (Local0)
                {
                    HSCD = Arg1
                    XMSL = Arg0
                    If (((Arg0 & One) == Zero))
                    {
                        HSD0 = Arg2
                    }

                    HSSS = 0xFF
                    HSCT = 0x4C
                    Local0 = 0xFA
                    While ((((HSSS & 0x1E) == Zero) && (Local0 > Zero)))
                    {
                        Stall (0x64)
                        Local0--
                    }

                    Local1 = (HSSS & 0x1C)
                    HSSS = 0xFF
                    If (((Local1 == Zero) && (Arg0 & One)))
                    {
                        Local2 = ((HSD0 << 0x08) | HSD1)
                    }
                }
                Else
                {
                    Local1 = One
                }

                Release (_GL)
                If ((Arg0 & One))
                {
                    Local3 = (Local1 << 0x10)
                    Local1 = (Local3 | Local2)
                }

                Return (Local1)
            }
        }

        Device (HPET)
        {
            Name (_HID, EisaId ("PNP0103") /* HPET System Timer */)  // _HID: Hardware ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((HPEN == One))
                {
                    If ((GOSI >= 0x06))
                    {
                        Return (0x0F)
                    }

                    HPEN = Zero
                    Return (One)
                }

                Return (One)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQNoFlags ()
                        {0}
                    IRQNoFlags ()
                        {8}
                    Memory32Fixed (ReadOnly,
                        0xFED00000,         // Address Base
                        0x00000400,         // Address Length
                        _Y06)
                })
                CreateDWordField (BUF0, \_SB.PCI0.HPET._CRS._Y06._BAS, HPEB)  // _BAS: Base Address
                Local0 = 0xFED00000
                HPEB = (Local0 & 0xFFFFFC00)
                Return (BUF0) /* \_SB_.PCI0.HPET._CRS.BUF0 */
            }
        }
    }

    Name (TSOS, 0x75)
    If (CondRefOf (\_OSI))
    {
        If (_OSI ("Windows 2009"))
        {
            TSOS = 0x50
        }

        If (_OSI ("Windows 2015"))
        {
            TSOS = 0x70
        }
    }

    Scope (_SB)
    {
        OperationRegion (ECMC, SystemIO, 0x72, 0x02)
        Field (ECMC, AnyAcc, NoLock, Preserve)
        {
            ECMI,   8, 
            ECMD,   8
        }

        IndexField (ECMI, ECMD, ByteAcc, NoLock, Preserve)
        {
            Offset (0x08), 
            FRTB,   32
        }

        OperationRegion (FRTP, SystemMemory, FRTB, 0x0100)
        Field (FRTP, AnyAcc, NoLock, Preserve)
        {
            PEBA,   32, 
                ,   5, 
            IC0E,   1, 
            IC1E,   1, 
            IC2E,   1, 
            IC3E,   1, 
            IC4E,   1, 
            IC5E,   1, 
            UT0E,   1, 
            UT1E,   1, 
                ,   1, 
                ,   1, 
            ST_E,   1, 
            UT2E,   1, 
                ,   1, 
            EMMD,   2, 
                ,   3, 
            XHCE,   1, 
                ,   1, 
                ,   1, 
            UT3E,   1, 
            ESPI,   1, 
            EMME,   1, 
            HFPE,   1, 
            Offset (0x08), 
            PCEF,   1, 
                ,   4, 
            IC0D,   1, 
            IC1D,   1, 
            IC2D,   1, 
            IC3D,   1, 
            IC4D,   1, 
            IC5D,   1, 
            UT0D,   1, 
            UT1D,   1, 
                ,   1, 
                ,   1, 
            ST_D,   1, 
            UT2D,   1, 
                ,   1, 
            EHCD,   1, 
                ,   4, 
            XHCD,   1, 
            SD_D,   1, 
                ,   1, 
            UT3D,   1, 
                ,   1, 
            EMD3,   1, 
                ,   2, 
            S03D,   1, 
            FW00,   16, 
            FW01,   32, 
            FW02,   16, 
            FW03,   32, 
            SDS0,   8, 
            SDS1,   8, 
            CZFG,   1, 
            Offset (0x20), 
            SD10,   32, 
            EH10,   32, 
            XH10,   32, 
            STBA,   32
        }

        OperationRegion (FCFG, SystemMemory, PEBA, 0x01000000)
        Field (FCFG, DWordAcc, NoLock, Preserve)
        {
            Offset (0xA3044), 
            IPDE,   32, 
            IMPE,   32, 
            Offset (0xA3078), 
                ,   2, 
            LDQ0,   1, 
            Offset (0xA30CB), 
                ,   7, 
            AUSS,   1
        }

        OperationRegion (IOMX, SystemMemory, 0xFED80D00, 0x0100)
        Field (IOMX, AnyAcc, NoLock, Preserve)
        {
            Offset (0x15), 
            IM15,   8, 
            IM16,   8, 
            Offset (0x1F), 
            IM1F,   8, 
            IM20,   8, 
            Offset (0x44), 
            IM44,   8, 
            Offset (0x46), 
            IM46,   8, 
            Offset (0x4A), 
            IM4A,   8, 
            IM4B,   8, 
            Offset (0x57), 
            IM57,   8, 
            IM58,   8, 
            Offset (0x68), 
            IM68,   8, 
            IM69,   8, 
            IM6A,   8, 
            IM6B,   8, 
            Offset (0x6D), 
            IM6D,   8, 
            Offset (0x71), 
            IM71,   8, 
            IM72,   8
        }

        OperationRegion (FACR, SystemMemory, 0xFED81E00, 0x0100)
        Field (FACR, AnyAcc, NoLock, Preserve)
        {
            Offset (0x80), 
                ,   28, 
            RD28,   1, 
                ,   1, 
            RQTY,   1, 
            Offset (0x84), 
                ,   28, 
            SD28,   1, 
                ,   1, 
            Offset (0xA0), 
            PG1A,   1
        }

        OperationRegion (EMMX, SystemMemory, 0xFEDD5800, 0x0130)
        Field (EMMX, AnyAcc, NoLock, Preserve)
        {
            Offset (0xD0), 
                ,   17, 
            FC18,   1, 
            FC33,   1, 
                ,   7, 
            CD_T,   1, 
            WP_T,   1
        }

        OperationRegion (EMMB, SystemMemory, 0xFEDD5800, 0x0130)
        Field (EMMB, AnyAcc, NoLock, Preserve)
        {
            Offset (0xA4), 
            E0A4,   32, 
            E0A8,   32, 
            Offset (0xB0), 
            E0B0,   32, 
            Offset (0xD0), 
            E0D0,   32, 
            Offset (0x116), 
            E116,   32
        }

        Name (SVBF, Buffer (0x0100)
        {
             0x00                                             // .
        })
        CreateDWordField (SVBF, Zero, S0A4)
        CreateDWordField (SVBF, 0x04, S0A8)
        CreateDWordField (SVBF, 0x08, S0B0)
        CreateDWordField (SVBF, 0x0C, S0D0)
        CreateDWordField (SVBF, 0x10, S116)
        Method (SECR, 0, Serialized)
        {
            S116 = E116 /* \_SB_.E116 */
            RQTY = Zero
            RD28 = One
            Local0 = SD28 /* \_SB_.SD28 */
            While (Local0)
            {
                Local0 = SD28 /* \_SB_.SD28 */
            }
        }

        Method (RECR, 0, Serialized)
        {
            E116 = S116 /* \_SB_.S116 */
        }

        OperationRegion (LUIE, SystemMemory, 0xFEDC0020, 0x04)
        Field (LUIE, AnyAcc, NoLock, Preserve)
        {
            IER0,   1, 
            IER1,   1, 
            IER2,   1, 
            IER3,   1, 
            UOL0,   1, 
            UOL1,   1, 
            UOL2,   1, 
            UOL3,   1, 
            WUR0,   2, 
            WUR1,   2, 
            WUR2,   2, 
            WUR3,   2
        }

        Method (FRUI, 2, Serialized)
        {
            If ((Arg0 == Zero))
            {
                Arg1 = IUA0 /* \_SB_.IUA0 */
            }

            If ((Arg0 == One))
            {
                Arg1 = IUA1 /* \_SB_.IUA1 */
            }

            If ((Arg0 == 0x02))
            {
                Arg1 = IUA2 /* \_SB_.IUA2 */
            }

            If ((Arg0 == 0x03))
            {
                Arg1 = IUA3 /* \_SB_.IUA3 */
            }
        }

        Method (FUIO, 1, Serialized)
        {
            If ((IER0 == One))
            {
                If ((WUR0 == Arg0))
                {
                    Return (Zero)
                }
            }

            If ((IER1 == One))
            {
                If ((WUR1 == Arg0))
                {
                    Return (One)
                }
            }

            If ((IER2 == One))
            {
                If ((WUR2 == Arg0))
                {
                    Return (0x02)
                }
            }

            If ((IER3 == One))
            {
                If ((WUR3 == Arg0))
                {
                    Return (0x03)
                }
            }

            Return (0x0F)
        }

        Method (SRAD, 2, Serialized)
        {
            Local0 = (Arg0 << One)
            Local0 += 0xFED81E40
            OperationRegion (ADCR, SystemMemory, Local0, 0x02)
            Field (ADCR, ByteAcc, NoLock, Preserve)
            {
                ADTD,   2, 
                ADPS,   1, 
                ADPD,   1, 
                ADSO,   1, 
                ADSC,   1, 
                ADSR,   1, 
                ADIS,   1, 
                ADDS,   3
            }

            ADIS = One
            ADSR = Zero
            Stall (Arg1)
            ADSR = One
            ADIS = Zero
            Stall (Arg1)
        }

        Method (DSAD, 2, Serialized)
        {
            Local0 = (Arg0 << One)
            Local0 += 0xFED81E40
            OperationRegion (ADCR, SystemMemory, Local0, 0x02)
            Field (ADCR, ByteAcc, NoLock, Preserve)
            {
                ADTD,   2, 
                ADPS,   1, 
                ADPD,   1, 
                ADSO,   1, 
                ADSC,   1, 
                ADSR,   1, 
                ADIS,   1, 
                ADDS,   3
            }

            If ((Arg0 != ADTD))
            {
                If ((Arg1 == Zero))
                {
                    ADTD = Zero
                    ADPD = One
                    Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    While ((Local0 != 0x07))
                    {
                        Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    }
                }

                If ((Arg1 == 0x03))
                {
                    ADPD = Zero
                    Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    While ((Local0 != Zero))
                    {
                        Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    }

                    ADTD = 0x03
                }
            }
        }

        Method (HSAD, 2, Serialized)
        {
            Local3 = (One << Arg0)
            Local0 = (Arg0 << One)
            Local0 += 0xFED81E40
            OperationRegion (ADCR, SystemMemory, Local0, 0x02)
            Field (ADCR, ByteAcc, NoLock, Preserve)
            {
                ADTD,   2, 
                ADPS,   1, 
                ADPD,   1, 
                ADSO,   1, 
                ADSC,   1, 
                ADSR,   1, 
                ADIS,   1, 
                ADDS,   3
            }

            If ((Arg1 != ADTD))
            {
                If ((Arg1 == Zero))
                {
                    PG1A = One
                    ADTD = Zero
                    ADPD = One
                    Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    While ((Local0 != 0x07))
                    {
                        Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    }

                    RQTY = One
                    RD28 = One
                    Local0 = SD28 /* \_SB_.SD28 */
                    While (!Local0)
                    {
                        Local0 = SD28 /* \_SB_.SD28 */
                    }
                }

                If ((Arg1 == 0x03))
                {
                    RQTY = Zero
                    RD28 = One
                    Local0 = SD28 /* \_SB_.SD28 */
                    While (Local0)
                    {
                        Local0 = SD28 /* \_SB_.SD28 */
                    }

                    ADPD = Zero
                    Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    While ((Local0 != Zero))
                    {
                        Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    }

                    ADTD = 0x03
                    PG1A = Zero
                }
            }
        }

        OperationRegion (FPIC, SystemIO, 0x0C00, 0x02)
        Field (FPIC, AnyAcc, NoLock, Preserve)
        {
            FPII,   8, 
            FPID,   8
        }

        IndexField (FPII, FPID, ByteAcc, NoLock, Preserve)
        {
            Offset (0xF4), 
            IUA0,   8, 
            IUA1,   8, 
            Offset (0xF8), 
            IUA2,   8, 
            IUA3,   8
        }

        Device (HFP1)
        {
            Name (_HID, "AMDI0060")  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (HFPE)
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0xFEC11000,         // Address Base
                        0x00000100,         // Address Length
                        )
                })
                Return (RBUF) /* \_SB_.HFP1._CRS.RBUF */
            }
        }

        Device (GPIO)
        {
            Name (_HID, "AMDI0030")  // _HID: Hardware ID
            Name (_CID, "AMDI0030")  // _CID: Compatible ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
                    {
                        0x00000007,
                    }
                    Memory32Fixed (ReadWrite,
                        0xFED81500,         // Address Base
                        0x00000400,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFED81200,         // Address Base
                        0x00000100,         // Address Length
                        )
                })
                Return (RBUF) /* \_SB_.GPIO._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (FUR0)
        {
            Name (_HID, "AMDI0020")  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {3}
                Memory32Fixed (ReadWrite,
                    0xFEDC9000,         // Address Base
                    0x00001000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0xFEDC7000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((UT0E == One))
                    {
                        If ((FUIO (Zero) != 0x0F))
                        {
                            Return (Zero)
                        }

                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (FUR1)
        {
            Name (_HID, "AMDI0020")  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {4}
                Memory32Fixed (ReadWrite,
                    0xFEDCA000,         // Address Base
                    0x00001000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0xFEDC8000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((UT1E == One))
                    {
                        If ((FUIO (One) != 0x0F))
                        {
                            Return (Zero)
                        }

                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (FUR2)
        {
            Name (_HID, "AMDI0020")  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {3}
                Memory32Fixed (ReadWrite,
                    0xFEDCE000,         // Address Base
                    0x00001000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0xFEDCC000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((UT2E == One))
                    {
                        If ((FUIO (0x02) != 0x0F))
                        {
                            Return (Zero)
                        }

                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (FUR3)
        {
            Name (_HID, "AMDI0020")  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {4}
                Memory32Fixed (ReadWrite,
                    0xFEDCF000,         // Address Base
                    0x00001000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0xFEDCD000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((UT3E == One))
                    {
                        If ((FUIO (0x03) != 0x0F))
                        {
                            Return (Zero)
                        }

                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (I2CA)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {10}
                Memory32Fixed (ReadWrite,
                    0xFEDC2000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x05, 0xC8)
            }

            Device (TPAD)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Name (_CID, "PNP0C50" /* HID Protocol Device (I2C bus) */)  // _CID: Compatible ID
                Name (_UID, One)  // _UID: Unique ID
                Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                {
                    Return (Zero)
                }

                Method (_HID, 0, Serialized)  // _HID: Hardware ID
                {
                    Switch (PRDT)
                    {
                        Case (0x02)
                        {
                            Return ("SYNA30AC")
                        }
                        Case (One)
                        {
                            Return ("SYNA30BA")
                        }
                        Case (Zero)
                        {
                            Return ("SYNA30AD")
                        }
                        Default
                        {
                            Return ("SYNA30AC")
                        }

                    }
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (SBFI, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x002C, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.I2CA",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                        GpioInt (Level, ActiveLow, Exclusive, PullNone, 0x0000,
                            "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x0012
                            }
                    })
                    Return (SBFI) /* \_SB_.I2CA.TPAD._CRS.SBFI */
                }

                Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("3cdff6f7-4267-4555-ad05-b30a3d8938de") /* HID I2C Device */))
                    {
                        If ((Arg2 == Zero))
                        {
                            If ((Arg1 == One))
                            {
                                Return (Buffer (One)
                                {
                                     0x03                                             // .
                                })
                            }
                            Else
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                             // .
                                })
                            }
                        }

                        If ((Arg2 == One))
                        {
                            Return (0x20)
                        }
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (0x0F)
                }
            }
        }

        Device (I2CB)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {11}
                Memory32Fixed (ReadWrite,
                    0xFEDC3000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x06, 0xC8)
            }

            Device (CMSR)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Name (_HID, "CPLM3218" /* Capella Micro CM3218x Ambient Light Sensor */)  // _HID: Hardware ID
                Name (_CID, "CPLM3218" /* Capella Micro CM3218x Ambient Light Sensor */)  // _CID: Compatible ID
                Name (_UID, One)  // _UID: Unique ID
                Name (_DEP, Package (0x01)  // _DEP: Dependencies
                {
                    I2CC
                })
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If (GS6C)
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    IM71 = One
                    IM72 = One
                    CPM1 [Zero] = AC10 /* \AC10 */
                    CPM1 [One] = AC11 /* \AC11 */
                    CPM1 [0x02] = AC12 /* \AC12 */
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (SBUF, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0010, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.I2CC",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                        GpioInt (Level, ActiveLow, Exclusive, PullNone, 0x0000,
                            "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x0059
                            }
                    })
                    Return (SBUF) /* \_SB_.I2CB.CMSR._CRS.SBUF */
                }

                Name (CPM0, Package (0x07)
                {
                    0x7DB5, 
                    One, 
                    0x0F, 
                    0x0840, 
                    0x013B, 
                    0x011D, 
                    Zero
                })
                Name (CPM1, Package (0x03)
                {
                    0x0898, 
                    0x000186A0, 
                    0x000186A0
                })
                Name (CPM2, Package (0x06)
                {
                    0x61A8, 
                    0x000186A0, 
                    0x000186A0, 
                    0x000186A0, 
                    0x00030D40, 
                    0x00186A00
                })
                Name (CPM3, Package (0x04)
                {
                    Package (0x02)
                    {
                        0x3C, 
                        0x0A
                    }, 

                    Package (0x02)
                    {
                        0x64, 
                        0x0B
                    }, 

                    Package (0x02)
                    {
                        0x64, 
                        0x1F40
                    }, 

                    Package (0x02)
                    {
                        0x01F4, 
                        0x1F41
                    }
                })
                Name (CPM5, Package (0x07)
                {
                    Zero, 
                    0x000249F0, 
                    0x0190, 
                    0x03E8, 
                    0x02, 
                    0x32, 
                    0x05
                })
                Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("0703c6b6-1cca-4144-9fe7-4654f53a0bd9") /* Unknown UUID */))
                    {
                        If ((Arg2 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }

                        If ((Arg2 == One))
                        {
                            If ((ToInteger (Arg3) == Zero))
                            {
                                Return (CPM0) /* \_SB_.I2CB.CMSR.CPM0 */
                            }

                            If ((ToInteger (Arg3) == One))
                            {
                                Return (CPM1) /* \_SB_.I2CB.CMSR.CPM1 */
                            }

                            If ((ToInteger (Arg3) == 0x02))
                            {
                                Return (CPM2) /* \_SB_.I2CB.CMSR.CPM2 */
                            }

                            If ((ToInteger (Arg3) == 0x03))
                            {
                                Return (CPM3) /* \_SB_.I2CB.CMSR.CPM3 */
                            }

                            If ((ToInteger (Arg3) == 0x05))
                            {
                                Return (CPM5) /* \_SB_.I2CB.CMSR.CPM5 */
                            }
                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }
        }

        Device (I2CC)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {4}
                Memory32Fixed (ReadWrite,
                    0xFEDC4000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x07, 0xC8)
            }
        }

        Device (I2CD)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {6}
                Memory32Fixed (ReadWrite,
                    0xFEDC5000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x08, 0xC8)
            }
        }

        Device (I2CE)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {14}
                Memory32Fixed (ReadWrite,
                    0xFEDC6000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x09, 0xC8)
            }
        }

        Device (I2CF)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, 0x05)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {15}
                Memory32Fixed (ReadWrite,
                    0xFEDCB000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x0A, 0xC8)
            }
        }

        Method (EPIN, 0, NotSerialized)
        {
            IPDE = Zero
            IMPE = Zero
            IM15 = One
            IM16 = One
            IM20 = One
            IM44 = One
            IM46 = One
            IM68 = One
            IM69 = One
            IM6A = One
            IM6B = One
            IM4A = One
            IM58 = One
            IM4B = One
            IM57 = One
            IM6D = One
            IM1F = One
            SECR ()
        }

        Name (NCRS, ResourceTemplate ()
        {
            Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
            {
                0x00000005,
            }
            Memory32Fixed (ReadWrite,
                0xFEDD5000,         // Address Base
                0x00001000,         // Address Length
                )
        })
        Name (DCRS, ResourceTemplate ()
        {
            Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
            {
                0x00000005,
            }
            Memory32Fixed (ReadWrite,
                0xFEDD5000,         // Address Base
                0x00001000,         // Address Length
                )
            GpioInt (Edge, ActiveBoth, SharedAndWake, PullUp, 0x0BB8,
                "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                )
                {   // Pin list
                    0x0044
                }
            GpioIo (Shared, PullUp, 0x0000, 0x0000, IoRestrictionNone,
                "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                )
                {   // Pin list
                    0x0044
                }
        })
        Name (AHID, "AMDI0040")
        Name (ACID, "AMDI0040")
        Name (SHID, 0x400DD041)
        Name (SCID, "PCICC_080501")
        Device (EMM0)
        {
            Method (_HID, 0, Serialized)  // _HID: Hardware ID
            {
                If (EMMD)
                {
                    Return (SHID) /* \_SB_.SHID */
                }
                Else
                {
                    Return (AHID) /* \_SB_.AHID */
                }
            }

            Method (_CID, 0, Serialized)  // _CID: Compatible ID
            {
                If (EMMD)
                {
                    Return (SCID) /* \_SB_.SCID */
                }
                Else
                {
                    Return (ACID) /* \_SB_.ACID */
                }
            }

            Name (_UID, Zero)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                If (EMD3)
                {
                    Return (DCRS) /* \_SB_.DCRS */
                }
                Else
                {
                    Return (NCRS) /* \_SB_.NCRS */
                }
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If (EMME)
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                If (EMME)
                {
                    EPIN ()
                }
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((EMD3 && EMME))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((EMD3 && EMME))
                {
                    HSAD (0x1C, Zero)
                    RECR ()
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((EMD3 && EMME))
                {
                    HSAD (0x1C, 0x03)
                }
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Device (UAR1)
        {
            Name (_HID, EisaId ("PNP0500") /* Standard PC COM Serial Port */)  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Name (_DDN, "COM1")  // _DDN: DOS Device Name
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((FUIO (Zero) != 0x0F))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x02E8,             // Range Minimum
                        0x02E8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        _Y07)
                    IRQNoFlags (_Y08)
                        {3}
                })
                CreateByteField (BUF0, \_SB.PCI0.UAR1._CRS._Y07._MIN, IOLO)  // _MIN: Minimum Base Address
                CreateByteField (BUF0, 0x03, IOHI)
                CreateByteField (BUF0, \_SB.PCI0.UAR1._CRS._Y07._MAX, IORL)  // _MAX: Maximum Base Address
                CreateByteField (BUF0, 0x05, IORH)
                CreateWordField (BUF0, \_SB.PCI0.UAR1._CRS._Y08._INT, IRQL)  // _INT: Interrupts
                Local0 = FUIO (Zero)
                Switch (ToInteger (Local0))
                {
                    Case (Zero)
                    {
                        IOLO = 0xE8
                        IOHI = 0x02
                        IORL = 0xE8
                        IORH = 0x02
                    }
                    Case (One)
                    {
                        IOLO = 0xF8
                        IOHI = 0x02
                        IORL = 0xF8
                        IORH = 0x02
                    }
                    Case (0x02)
                    {
                        IOLO = 0xE8
                        IOHI = 0x03
                        IORL = 0xE8
                        IORH = 0x03
                    }
                    Case (0x03)
                    {
                        IOLO = 0xF8
                        IOHI = 0x03
                        IORL = 0xF8
                        IORH = 0x03
                    }

                }

                Local1 = IUA0 /* \_SB_.IUA0 */
                IRQL = (One << (Local1 & 0x0F))
                Return (BUF0) /* \_SB_.PCI0.UAR1._CRS.BUF0 */
            }
        }

        Device (UAR2)
        {
            Name (_HID, EisaId ("PNP0500") /* Standard PC COM Serial Port */)  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Name (_DDN, "COM2")  // _DDN: DOS Device Name
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((FUIO (One) != 0x0F))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x02F8,             // Range Minimum
                        0x02F8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        _Y09)
                    IRQNoFlags (_Y0A)
                        {4}
                })
                CreateByteField (BUF0, \_SB.PCI0.UAR2._CRS._Y09._MIN, IOLO)  // _MIN: Minimum Base Address
                CreateByteField (BUF0, 0x03, IOHI)
                CreateByteField (BUF0, \_SB.PCI0.UAR2._CRS._Y09._MAX, IORL)  // _MAX: Maximum Base Address
                CreateByteField (BUF0, 0x05, IORH)
                CreateWordField (BUF0, \_SB.PCI0.UAR2._CRS._Y0A._INT, IRQL)  // _INT: Interrupts
                Local0 = FUIO (One)
                Switch (ToInteger (Local0))
                {
                    Case (Zero)
                    {
                        IOLO = 0xE8
                        IOHI = 0x02
                        IORL = 0xE8
                        IORH = 0x02
                    }
                    Case (One)
                    {
                        IOLO = 0xF8
                        IOHI = 0x02
                        IORL = 0xF8
                        IORH = 0x02
                    }
                    Case (0x02)
                    {
                        IOLO = 0xE8
                        IOHI = 0x03
                        IORL = 0xE8
                        IORH = 0x03
                    }
                    Case (0x03)
                    {
                        IOLO = 0xF8
                        IOHI = 0x03
                        IORL = 0xF8
                        IORH = 0x03
                    }

                }

                Local1 = IUA1 /* \_SB_.IUA1 */
                IRQL = (One << (Local1 & 0x0F))
                Return (BUF0) /* \_SB_.PCI0.UAR2._CRS.BUF0 */
            }
        }

        Device (UAR3)
        {
            Name (_HID, EisaId ("PNP0500") /* Standard PC COM Serial Port */)  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Name (_DDN, "COM3")  // _DDN: DOS Device Name
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((FUIO (0x02) != 0x0F))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x03E8,             // Range Minimum
                        0x03E8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        _Y0B)
                    IRQNoFlags (_Y0C)
                        {3}
                })
                CreateByteField (BUF0, \_SB.PCI0.UAR3._CRS._Y0B._MIN, IOLO)  // _MIN: Minimum Base Address
                CreateByteField (BUF0, 0x03, IOHI)
                CreateByteField (BUF0, \_SB.PCI0.UAR3._CRS._Y0B._MAX, IORL)  // _MAX: Maximum Base Address
                CreateByteField (BUF0, 0x05, IORH)
                CreateWordField (BUF0, \_SB.PCI0.UAR3._CRS._Y0C._INT, IRQL)  // _INT: Interrupts
                Local0 = FUIO (0x02)
                Switch (ToInteger (Local0))
                {
                    Case (Zero)
                    {
                        IOLO = 0xE8
                        IOHI = 0x02
                        IORL = 0xE8
                        IORH = 0x02
                    }
                    Case (One)
                    {
                        IOLO = 0xF8
                        IOHI = 0x02
                        IORL = 0xF8
                        IORH = 0x02
                    }
                    Case (0x02)
                    {
                        IOLO = 0xE8
                        IOHI = 0x03
                        IORL = 0xE8
                        IORH = 0x03
                    }
                    Case (0x03)
                    {
                        IOLO = 0xF8
                        IOHI = 0x03
                        IORL = 0xF8
                        IORH = 0x03
                    }

                }

                Local1 = IUA2 /* \_SB_.IUA2 */
                IRQL = (One << (Local1 & 0x0F))
                Return (BUF0) /* \_SB_.PCI0.UAR3._CRS.BUF0 */
            }
        }

        Device (UAR4)
        {
            Name (_HID, EisaId ("PNP0500") /* Standard PC COM Serial Port */)  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Name (_DDN, "COM4")  // _DDN: DOS Device Name
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((FUIO (0x03) != 0x0F))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x03F8,             // Range Minimum
                        0x03F8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        _Y0D)
                    IRQNoFlags (_Y0E)
                        {4}
                })
                CreateByteField (BUF0, \_SB.PCI0.UAR4._CRS._Y0D._MIN, IOLO)  // _MIN: Minimum Base Address
                CreateByteField (BUF0, 0x03, IOHI)
                CreateByteField (BUF0, \_SB.PCI0.UAR4._CRS._Y0D._MAX, IORL)  // _MAX: Maximum Base Address
                CreateByteField (BUF0, 0x05, IORH)
                CreateWordField (BUF0, \_SB.PCI0.UAR4._CRS._Y0E._INT, IRQL)  // _INT: Interrupts
                Local0 = FUIO (0x03)
                Switch (ToInteger (Local0))
                {
                    Case (Zero)
                    {
                        IOLO = 0xE8
                        IOHI = 0x02
                        IORL = 0xE8
                        IORH = 0x02
                    }
                    Case (One)
                    {
                        IOLO = 0xF8
                        IOHI = 0x02
                        IORL = 0xF8
                        IORH = 0x02
                    }
                    Case (0x02)
                    {
                        IOLO = 0xE8
                        IOHI = 0x03
                        IORL = 0xE8
                        IORH = 0x03
                    }
                    Case (0x03)
                    {
                        IOLO = 0xF8
                        IOHI = 0x03
                        IORL = 0xF8
                        IORH = 0x03
                    }

                }

                Local1 = IUA3 /* \_SB_.IUA3 */
                IRQL = (One << (Local1 & 0x0F))
                Return (BUF0) /* \_SB_.PCI0.UAR4._CRS.BUF0 */
            }
        }
    }

    Scope (_GPE)
    {
        Method (_L1C, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
        }

        Method (_L02, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Local0 = SSCI /* \SSCI */
            If (Local0)
            {
                SSCI = Zero
                If ((Local0 == 0x05))
                {
                    If (\_SB.WLBU._STA ())
                    {
                        Notify (\_SB.WLBU, 0x80) // Status Change
                    }
                    Else
                    {
                        \_SB.WMIV.GVWE (Local0, Zero)
                    }
                }
            }
        }

        Method (_L18, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
        }

        Method (_L19, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.BUSA.XHC0, 0x02) // Device Wake
            Notify (\_SB.PCI0.BUSA.XHC1, 0x02) // Device Wake
        }

        Method (_L09, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
        }

        Method (_L06, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
        }

        Method (_L10, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
        }

        Method (_L0D, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
        }
    }

    Name (_S0, Package (0x04)  // _S0_: S0 System State
    {
        Zero, 
        Zero, 
        Zero, 
        Zero
    })
    If (Ones)
    {
        Name (_S3, Package (0x04)  // _S3_: S3 System State
        {
            0x03, 
            0x03, 
            Zero, 
            Zero
        })
    }

    Name (_S4, Package (0x04)  // _S4_: S4 System State
    {
        0x04, 
        0x04, 
        Zero, 
        Zero
    })
    Name (_S5, Package (0x04)  // _S5_: S5 System State
    {
        0x05, 
        0x05, 
        Zero, 
        Zero
    })
    Scope (\_SB.PCI0.LPCB.EC0)
    {
        Method (EC10, 0, NotSerialized)
        {
            Local0 = \_SB.PCI0.LPCB.EC0.CLID /* External reference */
            Return (Local0)
        }

        Method (EC11, 0, NotSerialized)
        {
            Local0 = Zero
            Acquire (\_SB.PCI0.LPCB.EC0.ECMX, 0xFFFF)
            If (\_SB.PCI0.LPCB.EC0.ECRG)
            {
                Local0 = \_SB.PCI0.LPCB.EC0.ADP /* External reference */
            }

            Release (\_SB.PCI0.LPCB.EC0.ECMX)
            Return (Local0)
        }

        Method (EC12, 0, NotSerialized)
        {
            Local0 = Zero
            Acquire (\_SB.PCI0.LPCB.EC0.ECMX, 0xFFFF)
            If (\_SB.PCI0.LPCB.EC0.ECRG)
            {
                Local0 = \_SB.PCI0.LPCB.EC0.ACPR /* External reference */
            }

            Release (\_SB.PCI0.LPCB.EC0.ECMX)
            Return (Local0)
        }

        Method (EC13, 0, NotSerialized)
        {
            Local0 = Zero
            Acquire (\_SB.PCI0.LPCB.EC0.ECMX, 0xFFFF)
            If (\_SB.PCI0.LPCB.EC0.ECRG)
            {
                Local1 = \_SB.PCI0.LPCB.EC0.BDV /* External reference */
                Local2 = \_SB.PCI0.LPCB.EC0.BDC /* External reference */
                Local0 = (Local1 * Local2)
                Divide (Local0, 0x000F4240, Local3, Local0)
                If ((Local3 >= 0x0007A120))
                {
                    Local0++
                }
            }

            Release (\_SB.PCI0.LPCB.EC0.ECMX)
            Return (Local0)
        }
    }

    Scope (\_SB.PCI0.LPCB)
    {
        Device (NSHM)
        {
            Name (IOBA, 0x00000200)
            Name (IOLN, 0x00000080)
            Name (MEBA, 0xFEDF1000)
            Name (MELN, 0x00001000)
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, 0x1000)  // _UID: Unique ID
            Name (BUF0, ResourceTemplate ()
            {
                IO (Decode16,
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x01,               // Alignment
                    0x00,               // Length
                    _Y0F)
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00000000,         // Address Length
                    _Y10)
            })
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUF0, \_SB.PCI0.LPCB.NSHM._Y0F._MIN, IMIN)  // _MIN: Minimum Base Address
                CreateWordField (BUF0, \_SB.PCI0.LPCB.NSHM._Y0F._MAX, IMAX)  // _MAX: Maximum Base Address
                CreateByteField (BUF0, \_SB.PCI0.LPCB.NSHM._Y0F._LEN, ILEN)  // _LEN: Length
                IMIN = IOBA /* \_SB_.PCI0.LPCB.NSHM.IOBA */
                IMAX = IOBA /* \_SB_.PCI0.LPCB.NSHM.IOBA */
                ILEN = IOLN /* \_SB_.PCI0.LPCB.NSHM.IOLN */
                CreateDWordField (BUF0, \_SB.PCI0.LPCB.NSHM._Y10._BAS, MBAS)  // _BAS: Base Address
                CreateDWordField (BUF0, \_SB.PCI0.LPCB.NSHM._Y10._LEN, MLEN)  // _LEN: Length
                MBAS = MEBA /* \_SB_.PCI0.LPCB.NSHM.MEBA */
                MLEN = MELN /* \_SB_.PCI0.LPCB.NSHM.MELN */
                Return (BUF0) /* \_SB_.PCI0.LPCB.NSHM.BUF0 */
            }
        }
    }

    Scope (\_SB)
    {
        Name (AGRB, 0xF8000000)
        Name (ADBG, Buffer (0x0100){})
        Name (ADAT, Buffer (0x0520)
        {
            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0020 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0030 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 0038 */  0x00, 0x00, 0x01, 0x00, 0x03, 0xFF, 0xFF, 0x01,  // ........
            /* 0040 */  0x00, 0x02, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0048 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x06,  // ........
            /* 0050 */  0x06, 0xFF, 0xFF, 0x02, 0x03, 0x02, 0x01, 0x00,  // ........
            /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 0060 */  0x00, 0x00, 0x00, 0x04, 0x04, 0xFF, 0xFF, 0x03,  // ........
            /* 0068 */  0x00, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0070 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x05,  // ........
            /* 0078 */  0x05, 0xFF, 0xFF, 0x04, 0x03, 0x01, 0x03, 0x00,  // ........
            /* 0080 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 0088 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0090 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0098 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 00A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0100 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0108 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0110 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0118 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0120 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0128 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0130 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0138 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0140 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0148 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0150 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0158 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0160 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0168 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0170 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0178 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0180 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0188 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0190 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0198 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0200 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0208 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0210 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0218 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0220 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0228 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0230 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0238 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0240 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0248 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0250 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0258 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0260 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0268 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0270 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0278 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0280 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0288 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0290 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0298 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0300 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0308 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0310 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0318 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0320 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0328 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0330 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0338 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0340 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0348 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0350 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0358 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0360 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0368 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0370 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0378 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0380 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0388 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0390 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0398 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0400 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0408 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0410 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0418 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0420 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0428 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0430 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0438 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0440 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0448 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0450 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0458 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0460 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0468 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0470 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0478 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0480 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0488 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0490 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0498 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0500 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0508 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0510 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0518 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
        })
        Method (ALIB, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                CreateWordField (Arg1, 0x00, A013)
                CreateWordField (Arg1, 0x02, A014)
                CreateDWordField (Arg1, 0x04, A015)
                Local0 = Buffer (0x0100){}
                CreateWordField (Local0, 0x00, A016)
                A016 = A013 /* \_SB_.ALIB.A013 */
                CreateWordField (Local0, 0x02, A017)
                A017 = A014 /* \_SB_.ALIB.A014 */
                CreateDWordField (Local0, 0x04, A018)
                A018 = A015 /* \_SB_.ALIB.A015 */
                A018 &= ~0x0F
                If ((DerefOf (\_SB.ADAT [0x00]) > 0x00))
                {
                    Local1 = 0x0F
                }
                Else
                {
                    Local1 = 0x01
                }

                A018 |= Local1
                Return (Local0)
            }

            If ((Arg0 == 0x01))
            {
                Local0 = DerefOf (Arg1 [0x02])
                Return (A019 (Local0))
            }

            If ((Arg0 == 0x02))
            {
                Local0 = Buffer (0x0100)
                    {
                         0x03, 0x00, 0x00                                 // ...
                    }
                Return (Local0)
            }

            If ((Arg0 == 0x03))
            {
                Local0 = Buffer (0x0100)
                    {
                         0x03, 0x00, 0x00                                 // ...
                    }
                Return (Local0)
            }

            If ((Arg0 == 0x06))
            {
                Local0 = DerefOf (Arg1 [0x04])
                Local1 = DerefOf (Arg1 [0x02])
                Return (A022 (Local0, Local1))
            }

            If ((Arg0 == 0x0A))
            {
                Local0 = DerefOf (Arg1 [0x02])
                Return (A023 (Local0))
            }

            If ((Arg0 == 0x0B))
            {
                Local0 = DerefOf (Arg1 [0x02])
                Local1 = DerefOf (Arg1 [0x03])
                Local2 = DerefOf (Arg1 [0x04])
                Local2 |= (DerefOf (Arg1 [0x05]) << 0x08)
                Local2 |= (DerefOf (Arg1 [0x06]) << 0x10)
                Local2 |= (DerefOf (Arg1 [0x07]) << 0x18)
                Local3 = DerefOf (Arg1 [0x08])
                Local3 |= (DerefOf (Arg1 [0x09]) << 0x08)
                Local3 |= (DerefOf (Arg1 [0x0A]) << 0x10)
                Local3 |= (DerefOf (Arg1 [0x0B]) << 0x18)
                Local4 = DerefOf (Arg1 [0x0C])
                Local4 |= (DerefOf (Arg1 [0x0D]) << 0x08)
                Local4 |= (DerefOf (Arg1 [0x0E]) << 0x10)
                Local4 |= (DerefOf (Arg1 [0x0F]) << 0x18)
                Return (A024 (Local0, Local1, Local2, Local3, Local4))
            }

            If ((Arg0 == 0x0C))
            {
                A025 (Arg1)
            }

            If ((Arg0 == 0x10))
            {
                Local7 = Buffer (0x18){}
                CreateDWordField (Local7, 0x00, A026)
                CreateDWordField (Local7, 0x04, A027)
                CreateDWordField (Local7, 0x08, A028)
                CreateDWordField (Local7, 0x0C, A029)
                CreateDWordField (Local7, 0x10, A030)
                CreateDWordField (Local7, 0x14, A031)
                A026 = 0x00
                A027 = 0x00
                A028 = 0x00
                A029 = 0x00
                A030 = 0x00
                A031 = 0x00
                A011 (0x26, Local7)
            }

            If ((Arg0 == 0x11))
            {
                Local6 = Buffer (0x18){}
                CreateDWordField (Local6, 0x00, A005)
                CreateDWordField (Local6, 0x04, A006)
                CreateDWordField (Local6, 0x08, A007)
                CreateDWordField (Local6, 0x0C, A008)
                CreateDWordField (Local6, 0x10, A009)
                CreateDWordField (Local6, 0x14, A010)
                A005 = 0x00
                A006 = 0x00
                A007 = 0x00
                A008 = 0x00
                A009 = 0x00
                A010 = 0x00
                A011 (0x25, Local6)
            }

            If ((Arg0 == 0xAA))
            {
                Local6 = Buffer (0x18){}
                CreateDWordField (Local6, 0x00, A032)
                CreateDWordField (Local6, 0x04, A033)
                CreateDWordField (Local6, 0x08, A034)
                CreateDWordField (Local6, 0x0C, A035)
                CreateDWordField (Local6, 0x10, A036)
                CreateDWordField (Local6, 0x14, A037)
                A032 = 0x00
                A033 = 0x00
                A034 = 0x00
                A035 = 0x00
                A036 = 0x00
                A037 = 0x00
                A038 (Arg1)
            }

            Return (0x00)
        }

        Method (A022, 2, NotSerialized)
        {
            Local0 = 0x00
            While ((Local0 < 0x0A))
            {
                Local1 = A089 (Local0, Arg1)
                If ((Local1 == 0x01))
                {
                    Local2 = A090 (Local0, Arg0)
                    Break
                }

                Local0++
            }

            Local7 = Buffer (0x0A){}
            CreateWordField (Local7, 0x00, A016)
            CreateByteField (Local7, 0x02, A040)
            CreateByteField (Local7, 0x03, A091)
            A016 = 0x04
            A040 = 0x00
            If ((Local2 == 0x00))
            {
                A091 = 0x00
            }
            Else
            {
                A091 = 0x01
            }

            Return (Local7)
        }

        Method (A089, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A084 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A084 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A084 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A084 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A084 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A084 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A084 (Arg1))
            }
        }

        Method (A090, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A085 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A085 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A085 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A085 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A085 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A085 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A085 (Arg1))
            }
        }

        Name (AD00, 0x00)
        Name (DK00, 0x00)
        Method (A019, 1, NotSerialized)
        {
            AD00 = Arg0
            A004 ()
        }

        Method (A023, 1, NotSerialized)
        {
            DK00 = Arg0
        }

        Method (A024, 5, NotSerialized)
        {
        }

        Name (AP01, 0x00)
        Name (AP02, 0x00)
        Name (AP03, 0x00)
        Name (AP05, 0x00)
        Name (AP0B, 0xFF)
        Name (AP10, 0x00)
        Method (A039, 1, NotSerialized)
        {
            Local7 = Buffer (0x0100){}
            CreateWordField (Local7, 0x00, A016)
            A016 = 0x03
            CreateByteField (Local7, 0x02, A040)
            A040 = 0x01
            If ((DerefOf (\_SB.ADAT [0x00]) == 0x01))
            {
                A040 = 0x02
                Return (Local7)
            }

            If ((DerefOf (\_SB.ADAT [0x00]) == 0x00))
            {
                A040 = 0x01
                Return (Local7)
            }

            A041 (Arg0)
            If ((AP05 != 0x01))
            {
                Return (Local7)
            }

            A042 ()
            A040 = 0x02
            Return (Local7)
        }

        Method (A043, 0, NotSerialized)
        {
            If ((DerefOf (\_SB.ADAT [0x00]) <= 0x01))
            {
                Return (0x00)
            }

            If ((AP05 != 0x01))
            {
                Return (0x00)
            }

            A042 ()
        }

        Method (A044, 1, NotSerialized)
        {
            If ((Arg0 == 0x03))
            {
                AP01 = 0x00
            }
        }

        Method (A045, 1, NotSerialized)
        {
            AP10 = 0x01
        }

        Method (A046, 1, NotSerialized)
        {
            AP05 = Arg0
            If ((DerefOf (\_SB.ADAT [0x00]) <= 0x01))
            {
                Return (0x00)
            }

            Local1 = AP0B /* \_SB_.AP0B */
            If ((AP05 == 0x00))
            {
                Local0 = 0x00
                While ((Local0 < 0x0A))
                {
                    A047 (Local0)
                    Local0++
                }

                AP0B = 0x00
            }

            A042 ()
            AP0B = Local1
            Local7 = Buffer (0x0100){}
            Local7 [0x00] = 0x03
            Local7 [0x01] = 0x00
            Local7 [0x02] = 0x00
            Return (Local7)
        }

        Method (A048, 0, NotSerialized)
        {
            If ((AP0B != 0xFF))
            {
                Return (AP0B) /* \_SB_.AP0B */
            }

            Return (AD00) /* \_SB_.AD00 */
        }

        Method (A041, 1, NotSerialized)
        {
            CreateWordField (Arg0, 0x02, AP06)
            CreateWordField (Arg0, 0x04, AP07)
            CreateWordField (Arg0, 0x06, AP08)
            CreateByteField (Arg0, 0x08, AP09)
            CreateByteField (Arg0, 0x09, AP0A)
            Local0 = 0x00
            While ((Local0 < 0x0A))
            {
                If ((A049 (Local0, AP06) == 0x01))
                {
                    If (((AP07 & AP08) == 0x01))
                    {
                        Local1 = A050 (Local0)
                        A051 (Local0, Local1)
                    }
                    Else
                    {
                        A051 (Local0, AP0A)
                    }

                    Break
                }

                Local0++
            }
        }

        Method (A052, 0, NotSerialized)
        {
            AP02 = 0x01
            Local0 = 0x00
            While ((Local0 < 0x0A))
            {
                Local1 = A053 (Local0)
                If ((Local1 > AP02))
                {
                    AP02 = Local1
                }

                Local0++
            }
        }

        Method (A054, 0, NotSerialized)
        {
            AP03 = 0x00
            Local0 = 0x00
            While ((Local0 < 0x0A))
            {
                Local1 = A055 (Local0)
                If ((Local1 > AP03))
                {
                    AP03 = Local1
                }

                Local0++
            }
        }

        Method (A042, 0, NotSerialized)
        {
            A054 ()
            A052 ()
            If ((AP02 != AP01))
            {
                A012 (AP02, AP01)
            }

            If ((AP02 > AP01))
            {
                AP01 = AP02 /* \_SB_.AP02 */
            }

            Local0 = 0x00
            While ((Local0 < 0x0A))
            {
                Local1 = A053 (Local0)
                Local2 = A056 (Local0)
                If ((Local1 != Local2))
                {
                    A057 (Local0, Local1)
                }
                ElseIf ((AP10 == 0x01))
                {
                    A057 (Local0, Local1)
                }

                Local0++
            }

            If ((AP02 < AP01))
            {
                AP01 = AP02 /* \_SB_.AP02 */
            }
            ElseIf ((AP10 == 0x01))
            {
                AP01 = AP02 /* \_SB_.AP02 */
            }

            AP10 = 0x00
        }

        Method (A057, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A058 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A058 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A058 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A058 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A058 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A058 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A058 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A058 (Arg1))
            }
        }

        Method (A056, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A059 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A059 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A059 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A059 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A059 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A059 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A059 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A059 ())
            }
        }

        Method (A053, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A060 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A060 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A060 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A060 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A060 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A060 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A060 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A060 ())
            }
        }

        Method (A055, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A061 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A061 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A061 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A061 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A061 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A061 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A061 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A061 ())
            }
        }

        Method (A050, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A062 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A062 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A062 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A062 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A062 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A062 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A062 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A062 ())
            }
        }

        Method (A051, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A063 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A063 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A063 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A063 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A063 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A063 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A063 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A063 (Arg1))
            }
        }

        Method (A049, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A064 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A064 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A064 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A064 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A064 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A064 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A064 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A064 (Arg1))
            }
        }

        Method (A047, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A065 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A065 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A065 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A065 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A065 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A065 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A065 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A065 ())
            }
        }

        OperationRegion (A120, SystemMemory, AGRB, 0x1000)
        Field (A120, DWordAcc, Lock, Preserve)
        {
            Offset (0xB8), 
            A121,   32
        }

        BankField (A120, A121, 0x03B10528, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A118,   32
        }

        BankField (A120, A121, 0x03B10564, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A111,   32
        }

        BankField (A120, A121, 0x03B10998, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A112,   32
        }

        BankField (A120, A121, 0x03B1099C, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A113,   32
        }

        BankField (A120, A121, 0x03B109A0, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A114,   32
        }

        BankField (A120, A121, 0x03B109A4, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A115,   32
        }

        BankField (A120, A121, 0x03B109A8, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A116,   32
        }

        BankField (A120, A121, 0x03B109AC, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A117,   32
        }

        BankField (A120, A121, 0x13B00084, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A094,   32
        }

        BankField (A120, A121, 0x11140280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A102,   32
        }

        BankField (A120, A121, 0x11141280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A103,   32
        }

        BankField (A120, A121, 0x11142280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A104,   32
        }

        BankField (A120, A121, 0x11240280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A095,   32
        }

        BankField (A120, A121, 0x11241280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A096,   32
        }

        BankField (A120, A121, 0x11242280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A097,   32
        }

        BankField (A120, A121, 0x11243280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A098,   32
        }

        BankField (A120, A121, 0x11244280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A099,   32
        }

        BankField (A120, A121, 0x11245280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A100,   32
        }

        BankField (A120, A121, 0x11246280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A101,   32
        }

        Method (A092, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A073 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A073 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A073 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A073 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A073 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A073 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A073 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A073 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR0.ABR8.A073 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR0.ABR9.A073 (Arg1))
            }
        }

        Method (A093, 2, NotSerialized)
        {
            If ((Arg1 == 0x01))
            {
                If ((Arg0 == 0x00))
                {
                    Local0 = 0x00190300
                }

                If ((Arg0 == 0x01))
                {
                    Local0 = 0x001A0300
                }

                If ((Arg0 == 0x02))
                {
                    Local0 = 0x001B0300
                }

                If ((Arg0 == 0x03))
                {
                    Local0 = 0x001C0300
                }

                If ((Arg0 == 0x04))
                {
                    Local0 = 0x001D0300
                }

                If ((Arg0 == 0x05))
                {
                    Local0 = 0x001E0300
                }

                If ((Arg0 == 0x06))
                {
                    Local0 = 0x001F0300
                }

                If ((Arg0 == 0x06))
                {
                    Local0 = 0x00090300
                }

                If ((Arg0 == 0x06))
                {
                    Local0 = 0x000A0300
                }

                If ((Arg0 == 0x06))
                {
                    Local0 = 0x000B0300
                }

                Local1 = A094 /* \_SB_.A094 */
                Local1 &= 0xFF00FCFF
                A094 = (Local0 | Local1)
                Local1 = A094 /* \_SB_.A094 */
                A094 = (0xFFFFFDFF & Local1)
            }
            ElseIf ((Arg1 == 0x00))
            {
                If ((Arg0 == 0x00))
                {
                    Local1 = A095 /* \_SB_.A095 */
                    A095 = (0x00400000 | Local1)
                    Local1 = A095 /* \_SB_.A095 */
                    A095 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x01))
                {
                    Local1 = A096 /* \_SB_.A096 */
                    A096 = (0x00400000 | Local1)
                    Local1 = A096 /* \_SB_.A096 */
                    A096 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x02))
                {
                    Local1 = A097 /* \_SB_.A097 */
                    A097 = (0x00400000 | Local1)
                    Local1 = A097 /* \_SB_.A097 */
                    A097 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x03))
                {
                    Local1 = A098 /* \_SB_.A098 */
                    A098 = (0x00400000 | Local1)
                    Local1 = A098 /* \_SB_.A098 */
                    A098 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x04))
                {
                    Local1 = A099 /* \_SB_.A099 */
                    A099 = (0x00400000 | Local1)
                    Local1 = A099 /* \_SB_.A099 */
                    A099 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x05))
                {
                    Local1 = A100 /* \_SB_.A100 */
                    A100 = (0x00400000 | Local1)
                    Local1 = A100 /* \_SB_.A100 */
                    A100 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x06))
                {
                    Local1 = A101 /* \_SB_.A101 */
                    A101 = (0x00400000 | Local1)
                    Local1 = A101 /* \_SB_.A101 */
                    A101 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x07))
                {
                    Local1 = A102 /* \_SB_.A102 */
                    A102 = (0x00400000 | Local1)
                    Local1 = A102 /* \_SB_.A102 */
                    A102 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x08))
                {
                    Local1 = A103 /* \_SB_.A103 */
                    A103 = (0x00400000 | Local1)
                    Local1 = A103 /* \_SB_.A103 */
                    A103 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x09))
                {
                    Local1 = A104 /* \_SB_.A104 */
                    A104 = (0x00400000 | Local1)
                    Local1 = A104 /* \_SB_.A104 */
                    A104 = (0xFFBFFFFF & Local1)
                }
            }
        }

        Method (A003, 2, NotSerialized)
        {
            Local0 = 0x00
            While ((Local0 < 0x0A))
            {
                Local1 = A092 (Local0, Arg1)
                If ((Local1 == 0x01))
                {
                    A093 (Local0, Arg1)
                    Break
                }

                Local0++
            }
        }

        Method (A011, 2, Serialized)
        {
            CreateDWordField (Arg1, 0x00, A105)
            CreateDWordField (Arg1, 0x04, A106)
            CreateDWordField (Arg1, 0x08, A107)
            CreateDWordField (Arg1, 0x0C, A108)
            CreateDWordField (Arg1, 0x10, A109)
            CreateDWordField (Arg1, 0x14, A110)
            A111 = 0x00
            While ((A111 != 0x00)){}
            A112 = A105 /* \_SB_.A011.A105 */
            A113 = A106 /* \_SB_.A011.A106 */
            A114 = A107 /* \_SB_.A011.A107 */
            A115 = A108 /* \_SB_.A011.A108 */
            A116 = A109 /* \_SB_.A011.A109 */
            A117 = A110 /* \_SB_.A011.A110 */
            A118 = Arg0
            While ((A111 == 0x00)){}
        }

        Method (A087, 5, NotSerialized)
        {
            Local7 = Buffer (0x18){}
            CreateDWordField (Local7, 0x00, A005)
            CreateDWordField (Local7, 0x04, A006)
            CreateDWordField (Local7, 0x08, A007)
            CreateDWordField (Local7, 0x0C, A008)
            CreateDWordField (Local7, 0x10, A009)
            CreateDWordField (Local7, 0x14, A010)
            A005 = Arg0
            A006 = Arg1
            A007 = Arg2
            A008 = Arg3
            A011 (0x09, Local7)
        }

        Method (A025, 1, Serialized)
        {
            CreateWordField (Arg0, 0x00, A119)
            Local7 = Buffer (0x18){}
            CreateDWordField (Local7, 0x00, A005)
            CreateDWordField (Local7, 0x04, A006)
            CreateDWordField (Local7, 0x08, A007)
            CreateDWordField (Local7, 0x0C, A008)
            CreateDWordField (Local7, 0x10, A009)
            CreateDWordField (Local7, 0x14, A010)
            Local0 = 0x02
            While ((Local0 < A119))
            {
                Local1 = DerefOf (Arg0 [Local0])
                Local0++
                Local2 = DerefOf (Arg0 [Local0])
                Local0++
                Local2 |= (DerefOf (Arg0 [Local0]) << 0x08)
                Local0++
                Local2 |= (DerefOf (Arg0 [Local0]) << 0x10)
                Local0++
                Local2 |= (DerefOf (Arg0 [Local0]) << 0x18)
                Local0++
                A005 = 0x00
                A006 = 0x00
                A007 = 0x00
                A008 = 0x00
                A009 = 0x00
                A010 = 0x00
                If ((Local1 == 0x01))
                {
                    A005 = Local2
                    A011 (0x18, Local7)
                }

                If ((Local1 == 0x03))
                {
                    A005 = Local2
                    A011 (0x19, Local7)
                }

                If ((Local1 == 0x05))
                {
                    A005 = Local2
                    A011 (0x14, Local7)
                }

                If ((Local1 == 0x06))
                {
                    A005 = Local2
                    A011 (0x15, Local7)
                }

                If ((Local1 == 0x07))
                {
                    A005 = Local2
                    A011 (0x16, Local7)
                }

                If ((Local1 == 0x08))
                {
                    A005 = Local2
                    A011 (0x17, Local7)
                }

                If ((Local1 == 0x09))
                {
                    A005 = Local2
                    A011 (0x20, Local7)
                }

                If ((Local1 == 0x0B))
                {
                    A005 = Local2
                    A011 (0x1A, Local7)
                }

                If ((Local1 == 0x0C))
                {
                    A005 = Local2
                    A011 (0x1C, Local7)
                }

                If ((Local1 == 0x0D))
                {
                    A005 = Local2
                    A011 (0x1E, Local7)
                }

                If ((Local1 == 0x0E))
                {
                    A005 = Local2
                    A011 (0x1B, Local7)
                }

                If ((Local1 == 0x0F))
                {
                    A005 = Local2
                    A011 (0x1F, Local7)
                }

                If ((DerefOf (\_SB.ADAT [0x08]) == 0x01))
                {
                    If ((Local1 == 0x10))
                    {
                        If ((Local2 == 0x00))
                        {
                            A011 (0x26, Local7)
                        }
                        Else
                        {
                            A011 (0x25, Local7)
                        }
                    }
                }

                If ((Local1 == 0x11))
                {
                    A005 = Local2
                    A011 (0x1D, Local7)
                }

                If ((Local1 == 0x12))
                {
                    A005 = Local2
                    A011 (0x5E, Local7)
                }

                If ((Local1 == 0x13))
                {
                    A005 = Local2
                    A011 (0x21, Local7)
                }

                If ((Local1 == 0x20))
                {
                    A005 = Local2
                    A011 (0x36, Local7)
                }

                If ((Local1 == 0x21))
                {
                    A005 = Local2
                    A011 (0x37, Local7)
                }

                If ((Local1 == 0x22))
                {
                    A005 = Local2
                    A011 (0x38, Local7)
                }

                If ((Local1 == 0x23))
                {
                    A005 = Local2
                    A011 (0x39, Local7)
                }

                If ((Local1 == 0x24))
                {
                    A005 = Local2
                    A011 (0x3A, Local7)
                }

                If ((Local1 == 0x25))
                {
                    A005 = Local2
                    A011 (0x3B, Local7)
                }

                If ((Local1 == 0x26))
                {
                    A005 = Local2
                    A011 (0x3C, Local7)
                }

                If ((Local1 == 0x27))
                {
                    A005 = Local2
                    A011 (0x3D, Local7)
                }

                If ((Local1 == 0x28))
                {
                    A005 = Local2
                    A011 (0x3E, Local7)
                }

                If ((Local1 == 0x29))
                {
                    A005 = Local2
                    A011 (0x3F, Local7)
                }

                If ((Local1 == 0x2A))
                {
                    A005 = Local2
                    A011 (0x40, Local7)
                }

                If ((Local1 == 0x2B))
                {
                    A005 = Local2
                    A011 (0x41, Local7)
                }

                If ((Local1 == 0x2C))
                {
                    A005 = Local2
                    A011 (0x42, Local7)
                }

                If ((Local1 == 0x2D))
                {
                    A005 = Local2
                    A011 (0x43, Local7)
                }

                If ((Local1 == 0x2E))
                {
                    A005 = Local2
                    A011 (0x53, Local7)
                }
            }
        }

        Device (AWR0)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, 0x90)  // _UID: Unique ID
            Device (ABR0)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x80)  // _UID: Unique ID
                Name (AB12, 0x20)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A077, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A077, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A071,   8, 
                    A072,   8, 
                    Offset (0x68), 
                    A078,   2, 
                        ,   2, 
                    A079,   1, 
                    A080,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A081,   1, 
                    Offset (0x88), 
                    A082,   4, 
                        ,   1, 
                    A083,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A066, 0, NotSerialized)
                {
                    Local0 = A048 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR0.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR0.AB0E */
                    }
                }

                Method (A061, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A067, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR0.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A060, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR0.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR0.AB0E */
                    }

                    Local0 = A067 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR0.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A066 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A059, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR0.AB02 */
                }

                Method (A062, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR0.AB00 */
                }

                Method (A058, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A068 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A069 (0x00)
                    Name (A070, 0x00)
                    A069 (0x01)
                }

                Method (A063, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A064, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A071) && (Local0 <= A072)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A073, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A065, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A068, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A074, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A075 (Local0, 0x00)
                    Local2 = A075 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A075 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A075 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A076 (0x23, (Local4 & 0xFFFFFFF0), 0x00)
                                            A076 (0x24, Local5, 0x00)
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x05, 0x00, (0x01 << 0x0A))
                                            A076 (0x25, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x07, 0x00, (0x01 << 0x0A))
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 && 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A088, 2, NotSerialized)
                {
                    If ((A075 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A075 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A075 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A069, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A075 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A075 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A088 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A075 (Local0, (Local1 + 0x10))
                                A086 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A086 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A086, 3, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A075, 2, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR0.A075.ADRR */
                }

                Method (A084, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A073 (Arg0))
                }

                Method (A085, 1, NotSerialized)
                {
                    Name (A070, 0x00)
                    Local2 = 0x00
                    A070 = A078 /* \_SB_.AWR0.ABR0.A078 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A079 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A069 (0x00)
                        Local0 = A075 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A086 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A075 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A086 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A079 = 0x01
                        Local0 = 0x05
                    }

                    A078 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A087 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A075 (0x00, 0x00)
                            A087 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A078 = A070 /* \_SB_.AWR0.ABR0.A085.A070 */
                    If ((A070 != 0x00))
                    {
                        A069 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR1)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x81)  // _UID: Unique ID
                Name (AB12, 0x34)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A077, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A077, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A071,   8, 
                    A072,   8, 
                    Offset (0x68), 
                    A078,   2, 
                        ,   2, 
                    A079,   1, 
                    A080,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A081,   1, 
                    Offset (0x88), 
                    A082,   4, 
                        ,   1, 
                    A083,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A066, 0, NotSerialized)
                {
                    Local0 = A048 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR1.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR1.AB0E */
                    }
                }

                Method (A061, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A067, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR1.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A060, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR1.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR1.AB0E */
                    }

                    Local0 = A067 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR1.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A066 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A059, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR1.AB02 */
                }

                Method (A062, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR1.AB00 */
                }

                Method (A058, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A068 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A069 (0x00)
                    Name (A070, 0x00)
                    A069 (0x01)
                }

                Method (A063, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A064, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A071) && (Local0 <= A072)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A073, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A065, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A068, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A074, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A075 (Local0, 0x00)
                    Local2 = A075 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A075 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A075 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A076 (0x23, (Local4 & 0xFFFFFFF0), 0x00)
                                            A076 (0x24, Local5, 0x00)
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x05, 0x00, (0x01 << 0x0A))
                                            A076 (0x25, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x07, 0x00, (0x01 << 0x0A))
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 && 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A088, 2, NotSerialized)
                {
                    If ((A075 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A075 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A075 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A069, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A075 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A075 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A088 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A075 (Local0, (Local1 + 0x10))
                                A086 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A086 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A086, 3, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A075, 2, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR1.A075.ADRR */
                }

                Method (A084, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A073 (Arg0))
                }

                Method (A085, 1, NotSerialized)
                {
                    Name (A070, 0x00)
                    Local2 = 0x00
                    A070 = A078 /* \_SB_.AWR0.ABR1.A078 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A079 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A069 (0x00)
                        Local0 = A075 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A086 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A075 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A086 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A079 = 0x01
                        Local0 = 0x05
                    }

                    A078 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A087 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A075 (0x00, 0x00)
                            A087 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A078 = A070 /* \_SB_.AWR0.ABR1.A085.A070 */
                    If ((A070 != 0x00))
                    {
                        A069 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR2)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x82)  // _UID: Unique ID
                Name (AB12, 0x48)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A077, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A077, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A071,   8, 
                    A072,   8, 
                    Offset (0x68), 
                    A078,   2, 
                        ,   2, 
                    A079,   1, 
                    A080,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A081,   1, 
                    Offset (0x88), 
                    A082,   4, 
                        ,   1, 
                    A083,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A066, 0, NotSerialized)
                {
                    Local0 = A048 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR2.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR2.AB0E */
                    }
                }

                Method (A061, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A067, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR2.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A060, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR2.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR2.AB0E */
                    }

                    Local0 = A067 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR2.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A066 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A059, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR2.AB02 */
                }

                Method (A062, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR2.AB00 */
                }

                Method (A058, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A068 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A069 (0x00)
                    Name (A070, 0x00)
                    A069 (0x01)
                }

                Method (A063, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A064, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A071) && (Local0 <= A072)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A073, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A065, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A068, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A074, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A075 (Local0, 0x00)
                    Local2 = A075 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A075 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A075 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A076 (0x23, (Local4 & 0xFFFFFFF0), 0x00)
                                            A076 (0x24, Local5, 0x00)
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x05, 0x00, (0x01 << 0x0A))
                                            A076 (0x25, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x07, 0x00, (0x01 << 0x0A))
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 && 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A088, 2, NotSerialized)
                {
                    If ((A075 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A075 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A075 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A069, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A075 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A075 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A088 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A075 (Local0, (Local1 + 0x10))
                                A086 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A086 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A086, 3, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A075, 2, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR2.A075.ADRR */
                }

                Method (A084, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A073 (Arg0))
                }

                Method (A085, 1, NotSerialized)
                {
                    Name (A070, 0x00)
                    Local2 = 0x00
                    A070 = A078 /* \_SB_.AWR0.ABR2.A078 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A079 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A069 (0x00)
                        Local0 = A075 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A086 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A075 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A086 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A079 = 0x01
                        Local0 = 0x05
                    }

                    A078 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A087 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A075 (0x00, 0x00)
                            A087 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A078 = A070 /* \_SB_.AWR0.ABR2.A085.A070 */
                    If ((A070 != 0x00))
                    {
                        A069 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR3)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x83)  // _UID: Unique ID
                Name (AB12, 0x5C)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A077, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A077, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A071,   8, 
                    A072,   8, 
                    Offset (0x68), 
                    A078,   2, 
                        ,   2, 
                    A079,   1, 
                    A080,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A081,   1, 
                    Offset (0x88), 
                    A082,   4, 
                        ,   1, 
                    A083,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A066, 0, NotSerialized)
                {
                    Local0 = A048 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR3.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR3.AB0E */
                    }
                }

                Method (A061, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A067, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR3.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A060, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR3.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR3.AB0E */
                    }

                    Local0 = A067 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR3.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A066 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A059, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR3.AB02 */
                }

                Method (A062, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR3.AB00 */
                }

                Method (A058, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A068 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A069 (0x00)
                    Name (A070, 0x00)
                    A069 (0x01)
                }

                Method (A063, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A064, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A071) && (Local0 <= A072)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A073, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A065, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A068, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A074, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A075 (Local0, 0x00)
                    Local2 = A075 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A075 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A075 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A076 (0x23, (Local4 & 0xFFFFFFF0), 0x00)
                                            A076 (0x24, Local5, 0x00)
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x05, 0x00, (0x01 << 0x0A))
                                            A076 (0x25, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x07, 0x00, (0x01 << 0x0A))
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 && 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A088, 2, NotSerialized)
                {
                    If ((A075 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A075 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A075 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A069, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A075 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A075 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A088 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A075 (Local0, (Local1 + 0x10))
                                A086 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A086 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A086, 3, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A075, 2, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR3.A075.ADRR */
                }

                Method (A084, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A073 (Arg0))
                }

                Method (A085, 1, NotSerialized)
                {
                    Name (A070, 0x00)
                    Local2 = 0x00
                    A070 = A078 /* \_SB_.AWR0.ABR3.A078 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A079 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A069 (0x00)
                        Local0 = A075 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A086 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A075 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A086 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A079 = 0x01
                        Local0 = 0x05
                    }

                    A078 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A087 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A075 (0x00, 0x00)
                            A087 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A078 = A070 /* \_SB_.AWR0.ABR3.A085.A070 */
                    If ((A070 != 0x00))
                    {
                        A069 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR4)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x84)  // _UID: Unique ID
                Name (AB12, 0x70)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A077, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A077, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A071,   8, 
                    A072,   8, 
                    Offset (0x68), 
                    A078,   2, 
                        ,   2, 
                    A079,   1, 
                    A080,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A081,   1, 
                    Offset (0x88), 
                    A082,   4, 
                        ,   1, 
                    A083,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A066, 0, NotSerialized)
                {
                    Local0 = A048 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR4.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR4.AB0E */
                    }
                }

                Method (A061, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A067, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR4.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A060, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR4.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR4.AB0E */
                    }

                    Local0 = A067 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR4.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A066 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A059, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR4.AB02 */
                }

                Method (A062, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR4.AB00 */
                }

                Method (A058, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A068 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A069 (0x00)
                    Name (A070, 0x00)
                    A069 (0x01)
                }

                Method (A063, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A064, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A071) && (Local0 <= A072)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A073, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A065, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A068, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A074, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A075 (Local0, 0x00)
                    Local2 = A075 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A075 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A075 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A076 (0x23, (Local4 & 0xFFFFFFF0), 0x00)
                                            A076 (0x24, Local5, 0x00)
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x05, 0x00, (0x01 << 0x0A))
                                            A076 (0x25, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x07, 0x00, (0x01 << 0x0A))
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 && 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A088, 2, NotSerialized)
                {
                    If ((A075 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A075 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A075 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A069, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A075 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A075 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A088 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A075 (Local0, (Local1 + 0x10))
                                A086 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A086 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A086, 3, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A075, 2, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR4.A075.ADRR */
                }

                Method (A084, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A073 (Arg0))
                }

                Method (A085, 1, NotSerialized)
                {
                    Name (A070, 0x00)
                    Local2 = 0x00
                    A070 = A078 /* \_SB_.AWR0.ABR4.A078 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A079 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A069 (0x00)
                        Local0 = A075 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A086 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A075 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A086 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A079 = 0x01
                        Local0 = 0x05
                    }

                    A078 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A087 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A075 (0x00, 0x00)
                            A087 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A078 = A070 /* \_SB_.AWR0.ABR4.A085.A070 */
                    If ((A070 != 0x00))
                    {
                        A069 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR5)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x85)  // _UID: Unique ID
                Name (AB12, 0x84)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A077, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A077, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A071,   8, 
                    A072,   8, 
                    Offset (0x68), 
                    A078,   2, 
                        ,   2, 
                    A079,   1, 
                    A080,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A081,   1, 
                    Offset (0x88), 
                    A082,   4, 
                        ,   1, 
                    A083,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A066, 0, NotSerialized)
                {
                    Local0 = A048 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR5.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR5.AB0E */
                    }
                }

                Method (A061, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A067, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR5.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A060, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR5.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR5.AB0E */
                    }

                    Local0 = A067 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR5.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A066 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A059, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR5.AB02 */
                }

                Method (A062, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR5.AB00 */
                }

                Method (A058, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A068 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A069 (0x00)
                    Name (A070, 0x00)
                    A069 (0x01)
                }

                Method (A063, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A064, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A071) && (Local0 <= A072)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A073, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A065, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A068, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A074, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A075 (Local0, 0x00)
                    Local2 = A075 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A075 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A075 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A076 (0x23, (Local4 & 0xFFFFFFF0), 0x00)
                                            A076 (0x24, Local5, 0x00)
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x05, 0x00, (0x01 << 0x0A))
                                            A076 (0x25, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x07, 0x00, (0x01 << 0x0A))
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 && 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A088, 2, NotSerialized)
                {
                    If ((A075 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A075 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A075 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A069, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A075 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A075 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A088 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A075 (Local0, (Local1 + 0x10))
                                A086 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A086 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A086, 3, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A075, 2, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR5.A075.ADRR */
                }

                Method (A084, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A073 (Arg0))
                }

                Method (A085, 1, NotSerialized)
                {
                    Name (A070, 0x00)
                    Local2 = 0x00
                    A070 = A078 /* \_SB_.AWR0.ABR5.A078 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A079 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A069 (0x00)
                        Local0 = A075 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A086 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A075 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A086 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A079 = 0x01
                        Local0 = 0x05
                    }

                    A078 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A087 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A075 (0x00, 0x00)
                            A087 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A078 = A070 /* \_SB_.AWR0.ABR5.A085.A070 */
                    If ((A070 != 0x00))
                    {
                        A069 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR6)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x86)  // _UID: Unique ID
                Name (AB12, 0x98)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A077, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A077, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A071,   8, 
                    A072,   8, 
                    Offset (0x68), 
                    A078,   2, 
                        ,   2, 
                    A079,   1, 
                    A080,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A081,   1, 
                    Offset (0x88), 
                    A082,   4, 
                        ,   1, 
                    A083,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A066, 0, NotSerialized)
                {
                    Local0 = A048 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR6.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR6.AB0E */
                    }
                }

                Method (A061, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A067, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR6.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A060, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR6.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR6.AB0E */
                    }

                    Local0 = A067 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR6.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A066 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A059, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR6.AB02 */
                }

                Method (A062, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR6.AB00 */
                }

                Method (A058, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A068 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A069 (0x00)
                    Name (A070, 0x00)
                    A069 (0x01)
                }

                Method (A063, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A064, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A071) && (Local0 <= A072)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A073, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A065, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A068, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A074, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A075 (Local0, 0x00)
                    Local2 = A075 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A075 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A075 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A076 (0x23, (Local4 & 0xFFFFFFF0), 0x00)
                                            A076 (0x24, Local5, 0x00)
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x05, 0x00, (0x01 << 0x0A))
                                            A076 (0x25, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x07, 0x00, (0x01 << 0x0A))
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 && 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A088, 2, NotSerialized)
                {
                    If ((A075 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A075 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A075 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A069, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A075 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A075 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A088 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A075 (Local0, (Local1 + 0x10))
                                A086 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A086 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A086, 3, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A075, 2, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR6.A075.ADRR */
                }

                Method (A084, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A073 (Arg0))
                }

                Method (A085, 1, NotSerialized)
                {
                    Name (A070, 0x00)
                    Local2 = 0x00
                    A070 = A078 /* \_SB_.AWR0.ABR6.A078 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A079 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A069 (0x00)
                        Local0 = A075 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A086 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A075 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A086 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A079 = 0x01
                        Local0 = 0x05
                    }

                    A078 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A087 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A075 (0x00, 0x00)
                            A087 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A078 = A070 /* \_SB_.AWR0.ABR6.A085.A070 */
                    If ((A070 != 0x00))
                    {
                        A069 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR7)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x87)  // _UID: Unique ID
                Name (AB12, 0xAC)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A077, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A077, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A071,   8, 
                    A072,   8, 
                    Offset (0x68), 
                    A078,   2, 
                        ,   2, 
                    A079,   1, 
                    A080,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A081,   1, 
                    Offset (0x88), 
                    A082,   4, 
                        ,   1, 
                    A083,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A066, 0, NotSerialized)
                {
                    Local0 = A048 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR7.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR7.AB0E */
                    }
                }

                Method (A061, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A067, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR7.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A060, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR7.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR7.AB0E */
                    }

                    Local0 = A067 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR7.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A066 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A059, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR7.AB02 */
                }

                Method (A062, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR7.AB00 */
                }

                Method (A058, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A068 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A069 (0x00)
                    Name (A070, 0x00)
                    A069 (0x01)
                }

                Method (A063, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A064, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A071) && (Local0 <= A072)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A073, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A065, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A068, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A074, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A075 (Local0, 0x00)
                    Local2 = A075 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A075 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A075 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A076 (0x23, (Local4 & 0xFFFFFFF0), 0x00)
                                            A076 (0x24, Local5, 0x00)
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x05, 0x00, (0x01 << 0x0A))
                                            A076 (0x25, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x07, 0x00, (0x01 << 0x0A))
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 && 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A088, 2, NotSerialized)
                {
                    If ((A075 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A075 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A075 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A069, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A075 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A075 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A088 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A075 (Local0, (Local1 + 0x10))
                                A086 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A086 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A086, 3, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A075, 2, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR7.A075.ADRR */
                }

                Method (A084, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A073 (Arg0))
                }

                Method (A085, 1, NotSerialized)
                {
                    Name (A070, 0x00)
                    Local2 = 0x00
                    A070 = A078 /* \_SB_.AWR0.ABR7.A078 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A079 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A069 (0x00)
                        Local0 = A075 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A086 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A075 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A086 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A079 = 0x01
                        Local0 = 0x05
                    }

                    A078 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A087 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A075 (0x00, 0x00)
                            A087 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A078 = A070 /* \_SB_.AWR0.ABR7.A085.A070 */
                    If ((A070 != 0x00))
                    {
                        A069 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR8)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x88)  // _UID: Unique ID
                Name (AB12, 0xC0)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A077, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A077, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A071,   8, 
                    A072,   8, 
                    Offset (0x68), 
                    A078,   2, 
                        ,   2, 
                    A079,   1, 
                    A080,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A081,   1, 
                    Offset (0x88), 
                    A082,   4, 
                        ,   1, 
                    A083,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A066, 0, NotSerialized)
                {
                    Local0 = A048 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR8.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR8.AB0E */
                    }
                }

                Method (A061, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A067, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR8.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A060, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR8.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR8.AB0E */
                    }

                    Local0 = A067 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR8.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A066 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A059, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR8.AB02 */
                }

                Method (A062, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR8.AB00 */
                }

                Method (A058, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A068 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A069 (0x00)
                    Name (A070, 0x00)
                    A069 (0x01)
                }

                Method (A063, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A064, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A071) && (Local0 <= A072)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A073, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A065, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A068, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A074, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A075 (Local0, 0x00)
                    Local2 = A075 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A075 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A075 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A076 (0x23, (Local4 & 0xFFFFFFF0), 0x00)
                                            A076 (0x24, Local5, 0x00)
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x05, 0x00, (0x01 << 0x0A))
                                            A076 (0x25, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x07, 0x00, (0x01 << 0x0A))
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 && 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A088, 2, NotSerialized)
                {
                    If ((A075 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A075 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A075 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A069, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A075 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A075 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A088 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A075 (Local0, (Local1 + 0x10))
                                A086 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A086 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A086, 3, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A075, 2, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR8.A075.ADRR */
                }

                Method (A084, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A073 (Arg0))
                }

                Method (A085, 1, NotSerialized)
                {
                    Name (A070, 0x00)
                    Local2 = 0x00
                    A070 = A078 /* \_SB_.AWR0.ABR8.A078 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A079 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A069 (0x00)
                        Local0 = A075 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A086 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A075 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A086 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A079 = 0x01
                        Local0 = 0x05
                    }

                    A078 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A087 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A075 (0x00, 0x00)
                            A087 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A078 = A070 /* \_SB_.AWR0.ABR8.A085.A070 */
                    If ((A070 != 0x00))
                    {
                        A069 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR9)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x89)  // _UID: Unique ID
                Name (AB12, 0xD4)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A077, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A077, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A071,   8, 
                    A072,   8, 
                    Offset (0x68), 
                    A078,   2, 
                        ,   2, 
                    A079,   1, 
                    A080,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A081,   1, 
                    Offset (0x88), 
                    A082,   4, 
                        ,   1, 
                    A083,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A066, 0, NotSerialized)
                {
                    Local0 = A048 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR9.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR9.AB0E */
                    }
                }

                Method (A061, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A067, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR9.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A060, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR9.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR9.AB0E */
                    }

                    Local0 = A067 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR9.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A066 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A059, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR9.AB02 */
                }

                Method (A062, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR9.AB00 */
                }

                Method (A058, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A068 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A069 (0x00)
                    Name (A070, 0x00)
                    A069 (0x01)
                }

                Method (A063, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A064, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A071) && (Local0 <= A072)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A073, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A065, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A068, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A074, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A075 (Local0, 0x00)
                    Local2 = A075 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A075 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A075 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A076 (0x23, (Local4 & 0xFFFFFFF0), 0x00)
                                            A076 (0x24, Local5, 0x00)
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x05, 0x00, (0x01 << 0x0A))
                                            A076 (0x25, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x07, 0x00, (0x01 << 0x0A))
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 && 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A088, 2, NotSerialized)
                {
                    If ((A075 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A075 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A075 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A069, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A075 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A075 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A088 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A075 (Local0, (Local1 + 0x10))
                                A086 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A086 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A086, 3, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A075, 2, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR9.A075.ADRR */
                }

                Method (A084, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A073 (Arg0))
                }

                Method (A085, 1, NotSerialized)
                {
                    Name (A070, 0x00)
                    Local2 = 0x00
                    A070 = A078 /* \_SB_.AWR0.ABR9.A078 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A079 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A069 (0x00)
                        Local0 = A075 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A086 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A075 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A086 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A079 = 0x01
                        Local0 = 0x05
                    }

                    A078 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A087 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A075 (0x00, 0x00)
                            A087 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A078 = A070 /* \_SB_.AWR0.ABR9.A085.A070 */
                    If ((A070 != 0x00))
                    {
                        A069 (0x01)
                    }

                    Return (Local2)
                }
            }
        }

        Method (A122, 1, Serialized)
        {
            If ((DerefOf (\_SB.ADAT [0x08]) == 0x01))
            {
                Local0 = 0x00
                While ((Local0 < 0x0A))
                {
                    A123 (Local0, Arg0)
                    Local0++
                }
            }
        }

        Method (A076, 3, NotSerialized)
        {
            Local7 = Buffer (0x18){}
            CreateDWordField (Local7, 0x00, A005)
            CreateDWordField (Local7, 0x04, A006)
            CreateDWordField (Local7, 0x08, A007)
            CreateDWordField (Local7, 0x0C, A008)
            CreateDWordField (Local7, 0x10, A009)
            CreateDWordField (Local7, 0x14, A010)
            A005 = Arg1
            A006 = Arg2
            A011 (Arg0, Local7)
        }

        Method (A123, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A074 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A074 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A074 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A074 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A074 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A074 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A074 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A074 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR0.ABR8.A074 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR0.ABR9.A074 (Arg1))
            }
        }

        Method (A038, 1, Serialized)
        {
            Local0 = 0x00
            Local6 = DerefOf (Arg0 [Local0])
            Local7 = Buffer (0x18){}
            CreateDWordField (Local7, 0x00, A005)
            CreateDWordField (Local7, 0x04, A006)
            CreateDWordField (Local7, 0x08, A007)
            CreateDWordField (Local7, 0x0C, A008)
            CreateDWordField (Local7, 0x10, A009)
            CreateDWordField (Local7, 0x14, A010)
            Local0 = 0x02
            Local1 = DerefOf (Arg0 [Local0])
            Local0++
            Local2 = DerefOf (Arg0 [Local0])
            Local0++
            Local2 |= (DerefOf (Arg0 [Local0]) << 0x08)
            A005 = 0x00
            A006 = 0x00
            A007 = 0x00
            A008 = 0x00
            A009 = 0x00
            A010 = 0x00
            If ((Local1 == 0x00))
            {
                A005 = Local2
                A122 (0x00)
            }

            If ((Local1 == 0x01))
            {
                A005 = Local2
                A122 (0x01)
            }

            If ((Local1 == 0x02))
            {
                A005 = Local2
                A011 (0x25, Local7)
            }

            If ((Local1 == 0x03))
            {
                A005 = Local2
                A011 (0x26, Local7)
            }
        }

        Name (A001, 0x01)
        Name (A002, 0x00)
        Method (APTS, 1, NotSerialized)
        {
            If ((Arg0 == 0x03)){}
        }

        Method (AWAK, 1, NotSerialized)
        {
            If ((Arg0 == 0x03)){}
        }

        Method (APPM, 1, NotSerialized)
        {
            Local0 = DerefOf (Arg0 [0x04])
            Local1 = DerefOf (Arg0 [0x02])
            A003 (Local0, Local1)
        }

        Method (A004, 0, NotSerialized)
        {
            Local7 = Buffer (0x18){}
            CreateDWordField (Local7, 0x00, A005)
            CreateDWordField (Local7, 0x04, A006)
            CreateDWordField (Local7, 0x08, A007)
            CreateDWordField (Local7, 0x0C, A008)
            CreateDWordField (Local7, 0x10, A009)
            CreateDWordField (Local7, 0x14, A010)
            A005 = 0x00
            A006 = 0x00
            A007 = 0x00
            A008 = 0x00
            A009 = 0x00
            A010 = 0x00
            If ((AD00 == 0x00))
            {
                A011 (0x11, Local7)
            }
            Else
            {
                A011 (0x12, Local7)
            }
        }

        Method (A012, 2, NotSerialized)
        {
        }
    }

    OperationRegion (SMIC, SystemMemory, 0xFED80000, 0x00800000)
    Field (SMIC, ByteAcc, NoLock, Preserve)
    {
        Offset (0x36A), 
        SMIB,   8
    }

    OperationRegion (SSMI, SystemIO, SMIB, 0x02)
    Field (SSMI, AnyAcc, NoLock, Preserve)
    {
        SMIW,   16
    }

    Scope (\_SB)
    {
        Name (D0S0, One)
        Name (D3S0, One)
        Name (D0S1, One)
        Name (D3S1, One)
        Name (STDS, Zero)
        PowerResource (P0S0, 0x00, 0x0000)
        {
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (D0S0) /* \_SB_.D0S0 */
            }

            Method (_ON, 0, NotSerialized)  // _ON_: Power On
            {
                D0S0 = One
            }

            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
            {
                D0S0 = Zero
            }
        }

        PowerResource (P3S0, 0x00, 0x0000)
        {
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (D3S0) /* \_SB_.D3S0 */
            }

            Method (_ON, 0, NotSerialized)  // _ON_: Power On
            {
                D3S0 = One
            }

            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
            {
                D3S0 = Zero
            }
        }

        PowerResource (P0S1, 0x00, 0x0000)
        {
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (D0S1) /* \_SB_.D0S1 */
            }

            Method (_ON, 0, NotSerialized)  // _ON_: Power On
            {
                D0S1 = One
            }

            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
            {
                D0S1 = Zero
            }
        }

        PowerResource (P3S1, 0x00, 0x0000)
        {
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (D3S1) /* \_SB_.D3S1 */
            }

            Method (_ON, 0, NotSerialized)  // _ON_: Power On
            {
                D3S1 = One
            }

            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
            {
                D3S1 = Zero
            }
        }
    }

    Scope (\_SB.PCI0.BUSB.SATA)
    {
        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
        {
            P0S0
        })
        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
        {
            P3S0
        })
        Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
        {
            If ((STDS == One))
            {
                Return (0x04)
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
        {
            If ((STDS == One))
            {
                SMIW = 0xD6
            }
        }

        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
        {
            If ((STDS == One))
            {
                SMIW = 0xD5
            }
        }
    }

    Scope (\_SB.PCI0.BUSB.SAT1)
    {
        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
        {
            P0S1
        })
        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
        {
            P3S1
        })
        Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
        {
            If ((STDS == One))
            {
                Return (0x04)
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
        {
            If ((STDS == One))
            {
                SMIW = 0x01D6
            }
        }

        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
        {
            If ((STDS == One))
            {
                SMIW = 0x01D5
            }
        }
    }

    Scope (\_SB.PCI0.LPCB.EC0)
    {
        Field (ECRM, ByteAcc, NoLock, Preserve)
        {
            Offset (0x1B), 
            UCOS,   8, 
            UDAT,   8
        }

        Method (RRMB, 1, Serialized)
        {
            Debug = "Enter RRMB"
            Name (RBUF, Buffer (Arg0){})
            Local0 = Zero
            While ((Local0 < Arg0))
            {
                RBUF [Local0] = Zero
                Local0++
            }

            If (\_SB.PCI0.LPCB.EC0.ECRG)
            {
                If (Acquire (\_SB.PCI0.LPCB.EC0.ECMX, 0xFFFF))
                {
                    Return (Zero)
                }

                UNL2 [Zero] = "RRMByte"
                Local0 = Zero
                While ((Local0 < Arg0))
                {
                    RBUF [Local0] = UDAT /* \_SB_.PCI0.LPCB.EC0_.UDAT */
                    Local0++
                }

                Release (\_SB.PCI0.LPCB.EC0.ECMX)
            }
            Else
            {
                UNL2 [Zero] = "RRMByte-no ECREG?"
                Debug = "RRMB No ECREG"
            }

            Debug = "Exit RRMB"
            Return (RBUF) /* \_SB_.PCI0.LPCB.EC0_.RRMB.RBUF */
        }

        Method (_Q27, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            Debug = "Enter Q27"
            UNL1 = 0xC027
            \_SB.UBTC.UQDC ()
            Debug = "Exit Q27"
            UNL1 = 0xCF27
        }
    }

    Scope (\_SB)
    {
        Name (UNL1, Zero)
        Name (UNL2, Buffer (0x20){})
        Device (UBTC)
        {
            Name (_HID, EisaId ("USBC000"))  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0CA0"))  // _CID: Compatible ID
            Name (_UID, One)  // _UID: Unique ID
            Name (_DDN, "USB Type-C")  // _DDN: DOS Device Name
            Name (_ADR, Zero)  // _ADR: Address
            Name (UBCB, 0xB82EA000)
            Name (UBCL, 0x00001000)
            Name (CRS, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00001000,         // Address Length
                    _Y11)
            })
            Mutex (UMUT, 0x00)
            Name (UTE1, Zero)
            Mutex (UMU1, 0x00)
            Name (UOBF, Buffer (0x1A){})
            Name (UTE2, Zero)
            Mutex (UMU2, 0x00)
            OperationRegion (USBC, SystemMemory, UBCB, 0x30)
            Field (USBC, ByteAcc, Lock, Preserve)
            {
                VER1,   8, 
                VER2,   8, 
                RSV1,   8, 
                RSV2,   8, 
                CCI0,   8, 
                CCI1,   8, 
                CCI2,   8, 
                CCI3,   8, 
                CTL0,   8, 
                CTL1,   8, 
                CTL2,   8, 
                CTL3,   8, 
                CTL4,   8, 
                CTL5,   8, 
                CTL6,   8, 
                CTL7,   8, 
                MGI0,   8, 
                MGI1,   8, 
                MGI2,   8, 
                MGI3,   8, 
                MGI4,   8, 
                MGI5,   8, 
                MGI6,   8, 
                MGI7,   8, 
                MGI8,   8, 
                MGI9,   8, 
                MGIA,   8, 
                MGIB,   8, 
                MGIC,   8, 
                MGID,   8, 
                MGIE,   8, 
                MGIF,   8, 
                MGO0,   8, 
                MGO1,   8, 
                MGO2,   8, 
                MGO3,   8, 
                MGO4,   8, 
                MGO5,   8, 
                MGO6,   8, 
                MGO7,   8, 
                MGO8,   8, 
                MGO9,   8, 
                MGOA,   8, 
                MGOB,   8, 
                MGOC,   8, 
                MGOD,   8, 
                MGOE,   8, 
                MGOF,   8
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                CreateDWordField (CRS, \_SB.UBTC._Y11._BAS, CBAS)  // _BAS: Base Address
                CBAS = UBCB /* \_SB_.UBTC.UBCB */
                Return (CRS) /* \_SB_.UBTC.CRS_ */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                Debug = "Enter UCSI _DSM"
                If ((Arg0 == ToUUID ("6f8398c2-7ca4-11e4-ad36-631042b5008f") /* Unknown UUID */))
                {
                    Debug = "Arg2 = "
                    Debug = Arg2
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            UNL1 = 0x0D50
                            Debug = "Exit UCSI _DSM Arg2=0"
                            Return (Buffer (One)
                            {
                                 0x0F                                             // .
                            })
                        }
                        Case (One)
                        {
                            UNL1 = 0x0D51
                            \_SB.UBTC.CCI0 = Zero
                            \_SB.UBTC.CCI1 = Zero
                            \_SB.UBTC.CCI2 = Zero
                            \_SB.UBTC.CCI3 = Zero
                            If ((\_SB.UBTC.CTL0 == One))
                            {
                                If ((URST () == One))
                                {
                                    \_SB.UBTC.CCI0 = Zero
                                    \_SB.UBTC.CCI1 = Zero
                                    \_SB.UBTC.CCI2 = Zero
                                    \_SB.UBTC.CCI3 = 0x08
                                    Notify (\_SB.UBTC, 0x80) // Status Change
                                }
                            }
                            Else
                            {
                                UOTE ()
                            }
                        }
                        Case (0x02)
                        {
                            UNL1 = 0x0D52
                        }
                        Case (0x03)
                        {
                            Debug = "Exit UCSI _DSM Arg2=3"
                            Return (Zero)
                        }

                    }
                }

                Debug = "Exit UCSI _DSM"
                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Method (UCL1, 0, Serialized)
            {
                Debug = "Enter UCL1"
                UNL1 = 0xA001
                Name (ZBUF, Buffer (0x1A){})
                Local0 = Zero
                While ((Local0 < 0x1A))
                {
                    ZBUF [Local0] = Zero
                    Local0++
                }

                If (Acquire (UMU1, 0xFFFF))
                {
                    Return (Zero)
                }

                Local0 = 0xFFFFFFFFFFFFFFFE
                UTE1 &= Local0
                Release (UMU1)
                If (Acquire (UMU2, 0xFFFF))
                {
                    Return (Zero)
                }

                \_SB.UBTC.UOBF = ZBUF /* \_SB_.UBTC.UCL1.ZBUF */
                UTE2 = Zero
                Release (UMU2)
                Debug = "Exit UCL1"
                Return (Zero)
            }

            Method (UCRT, 1, Serialized)
            {
                Debug = "Enter UCRT"
                Local0 = Zero
                Local3 = Zero
                UETO (Arg0)
                If (Acquire (UMU1, 0xFFFF))
                {
                    Return (Zero)
                }

                Local1 = (UTE1 & One)
                Release (UMU1)
                If ((Local1 == One))
                {
                    If (!Acquire (UMUT, 0x03E8))
                    {
                        If (Acquire (UMU2, 0xFFFF))
                        {
                            Return (Zero)
                        }

                        Local2 = UTE2 /* \_SB_.UBTC.UTE2 */
                        Release (UMU2)
                        Debug = "Resignal EC to fetch cmd"
                        If ((UDHX (Local2) != One))
                        {
                            Local3 = One
                        }

                        Release (UMUT)
                    }
                    Else
                    {
                        UNL1 = 0xF031
                        Debug = "UCRT UMUT timeout"
                        Local3 = One
                    }
                }

                If ((Local3 == One))
                {
                    Debug = "UCRT bad exit"
                    Local0 = One
                    \_SB.UBTC.UCL1 ()
                }

                Debug = "Exit UCRT"
                Return (Local0)
            }

            Method (UQDC, 0, Serialized)
            {
                Debug = "Enter UQDC"
                If (\_SB.PCI0.LPCB.EC0.ECRG)
                {
                    Local5 = Zero
                    If (Acquire (UMU1, 0xFFFF))
                    {
                        Return (Zero)
                    }

                    Local0 = UTE1 /* \_SB_.UBTC.UTE1 */
                    Release (UMU1)
                    If (Acquire (\_SB.PCI0.LPCB.EC0.ECMX, 0xFFFF))
                    {
                        Return (Zero)
                    }

                    UNL1 = 0xC001
                    Local2 = \_SB.PCI0.LPCB.EC0.UCOS
                    Release (\_SB.PCI0.LPCB.EC0.ECMX)
                    Debug = "UCOS = "
                    Debug = Local2
                    Switch (ToInteger (Local2))
                    {
                        Case (Zero)
                        {
                            Local1 = (Local0 & One)
                            If ((Local1 != Zero))
                            {
                                Debug = "ASL slow execution timeout"
                                \_SB.UBTC.UCL1 ()
                            }

                            Return (One)
                        }
                        Case (One)
                        {
                            Return (Zero)
                        }
                        Case (0x02)
                        {
                            UNL1 = 0xC002
                            Local1 = (Local0 & One)
                            If ((Local1 != Zero))
                            {
                                Local3 = UTTE ()
                                If ((Local3 == One))
                                {
                                    UNL2 [Zero] = "UQ-0"
                                    Debug = "Exit UQDC Cmd Fetched"
                                    Return (One)
                                }

                                UNL2 [Zero] = "UQDC() failout."
                                UNL1 = 0xF002
                                Local5 = One
                            }
                            Else
                            {
                                Debug = "Panic cleanup"
                                Local5 = One
                            }
                        }
                        Case (0x04)
                        {
                            UNL1 = 0xC003
                            UNL2 [Zero] = "UQ-F"
                            If ((UCRT (Local2) == One))
                            {
                                UNL2 [Zero] = "FOOK - FullResp override."
                            }
                        }
                        Case (0x05)
                        {
                            UNL1 = 0xC003
                            UNL2 [Zero] = "UQ-F"
                            If ((UCRT (Local2) == One))
                            {
                                UNL2 [Zero] = "FOOK - AbbrevResp override."
                            }
                        }
                        Case (0x07)
                        {
                            UNL2 [Zero] = "EC indicate cmdFail"
                            UNL1 = 0xF003
                            Local5 = One
                        }
                        Default
                        {
                            UNL1 = 0xF004
                            Local5 = One
                        }

                    }
                }
                Else
                {
                    Debug = "UQDC Fail ECREG"
                    Local5 = One
                }

                If ((Local5 == One))
                {
                    UNL1 = 0xF005
                    UNL2 [Zero] = "BigErr!Cleanup."
                    Debug = "UQDC Exit Big Error Cleanup"
                    \_SB.UBTC.UCL1 ()
                    Return (Zero)
                }

                Debug = "Exit UQDC"
                Return (One)
            }

            Method (UTTE, 0, Serialized)
            {
                Debug = "Enter UTTE"
                Local0 = One
                If (Acquire (UMUT, 0x03E8))
                {
                    UNL1 = 0xF0F0
                    Debug = "UTTE UMUT timeout"
                    Local0 = Zero
                }
                Else
                {
                    If (\_SB.PCI0.LPCB.EC0.ECRG)
                    {
                        UNL1 = 0xA003
                        If (Acquire (\_SB.PCI0.LPCB.EC0.ECMX, 0xFFFF))
                        {
                            Return (Zero)
                        }

                        If (Acquire (UMU2, 0xFFFF))
                        {
                            Return (Zero)
                        }

                        Local1 = Zero
                        While ((Local1 < UTE2))
                        {
                            \_SB.PCI0.LPCB.EC0.UDAT = DerefOf (UOBF [Local1])
                            Local1++
                        }

                        Debug = "UTTE Work done"
                        Release (UMU2)
                        Release (\_SB.PCI0.LPCB.EC0.ECMX)
                        UNL1 = 0xA004
                    }
                    Else
                    {
                        UNL2 [Zero] = "UTTE fail ECREG"
                        UNL1 = 0xF006
                        Debug = "UTTE fail ECREG"
                        Local0 = Zero
                    }

                    UCL1 ()
                }

                Release (UMUT)
                Debug = "Exit UTTE"
                Return (Local0)
            }

            Method (UDCT, 0, Serialized)
            {
                Debug = "Enter UDCT"
                UNL1 = 0xA011
                If ((DerefOf (UOBF [0x03]) != Zero))
                {
                    Debug = "Exit UDCT Long"
                    Return (0x1A)
                }

                Debug = "Exit UDCT short"
                Return (0x0A)
            }

            Method (UBCP, 0, Serialized)
            {
                Debug = "Enter UBCP"
                UOBF [Zero] = \_SB.UBTC.RSV1
                UOBF [One] = \_SB.UBTC.RSV2
                UOBF [0x02] = \_SB.UBTC.CTL0
                UOBF [0x03] = \_SB.UBTC.CTL1
                UOBF [0x04] = \_SB.UBTC.CTL2
                UOBF [0x05] = \_SB.UBTC.CTL3
                UOBF [0x06] = \_SB.UBTC.CTL4
                UOBF [0x07] = \_SB.UBTC.CTL5
                UOBF [0x08] = \_SB.UBTC.CTL6
                UOBF [0x09] = \_SB.UBTC.CTL7
                UOBF [0x0A] = \_SB.UBTC.MGO0
                UOBF [0x0B] = \_SB.UBTC.MGO1
                UOBF [0x0C] = \_SB.UBTC.MGO2
                UOBF [0x0D] = \_SB.UBTC.MGO3
                UOBF [0x0E] = \_SB.UBTC.MGO4
                UOBF [0x0F] = \_SB.UBTC.MGO5
                UOBF [0x10] = \_SB.UBTC.MGO6
                UOBF [0x11] = \_SB.UBTC.MGO7
                UOBF [0x12] = \_SB.UBTC.MGO8
                UOBF [0x13] = \_SB.UBTC.MGO9
                UOBF [0x14] = \_SB.UBTC.MGOA
                UOBF [0x15] = \_SB.UBTC.MGOB
                UOBF [0x16] = \_SB.UBTC.MGOC
                UOBF [0x17] = \_SB.UBTC.MGOD
                UOBF [0x18] = \_SB.UBTC.MGOE
                UOBF [0x19] = \_SB.UBTC.MGOF
                Debug = "Exit UBCP"
            }

            Method (UDHX, 1, Serialized)
            {
                Debug = "Enter UDHX"
                Local0 = Zero
                Local1 = 0x03
                If ((Arg0 == 0x1A))
                {
                    Local1 = 0x04
                }

                If (\_SB.PCI0.LPCB.EC0.ECRG)
                {
                    If (Acquire (\_SB.PCI0.LPCB.EC0.ECMX, 0xFFFF))
                    {
                        Return (Zero)
                    }

                    \_SB.PCI0.LPCB.EC0.UCOS = Local1
                    Release (\_SB.PCI0.LPCB.EC0.ECMX)
                    UNL1 = 0xA020
                    Local0 = One
                }
                Else
                {
                    UNL2 [Zero] = "UDHX-Fail ECREG"
                    UNL1 = 0xF008
                    Debug = "UDHX fail ECREG"
                }

                Debug = "Exit UDHX"
                Return (Local0)
            }

            Method (UOTE, 0, Serialized)
            {
                Debug = "Enter UOTE"
                Local3 = One
                If (Acquire (UMUT, 0x03E8))
                {
                    UNL1 = 0xF011
                    Debug = "UMUT dumping command"
                    Return (Zero)
                }

                If (Acquire (UMU1, 0xFFFF))
                {
                    Return (Zero)
                }

                Local0 = (UTE1 & One)
                If ((Local0 == Zero))
                {
                    UBCP ()
                    UTE1 |= One
                    Local2 = UDCT ()
                    If (Acquire (UMU2, 0xFFFF))
                    {
                        Return (Zero)
                    }

                    UTE2 = Local2
                    Release (UMU2)
                    If ((UDHX (Local2) != One))
                    {
                        UNL2 [Zero] = "UOTE-Fail ECREG"
                        UNL1 = 0xF008
                        Debug = "UOTE Fail ECREG"
                        Local3 = Zero
                    }
                }
                Else
                {
                    Debug = "OUTCMD already started"
                    If (Acquire (\_SB.PCI0.LPCB.EC0.ECMX, 0xFFFF))
                    {
                        Return (Zero)
                    }

                    Local4 = \_SB.PCI0.LPCB.EC0.UCOS
                    Release (\_SB.PCI0.LPCB.EC0.ECMX)
                    If ((Local4 == Zero))
                    {
                        Debug = "EC is illegally IDLE cleanup"
                        Local3 = Zero
                    }
                }

                Release (UMU1)
                If ((Local3 == Zero))
                {
                    UCL1 ()
                }

                Release (UMUT)
                Debug = "Exit UOTE"
                Return (Local3)
            }

            Method (UETO, 1, Serialized)
            {
                Debug = "Enter UETO"
                If (Acquire (UMUT, 0x03E8))
                {
                    UNL2 [Zero] = "UETO-failUMUTacquire"
                    UNL1 = 0xCF01
                    Debug = "UETO UMUT timeout"
                    Return (Zero)
                }

                UNL1 = 0xCF00
                If ((Arg0 == 0x04))
                {
                    Local1 = 0x18
                    UNL2 [Zero] = "FullUETO"
                    UNL1 = 0xCF10
                }
                ElseIf ((Arg0 == 0x05))
                {
                    Local1 = 0x08
                    UNL2 [Zero] = "AbbrvUETO"
                    UNL1 = 0xCF11
                }

                Name (BUFF, Buffer (Local1){})
                BUFF = \_SB.PCI0.LPCB.EC0.RRMB (Local1)
                \_SB.UBTC.VER1 = DerefOf (BUFF [Zero])
                \_SB.UBTC.VER2 = DerefOf (BUFF [One])
                \_SB.UBTC.RSV1 = DerefOf (BUFF [0x02])
                \_SB.UBTC.RSV2 = DerefOf (BUFF [0x03])
                \_SB.UBTC.CCI0 = DerefOf (BUFF [0x04])
                \_SB.UBTC.CCI1 = DerefOf (BUFF [0x05])
                \_SB.UBTC.CCI2 = DerefOf (BUFF [0x06])
                \_SB.UBTC.CCI3 = DerefOf (BUFF [0x07])
                If ((0x18 == Local1))
                {
                    UNL1 = 0xCF13
                    \_SB.UBTC.MGI0 = DerefOf (BUFF [0x08])
                    \_SB.UBTC.MGI1 = DerefOf (BUFF [0x09])
                    \_SB.UBTC.MGI2 = DerefOf (BUFF [0x0A])
                    \_SB.UBTC.MGI3 = DerefOf (BUFF [0x0B])
                    \_SB.UBTC.MGI4 = DerefOf (BUFF [0x0C])
                    \_SB.UBTC.MGI5 = DerefOf (BUFF [0x0D])
                    \_SB.UBTC.MGI6 = DerefOf (BUFF [0x0E])
                    \_SB.UBTC.MGI7 = DerefOf (BUFF [0x0F])
                    \_SB.UBTC.MGI8 = DerefOf (BUFF [0x10])
                    \_SB.UBTC.MGI9 = DerefOf (BUFF [0x11])
                    \_SB.UBTC.MGIA = DerefOf (BUFF [0x12])
                    \_SB.UBTC.MGIB = DerefOf (BUFF [0x13])
                    \_SB.UBTC.MGIC = DerefOf (BUFF [0x14])
                    \_SB.UBTC.MGID = DerefOf (BUFF [0x15])
                    \_SB.UBTC.MGIE = DerefOf (BUFF [0x16])
                    \_SB.UBTC.MGIF = DerefOf (BUFF [0x17])
                }

                Notify (\_SB.UBTC, 0x80) // Status Change
                Release (UMUT)
                UNL2 [Zero] = "xUETO"
                UNL1 = 0xCFFF
                Debug = "Exit UETO"
            }

            Method (URST, 0, Serialized)
            {
                Debug = "Enter URST"
                Local0 = Zero
                If (\_SB.PCI0.LPCB.EC0.ECRG)
                {
                    If (Acquire (\_SB.PCI0.LPCB.EC0.ECMX, 0xFFFF))
                    {
                        Return (Zero)
                    }

                    \_SB.PCI0.LPCB.EC0.UCOS = 0x07
                    Local1 = 0x23
                    Local2 = \_SB.PCI0.LPCB.EC0.UCOS
                    While (((ToInteger (Local2) != Zero) && (Local1 > Zero)))
                    {
                        Sleep (0x0A)
                        Local2 = \_SB.PCI0.LPCB.EC0.UCOS
                        Local1--
                    }

                    Release (\_SB.PCI0.LPCB.EC0.ECMX)
                    Debug = "UCOS = "
                    Debug = Local2
                    If ((ToInteger (Local2) == Zero))
                    {
                        UNL1 = 0xA030
                        Local0 = One
                    }
                }
                Else
                {
                    UNL2 [Zero] = "URST-Fail ECREG"
                    UNL1 = 0xF013
                    Debug = "URST fail ECREG"
                }

                Debug = "Exit URST"
                Return (Local0)
            }
        }
    }

    Scope (\_SB.UBTC)
    {
        Device (CR01)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
            {
                Return (\TPLD (One, 0x03))
            }
        }

        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
    }

    Scope (\_SB)
    {
        Device (TPM)
        {
            Name (_HID, "IFX0785")  // _HID: Hardware ID
            Noop
            Name (_CID, "MSFT0101" /* TPM 2.0 Security Device */)  // _CID: Compatible ID
            Name (_STR, Unicode ("TPM 2.0 Device"))  // _STR: Description String
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                Memory32Fixed (ReadWrite,
                    0xFED40000,         // Address Base
                    0x00005000,         // Address Length
                    )
            })
            OperationRegion (TPMR, SystemMemory, 0xFED40000, 0x5000)
            Field (TPMR, AnyAcc, NoLock, Preserve)
            {
                ACC0,   8
            }

            OperationRegion (TNVS, SystemMemory, 0xB82D4000, 0x2A)
            Field (TNVS, AnyAcc, NoLock, Preserve)
            {
                PPIN,   8, 
                PPIP,   32, 
                PPRP,   32, 
                PPRQ,   32, 
                PPRM,   32, 
                LPPR,   32, 
                FRET,   32, 
                MCIN,   8, 
                MCIP,   32, 
                MORD,   32, 
                MRET,   32, 
                UCRQ,   32
            }

            Method (PTS, 1, Serialized)
            {
                If (((Arg0 < 0x06) && (Arg0 > 0x03)))
                {
                    If (!(MORD & 0x10))
                    {
                        MCIP = 0x02
                        GSWS (MCIN)
                    }
                }

                Return (Zero)
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((ACC0 == 0xFF))
                {
                    Return (Zero)
                }

                Return (0x0F)
            }

            Method (HINF, 3, Serialized)
            {
                Switch (ToInteger (Arg1))
                {
                    Case (Zero)
                    {
                        Return (Buffer (One)
                        {
                             0x03                                             // .
                        })
                    }
                    Case (One)
                    {
                        Name (TPMV, Package (0x02)
                        {
                            One, 
                            Package (0x02)
                            {
                                0x02, 
                                Zero
                            }
                        })
                        If ((_STA () == Zero))
                        {
                            Return (Package (0x01)
                            {
                                Zero
                            })
                        }

                        Return (TPMV) /* \_SB_.TPM_.HINF.TPMV */
                    }
                    Default
                    {
                        BreakPoint
                    }

                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Name (TPM2, Package (0x02)
            {
                Zero, 
                Zero
            })
            Name (TPM3, Package (0x03)
            {
                Zero, 
                Zero, 
                Zero
            })
            Method (TPPI, 3, Serialized)
            {
                Switch (ToInteger (Arg1))
                {
                    Case (Zero)
                    {
                        Return (Buffer (0x02)
                        {
                             0xFF, 0x01                                       // ..
                        })
                    }
                    Case (One)
                    {
                        Return ("1.3")
                    }
                    Case (0x02)
                    {
                        PPRQ = DerefOf (Arg2 [Zero])
                        PPRM = Zero
                        PPIP = 0x02
                        GSWS (PPIN)
                        Return (FRET) /* \_SB_.TPM_.FRET */
                    }
                    Case (0x03)
                    {
                        TPM2 [One] = PPRQ /* \_SB_.TPM_.PPRQ */
                        Return (TPM2) /* \_SB_.TPM_.TPM2 */
                    }
                    Case (0x04)
                    {
                        Return (0x02)
                    }
                    Case (0x05)
                    {
                        PPIP = 0x05
                        GSWS (PPIN)
                        TPM3 [One] = LPPR /* \_SB_.TPM_.LPPR */
                        TPM3 [0x02] = PPRP /* \_SB_.TPM_.PPRP */
                        Return (TPM3) /* \_SB_.TPM_.TPM3 */
                    }
                    Case (0x06)
                    {
                        Return (0x03)
                    }
                    Case (0x07)
                    {
                        PPIP = 0x07
                        PPRQ = DerefOf (Arg2 [Zero])
                        PPRM = Zero
                        If ((PPRQ == 0x17))
                        {
                            PPRM = DerefOf (Arg2 [One])
                        }

                        GSWS (PPIN)
                        Return (FRET) /* \_SB_.TPM_.FRET */
                    }
                    Case (0x08)
                    {
                        PPIP = 0x08
                        UCRQ = DerefOf (Arg2 [Zero])
                        GSWS (PPIN)
                        Return (FRET) /* \_SB_.TPM_.FRET */
                    }
                    Default
                    {
                        BreakPoint
                    }

                }

                Return (One)
            }

            Method (TMCI, 3, Serialized)
            {
                Switch (ToInteger (Arg1))
                {
                    Case (Zero)
                    {
                        Return (Buffer (One)
                        {
                             0x03                                             // .
                        })
                    }
                    Case (One)
                    {
                        MORD = DerefOf (Arg2 [Zero])
                        MCIP = One
                        GSWS (MCIN)
                        Return (MRET) /* \_SB_.TPM_.MRET */
                    }
                    Default
                    {
                        BreakPoint
                    }

                }

                Return (One)
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("cf8e16a5-c1e8-4e25-b712-4f54a96702c8") /* Unknown UUID */))
                {
                    Return (HINF (Arg1, Arg2, Arg3))
                }

                If ((Arg0 == ToUUID ("3dddfaa6-361b-4eb4-a424-8d10089d1653") /* Physical Presence Interface */))
                {
                    Return (TPPI (Arg1, Arg2, Arg3))
                }

                If ((Arg0 == ToUUID ("376054ed-cc13-4675-901c-4756d7f2d45d") /* Unknown UUID */))
                {
                    Return (TMCI (Arg1, Arg2, Arg3))
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }
    }

    Scope (\_SB.PLTF.C000)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x000007D0, 
                0x00000985, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000006A4, 
                0x0000064F, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x000007D0, 
                0x00000985, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000006A4, 
                0x0000064F, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000001
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C000.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
    }

    Scope (\_SB.PLTF.C001)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x000007D0, 
                0x00000985, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000006A4, 
                0x0000064F, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x000007D0, 
                0x00000985, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000006A4, 
                0x0000064F, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000001, 
                0x000000FE, 
                0x00000001
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C001.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
    }

    Scope (\_SB.PLTF.C002)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x000007D0, 
                0x00000985, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000006A4, 
                0x0000064F, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x000007D0, 
                0x00000985, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000006A4, 
                0x0000064F, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000002, 
                0x000000FE, 
                0x00000001
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C002.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
    }

    Scope (\_SB.PLTF.C003)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x000007D0, 
                0x00000985, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000006A4, 
                0x0000064F, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x000007D0, 
                0x00000985, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000006A4, 
                0x0000064F, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000003, 
                0x000000FE, 
                0x00000001
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C003.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
    }

    Scope (\_SB.PLTF.C004)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x000007D0, 
                0x00000985, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000006A4, 
                0x0000064F, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x000007D0, 
                0x00000985, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000006A4, 
                0x0000064F, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000004, 
                0x000000FE, 
                0x00000001
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C004.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
    }

    Scope (\_SB.PLTF.C005)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x000007D0, 
                0x00000985, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000006A4, 
                0x0000064F, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x000007D0, 
                0x00000985, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000006A4, 
                0x0000064F, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000005, 
                0x000000FE, 
                0x00000001
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C005.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
    }

    Scope (\_SB.PLTF.C006)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x000007D0, 
                0x00000985, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000006A4, 
                0x0000064F, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x000007D0, 
                0x00000985, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000006A4, 
                0x0000064F, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000006, 
                0x000000FE, 
                0x00000001
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C006.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
    }

    Scope (\_SB.PLTF.C007)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x000007D0, 
                0x00000985, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000006A4, 
                0x0000064F, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x000007D0, 
                0x00000985, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000006A4, 
                0x0000064F, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000007, 
                0x000000FE, 
                0x00000001
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C007.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
    }

    Scope (\_GPE)
    {
        Method (RFBL, 0, NotSerialized)
        {
            Local0 = \CDP1 /* External reference */
            Local0 += One
            \CDP1 = Local0
            Acquire (\_SB.PCI0.LPCB.EC0.ECMX, 0xFFFF)
            \_SB.PCI0.LPCB.EC0.KBBL = 0x05
            Release (\_SB.PCI0.LPCB.EC0.ECMX)
            \_SB.WMIV.GVWE (0x1C, Zero)
            \_SB.CAGS (RFCR)
        }
    }

    Scope (\_SB.PCI0.LPCB.EC0)
    {
        Method (_QXX, 0, Serialized)
        {
            If (\_SB.PCI0.LPCB.EC0.ECRG)
            {
                Acquire (\_SB.PCI0.LPCB.EC0.ECMX, 0xFFFF)
                \_SB.PCI0.LPCB.EC0.WWP = One
                Sleep (0x64)
                \_SB.PCI0.LPCB.EC0.WWP = Zero
                Release (\_SB.PCI0.LPCB.EC0.ECMX)
            }
        }
    }

    Scope (\_SB)
    {
    }

    Scope (\_SB.PCI0.GP13)
    {
    }

    Scope (\_SB.PCI0.GP13.NCRD)
    {
        OperationRegion (FLDR, PCI_Config, 0x44, 0x06)
        Field (FLDR, ByteAcc, NoLock, Preserve)
        {
            DCAP,   32, 
            DCTR,   16
        }

        PowerResource (WLRT, 0x05, 0x0000)
        {
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (One)
            }

            Method (_ON, 0, NotSerialized)  // _ON_: Power On
            {
            }

            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
            {
            }

            Method (_RST, 0, NotSerialized)  // _RST: Device Reset
            {
                If ((DCAP & 0x10000000))
                {
                    Local0 = DCTR /* \_SB_.PCI0.GP13.NCRD.DCTR */
                    Local0 |= 0x8000
                    DCTR = Local0
                }
            }
        }

        Name (_PRR, Package (0x01)  // _PRR: Power Resource for Reset
        {
            WLRT
        })
        Name (WRDX, Package (0x03)
        {
            Zero, 
            Package (0x02)
            {
                0x80000000, 
                0x8000
            }, 

            Package (0x02)
            {
                0x80000000, 
                0x8000
            }
        })
        Method (WRDD, 0, Serialized)
        {
            DerefOf (WRDX [One]) [Zero] = 0x07
            DerefOf (WRDX [One]) [One] = \WRD1 /* External reference */
            DerefOf (WRDX [0x02]) [Zero] = 0x10
            DerefOf (WRDX [0x02]) [One] = \WRD2 /* External reference */
            Return (WRDX) /* \_SB_.PCI0.GP13.NCRD.WRDX */
        }

        Name (WRDY, Package (0x03)
        {
            Zero, 
            Package (0x0C)
            {
                0x07, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80
            }, 

            Package (0x06)
            {
                0x10, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80
            }
        })
        Method (WRDS, 0, Serialized)
        {
            DerefOf (WRDY [One]) [One] = \WTXE /* External reference */
            DerefOf (WRDY [One]) [0x02] = \WTX0 /* External reference */
            DerefOf (WRDY [One]) [0x03] = \WTX1 /* External reference */
            DerefOf (WRDY [One]) [0x04] = \WTX2 /* External reference */
            DerefOf (WRDY [One]) [0x05] = \WTX3 /* External reference */
            DerefOf (WRDY [One]) [0x06] = \WTX4 /* External reference */
            DerefOf (WRDY [One]) [0x07] = \WTX5 /* External reference */
            DerefOf (WRDY [One]) [0x08] = \WTX6 /* External reference */
            DerefOf (WRDY [One]) [0x09] = \WTX7 /* External reference */
            DerefOf (WRDY [One]) [0x0A] = \WTX8 /* External reference */
            DerefOf (WRDY [One]) [0x0B] = \WTX9 /* External reference */
            DerefOf (WRDY [0x02]) [One] = \WGEN /* External reference */
            DerefOf (WRDY [0x02]) [0x02] = \WGR1 /* External reference */
            DerefOf (WRDY [0x02]) [0x03] = \WGR2 /* External reference */
            DerefOf (WRDY [0x02]) [0x04] = \WGR3 /* External reference */
            DerefOf (WRDY [0x02]) [0x05] = \WGR4 /* External reference */
            Return (WRDY) /* \_SB_.PCI0.GP13.NCRD.WRDY */
        }

        Name (EWRY, Package (0x02)
        {
            Zero, 
            Package (0x21)
            {
                0x07, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80
            }
        })
        Method (EWRD, 0, Serialized)
        {
            DerefOf (EWRY [One]) [One] = \DWRS /* External reference */
            DerefOf (EWRY [One]) [0x02] = \DWNS /* External reference */
            DerefOf (EWRY [One]) [0x03] = \DS21 /* External reference */
            DerefOf (EWRY [One]) [0x04] = \DS22 /* External reference */
            DerefOf (EWRY [One]) [0x05] = \DS23 /* External reference */
            DerefOf (EWRY [One]) [0x06] = \DS24 /* External reference */
            DerefOf (EWRY [One]) [0x07] = \DS25 /* External reference */
            DerefOf (EWRY [One]) [0x08] = \DS26 /* External reference */
            DerefOf (EWRY [One]) [0x09] = \DS27 /* External reference */
            DerefOf (EWRY [One]) [0x0A] = \DS28 /* External reference */
            DerefOf (EWRY [One]) [0x0B] = \DS29 /* External reference */
            DerefOf (EWRY [One]) [0x0C] = \DS2A /* External reference */
            DerefOf (EWRY [One]) [0x0D] = \DS31 /* External reference */
            DerefOf (EWRY [One]) [0x0E] = \DS32 /* External reference */
            DerefOf (EWRY [One]) [0x0F] = \DS33 /* External reference */
            DerefOf (EWRY [One]) [0x10] = \DS34 /* External reference */
            DerefOf (EWRY [One]) [0x11] = \DS35 /* External reference */
            DerefOf (EWRY [One]) [0x12] = \DS36 /* External reference */
            DerefOf (EWRY [One]) [0x13] = \DS37 /* External reference */
            DerefOf (EWRY [One]) [0x14] = \DS38 /* External reference */
            DerefOf (EWRY [One]) [0x15] = \DS39 /* External reference */
            DerefOf (EWRY [One]) [0x16] = \DS3A /* External reference */
            DerefOf (EWRY [One]) [0x17] = \DS41 /* External reference */
            DerefOf (EWRY [One]) [0x18] = \DS42 /* External reference */
            DerefOf (EWRY [One]) [0x19] = \DS43 /* External reference */
            DerefOf (EWRY [One]) [0x1A] = \DS44 /* External reference */
            DerefOf (EWRY [One]) [0x1B] = \DS45 /* External reference */
            DerefOf (EWRY [One]) [0x1C] = \DS46 /* External reference */
            DerefOf (EWRY [One]) [0x1D] = \DS47 /* External reference */
            DerefOf (EWRY [One]) [0x1E] = \DS48 /* External reference */
            DerefOf (EWRY [One]) [0x1F] = \DS49 /* External reference */
            DerefOf (EWRY [One]) [0x20] = \DS4A /* External reference */
            Return (EWRY) /* \_SB_.PCI0.GP13.NCRD.EWRY */
        }

        Name (WGDY, Package (0x02)
        {
            Zero, 
            Package (0x13)
            {
                0x07, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80
            }
        })
        Method (WGDS, 0, Serialized)
        {
            DerefOf (WGDY [One]) [One] = \NF2M /* External reference */
            DerefOf (WGDY [One]) [0x02] = \NF2A /* External reference */
            DerefOf (WGDY [One]) [0x03] = \NF2B /* External reference */
            DerefOf (WGDY [One]) [0x04] = \NF5M /* External reference */
            DerefOf (WGDY [One]) [0x05] = \NF5A /* External reference */
            DerefOf (WGDY [One]) [0x06] = \NF5B /* External reference */
            DerefOf (WGDY [One]) [0x07] = \NJ2M /* External reference */
            DerefOf (WGDY [One]) [0x08] = \NJ2A /* External reference */
            DerefOf (WGDY [One]) [0x09] = \NJ2B /* External reference */
            DerefOf (WGDY [One]) [0x0A] = \NJ5M /* External reference */
            DerefOf (WGDY [One]) [0x0B] = \NJ5A /* External reference */
            DerefOf (WGDY [One]) [0x0C] = \NJ5B /* External reference */
            DerefOf (WGDY [One]) [0x0D] = \NR2M /* External reference */
            DerefOf (WGDY [One]) [0x0E] = \NR2A /* External reference */
            DerefOf (WGDY [One]) [0x0F] = \NR2B /* External reference */
            DerefOf (WGDY [One]) [0x10] = \NR5M /* External reference */
            DerefOf (WGDY [One]) [0x11] = \NR5A /* External reference */
            DerefOf (WGDY [One]) [0x12] = \NR5B /* External reference */
            Return (WGDY) /* \_SB_.PCI0.GP13.NCRD.WGDY */
        }
    }

    Scope (\_GPE)
    {
    }

    Scope (\_SB)
    {
    }

    Scope (\_SB)
    {
        Device (FDAD)
        {
            Name (_HID, "HPIC000C")  // _HID: Hardware ID
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                If ((FDRS == One))
                {
                    If (Ones)
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }

    Scope (\_SB.PCI0)
    {
        Device (P010)
        {
            Name (_ADR, 0x00010000)  // _ADR: Address
            Name (_STA, 0x0B)  // _STA: Status
        }

        Device (P020)
        {
            Name (_ADR, 0x00020000)  // _ADR: Address
            Name (_STA, 0x0B)  // _STA: Status
        }

        Device (P080)
        {
            Name (_ADR, 0x00080000)  // _ADR: Address
            Name (_STA, 0x0B)  // _STA: Status
        }

        Device (P180)
        {
            Name (_ADR, 0x00180000)  // _ADR: Address
            Name (_STA, 0x0B)  // _STA: Status
        }

        Device (P181)
        {
            Name (_ADR, 0x00180001)  // _ADR: Address
            Name (_STA, 0x0B)  // _STA: Status
        }

        Device (P182)
        {
            Name (_ADR, 0x00180002)  // _ADR: Address
            Name (_STA, 0x0B)  // _STA: Status
        }

        Device (P183)
        {
            Name (_ADR, 0x00180003)  // _ADR: Address
            Name (_STA, 0x0B)  // _STA: Status
        }

        Device (P184)
        {
            Name (_ADR, 0x00180004)  // _ADR: Address
            Name (_STA, 0x0B)  // _STA: Status
        }

        Device (P185)
        {
            Name (_ADR, 0x00180005)  // _ADR: Address
            Name (_STA, 0x0B)  // _STA: Status
        }

        Device (P186)
        {
            Name (_ADR, 0x00180006)  // _ADR: Address
            Name (_STA, 0x0B)  // _STA: Status
        }

        Device (P187)
        {
            Name (_ADR, 0x00180007)  // _ADR: Address
            Name (_STA, 0x0B)  // _STA: Status
        }
    }

    OperationRegion (CPNV, SystemMemory, 0xB8379018, 0x000100CF)
    Field (CPNV, AnyAcc, Lock, Preserve)
    {
        M082,   32, 
        M083,   32, 
        M084,   32, 
        M085,   8, 
        M221,   8, 
        M086,   16, 
        M229,   8, 
        M231,   16, 
        M235,   8, 
        M233,   32, 
            ,   1, 
            ,   2, 
            ,   1, 
            ,   1, 
            ,   1, 
            ,   1, 
        Offset (0x19), 
        M087,   1, 
            ,   1, 
        Offset (0x1C), 
        M088,   16, 
        M089,   16, 
        M090,   3, 
        M091,   5, 
        M092,   8, 
        M093,   3, 
        M094,   5, 
        M095,   8, 
        M096,   8, 
        M097,   8, 
        M098,   32, 
        M099,   32, 
        M100,   32, 
        M101,   32, 
        M102,   32, 
        M103,   32, 
        M104,   224, 
        M105,   32, 
        M106,   32768, 
        M378,   32768, 
        M379,   32768, 
        M380,   32768, 
        M381,   32768, 
        M382,   32768, 
        M383,   32768, 
        M384,   32768, 
        M385,   32768, 
        M386,   32768, 
        M387,   32768, 
        M388,   32768, 
        M389,   32768, 
        M390,   32768, 
        M391,   32768, 
        M392,   32768, 
        M107,   64, 
        M320,   32, 
        M321,   32, 
        M322,   32, 
        M323,   32, 
        M324,   32, 
        M325,   32, 
        M326,   32, 
        M327,   16, 
        M328,   8, 
        M128,   32, 
        M108,   32, 
        M109,   32, 
        M110,   32, 
        M122,   32, 
        M131,   32, 
        M132,   32, 
        M133,   32, 
        M134,   32, 
        M135,   32, 
        M136,   32, 
        M220,   32, 
        M226,   32, 
        M251,   32, 
        M310,   32, 
        M280,   32, 
        M290,   32, 
        M331,   32, 
        M414,   16
    }

    Method (M000, 1, Serialized)
    {
        Name (M285, Buffer (0x04)
        {
             0x01, 0x03, 0x80, 0x00                           // ....
        })
        CreateByteField (M285, Zero, M286)
        CreateByteField (M285, One, M287)
        CreateWordField (M285, 0x02, M288)
        If ((ToInteger (M286) == One))
        {
            Local0 = (Arg0 + 0xB0000C00)
            Local1 = ToInteger (M288)
            If ((ToInteger (M287) == 0x03))
            {
                OperationRegion (VARM, SystemIO, Local1, 0x04)
                Field (VARM, DWordAcc, NoLock, Preserve)
                {
                    VARR,   32
                }

                VARR = Local0
            }
            ElseIf ((ToInteger (M287) == 0x02))
            {
                OperationRegion (VARN, SystemIO, Local1, 0x02)
                Field (VARN, WordAcc, NoLock, Preserve)
                {
                    VARS,   16
                }

                VARS = (Local0 & 0xFFFF)
            }
            ElseIf ((ToInteger (M287) == One))
            {
                OperationRegion (VARO, SystemIO, Local1, One)
                Field (VARO, ByteAcc, NoLock, Preserve)
                {
                    VART,   8
                }

                VART = (Local0 & 0xFF)
            }
        }
    }

    Method (M019, 4, Serialized)
    {
        Return (M017 (Arg0, Arg1, Arg2, Arg3, Zero, 0x20))
    }

    Method (M020, 5, Serialized)
    {
        M018 (Arg0, Arg1, Arg2, Arg3, Zero, 0x20, Arg4)
    }

    Mutex (M421, 0x00)
    Method (M422, 4, Serialized)
    {
        Local0 = M049 (M128, 0x81)
        If ((Local0 == Zero))
        {
            Return (Ones)
        }

        Local0 = (M083 + (Local0 << 0x14))
        Local0 += 0xE0
        Acquire (M421, 0xFFFF)
        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Local1 = VAR1 /* \M422.VAR1 */
        Local2 = VAR2 /* \M422.VAR2 */
        VAR1 = Local1
        Release (M421)
        Return (Local2)
    }

    Method (M423, 5, Serialized)
    {
        Local0 = M049 (M128, 0x81)
        If ((Local0 != Zero))
        {
            Local0 = (M083 + (Local0 << 0x14))
            Local0 += 0xE0
            Acquire (M421, 0xFFFF)
            OperationRegion (VARM, SystemMemory, Local0, 0x08)
            Field (VARM, DWordAcc, NoLock, Preserve)
            {
                VAR1,   32
            }

            BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
            {
                Offset (0x04), 
                VAR2,   32
            }

            Local1 = VAR1 /* \M423.VAR1 */
            VAR2 = Arg4
            VAR1 = Local1
            Release (M421)
        }
    }

    Mutex (M253, 0x00)
    Method (M249, 4, Serialized)
    {
        If ((((Arg0 + Arg1) + Arg2) == Zero))
        {
            Local0 = Zero
        }
        Else
        {
            Local0 = M252 (Arg0, Arg1, Arg2)
        }

        If ((Local0 == Ones))
        {
            Return (Ones)
        }

        Local0 = (M083 + (Local0 << 0x14))
        Local0 += 0xB8
        Acquire (M253, 0xFFFF)
        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Local1 = VAR1 /* \M249.VAR1 */
        Local2 = VAR2 /* \M249.VAR2 */
        VAR1 = Local1
        Release (M253)
        Return (Local2)
    }

    Method (M250, 5, Serialized)
    {
        If ((((Arg0 + Arg1) + Arg2) == Zero))
        {
            Local0 = Zero
        }
        Else
        {
            Local0 = M252 (Arg0, Arg1, Arg2)
        }

        If ((Local0 != Ones))
        {
            Local0 = (M083 + (Local0 << 0x14))
            Local0 += 0xB8
            Acquire (M253, 0xFFFF)
            OperationRegion (VARM, SystemMemory, Local0, 0x08)
            Field (VARM, DWordAcc, NoLock, Preserve)
            {
                VAR1,   32
            }

            BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
            {
                Offset (0x04), 
                VAR2,   32
            }

            Local1 = VAR1 /* \M250.VAR1 */
            VAR2 = Arg4
            VAR1 = Local1
            Release (M253)
        }
    }

    Method (M021, 4, Serialized)
    {
        Local0 = (M083 + (Arg0 << 0x14))
        Local0 += (Arg1 << 0x0F)
        Local0 += (Arg2 << 0x0C)
        Local0 += 0xE0
        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Local0 = VAR2 /* \M021.VAR2 */
        Return (Local0)
    }

    Method (M022, 5, Serialized)
    {
        Local0 = (M083 + (Arg0 << 0x14))
        Local0 += (Arg1 << 0x0F)
        Local0 += (Arg2 << 0x0C)
        Local0 += 0xE0
        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        VAR2 = Arg4
    }

    Method (M023, 3, Serialized)
    {
        M018 (Arg0, Arg1, Arg2, 0x70, 0x03, One, Zero)
        M018 (Arg0, Arg1, Arg2, 0x70, 0x13, One, One)
    }

    Method (M024, 3, Serialized)
    {
        Local0 = M019 (Arg0, Arg1, Arg2, 0x0128)
        If ((Local0 & 0x00020000))
        {
            Return (Ones)
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (M026, 3, Serialized)
    {
        Local0 = M021 (Arg0, Arg1, Arg2, 0xA2)
        Local0 &= 0xFFFFFFF8
        Local1 = (Local0 >> 0x04)
        Local1 &= 0x07
        Local0 |= Local1
        Local0 |= 0x0100
        M022 (Arg0, Arg1, Arg2, 0xA2, Local0)
    }

    Method (M025, 3, Serialized)
    {
        Local0 = M019 (Arg0, Arg1, Arg2, 0x68)
        Local0 &= 0xFFFFFFDF
        M020 (Arg0, Arg1, Arg2, 0x68, Local0)
        Local0 |= 0x20
        M020 (Arg0, Arg1, Arg2, 0x68, Local0)
        Local1 = 0x64
        Local2 = One
        While ((Local1 && Local2))
        {
            Sleep (One)
            Local3 = M019 (Arg0, Arg1, Arg2, 0x68)
            If ((Local3 & 0x08000000))
            {
                Local1--
            }
            Else
            {
                Local2 = Zero
            }
        }

        Local0 &= 0xFFFFFFDF
        M020 (Arg0, Arg1, Arg2, 0x68, Local0)
        If (!Local2)
        {
            Return (Ones)
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (M412, 1, Serialized)
    {
        Local0 = (Arg0 >> 0x07)
        Local0 &= One
        Local1 = (Arg0 >> 0x04)
        Local1 &= 0x07
        Local1 += \_GPE.M411
        Local2 = (Arg0 & 0x0F)
        Local3 = M409 (Local0, Local1, Zero)
        Local3 >>= Local2
        Local3 &= One
        Return (Local3)
    }

    Method (M413, 2, Serialized)
    {
        Local0 = (Arg0 >> 0x07)
        Local0 &= One
        Local1 = (Arg0 >> 0x04)
        Local1 &= 0x07
        Local1 += \_GPE.M411
        Local2 = (Arg0 & 0x0F)
        Local3 = M409 (Local0, Local1, One)
        Local3 &= (Ones ^ (One << Local2))
        Local3 |= (Arg1 << Local2)
        M410 (Local0, Local1, One, Local3)
    }

    Method (M009, 1, Serialized)
    {
        Local0 = (Arg0 >> 0x08)
        Local0 &= 0x07
        Local1 = (Arg0 & 0xFF)
        Local2 = Zero
        If (((Local0 == Zero) || (Local0 == One)))
        {
            If ((M085 >= 0x02))
            {
                Local2 = (Arg0 & 0xF800)
                If ((Local2 == Zero))
                {
                    If ((Local0 == Zero))
                    {
                        Local2 = M011 ((M084 + 0x1502), (Local1 * 0x04), Zero, 
                            One)
                    }
                    Else
                    {
                        Local2 = M011 ((M084 + 0x1202), (Local1 * 0x04), Zero, 
                            One)
                    }
                }
                Else
                {
                    Local3 = (Arg0 >> 0x0F)
                    Local3 &= One
                    Local4 = (Arg0 >> 0x0D)
                    Local4 &= 0x03
                    Local5 = (Arg0 >> 0x0B)
                    Local5 &= 0x03
                    If ((Local0 == Zero))
                    {
                        Local6 = (0x02D02500 + (Local1 * 0x04))
                    }
                    Else
                    {
                        Local6 = (0x02D02200 + (Local1 * 0x04))
                    }

                    Local2 = M249 (Local3, Local4, Local5, Local6)
                    Local2 >>= 0x10
                    Local2 &= One
                }
            }
            Else
            {
                Local2 = M011 ((M084 + 0x0100), Local1, 0x07, One)
            }
        }
        ElseIf (((Local0 == 0x04) || (Local0 == 0x05)))
        {
            Local3 = (Arg0 >> 0x0F)
            Local3 &= One
            Local4 = (Arg0 >> 0x0D)
            Local4 &= 0x03
            Local5 = (Arg0 >> 0x0B)
            Local5 &= 0x03
            If ((Local0 == 0x04))
            {
                Local6 = (0x02D02500 + (Local1 * 0x04))
            }
            Else
            {
                Local6 = (0x02D02200 + (Local1 * 0x04))
            }

            Local2 = M422 (Local3, Local4, Local5, Local6)
            Local2 >>= 0x10
            Local2 &= One
        }
        ElseIf ((Local0 == 0x02))
        {
            If ((M049 (M128, 0x77) == One))
            {
                Local2 = M038 ((Local1 + 0x08))
            }
            Else
            {
                Local2 = 0xFF
            }
        }
        ElseIf ((Local0 == 0x06))
        {
            Local2 = M412 (Local1)
        }

        Return (Local2)
    }

    Method (M010, 2, Serialized)
    {
        Local0 = (Arg0 >> 0x08)
        Local0 &= 0x07
        Local1 = (Arg0 & 0xFF)
        If (((Local0 == Zero) || (Local0 == One)))
        {
            If ((M085 >= 0x02))
            {
                Local2 = (Arg0 & 0xF800)
                If ((Local2 == Zero))
                {
                    If ((Local0 == Zero))
                    {
                        M012 ((M084 + 0x1502), (Local1 * 0x04), 0x06, 0x02, (
                            0x02 | Arg1))
                    }
                    Else
                    {
                        M012 ((M084 + 0x1202), (Local1 * 0x04), 0x06, 0x02, (
                            0x02 | Arg1))
                    }
                }
                Else
                {
                    Local3 = (Arg0 >> 0x0F)
                    Local3 &= One
                    Local4 = (Arg0 >> 0x0D)
                    Local4 &= 0x03
                    Local5 = (Arg0 >> 0x0B)
                    Local5 &= 0x03
                    If ((Local0 == Zero))
                    {
                        Local6 = (0x02D02500 + (Local1 * 0x04))
                    }
                    Else
                    {
                        Local6 = (0x02D02200 + (Local1 * 0x04))
                    }

                    Local2 = M249 (Local3, Local4, Local5, Local6)
                    Local2 &= 0xCF3FFFFF
                    Local2 |= 0x00800000
                    Local2 |= (Arg1 << 0x16)
                    M250 (Local3, Local4, Local5, Local6, Local2)
                }
            }
            Else
            {
                M012 ((M084 + 0x0100), Local1, 0x06, One, Arg1)
                M012 ((M084 + 0x0100), Local1, 0x05, One, Zero)
            }
        }
        ElseIf (((Local0 == 0x04) || (Local0 == 0x05)))
        {
            Local3 = (Arg0 >> 0x0F)
            Local3 &= One
            Local4 = (Arg0 >> 0x0D)
            Local4 &= 0x03
            Local5 = (Arg0 >> 0x0B)
            Local5 &= 0x03
            If ((Local0 == 0x04))
            {
                Local6 = (0x02D02500 + (Local1 * 0x04))
            }
            Else
            {
                Local6 = (0x02D02200 + (Local1 * 0x04))
            }

            Local2 = M422 (Local3, Local4, Local5, Local6)
            Local2 &= 0xCF3FFFFF
            Local2 |= 0x00800000
            Local2 |= (Arg1 << 0x16)
            M423 (Local3, Local4, Local5, Local6, Local2)
        }
        ElseIf ((Local0 == 0x02))
        {
            If ((M049 (M128, 0x77) == One))
            {
                M039 ((Local1 + 0x08), Arg1)
            }
        }
        ElseIf ((Local0 == 0x06))
        {
            M413 (Local1, Arg1)
        }
    }

    Name (M037, Buffer (0x17)
    {
        /* 0000 */  0x7E, 0x81, 0x03, 0x16, 0x04, 0x15, 0x0E, 0x05,  // ~.......
        /* 0008 */  0x02, 0x20, 0x06, 0x07, 0x10, 0x11, 0x12, 0x18,  // . ......
        /* 0010 */  0x17, 0x19, 0x0B, 0x01, 0x0F, 0x0D, 0x09         // .......
    })
    Name (M227, Buffer (0x18)
    {
        /* 0000 */  0x41, 0x42, 0x03, 0x16, 0x04, 0x15, 0x0E, 0x05,  // AB......
        /* 0008 */  0x02, 0x44, 0x06, 0x07, 0x10, 0x11, 0x12, 0x18,  // .D......
        /* 0010 */  0x17, 0x45, 0x0B, 0x01, 0x0F, 0x0D, 0x09, 0x08   // .E......
    })
    Name (M329, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x5A, 0x03, 0x16, 0x04, 0x15, 0x5B, 0x05,  // YZ....[.
        /* 0008 */  0x02, 0x56, 0x06, 0x4C, 0x10, 0x11, 0x12, 0x18,  // .V.L....
        /* 0010 */  0x17, 0x81, 0x54, 0x01, 0x28, 0x00, 0x09, 0x08   // ..T.(...
    })
    Name (M32A, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x5A, 0x03, 0x16, 0x04, 0x15, 0x5B, 0x05,  // YZ....[.
        /* 0008 */  0x02, 0x56, 0x06, 0x4C, 0x10, 0x11, 0x1D, 0x1E,  // .V.L....
        /* 0010 */  0x17, 0x81, 0x54, 0x01, 0x28, 0x00, 0x09, 0x08   // ..T.(...
    })
    Name (M330, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x5A, 0x03, 0x16, 0x04, 0x15, 0x5B, 0x05,  // YZ....[.
        /* 0008 */  0x02, 0x56, 0x06, 0x07, 0x10, 0x11, 0x12, 0x18,  // .V......
        /* 0010 */  0x17, 0x81, 0x54, 0x01, 0x28, 0x00, 0x09, 0x08   // ..T.(...
    })
    Name (M32B, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x5A, 0x03, 0x16, 0x04, 0x15, 0x5B, 0x05,  // YZ....[.
        /* 0008 */  0x02, 0x56, 0x06, 0x07, 0x10, 0x11, 0x12, 0x18,  // .V......
        /* 0010 */  0x17, 0x81, 0x54, 0x01, 0x28, 0x00, 0x09, 0x08   // ..T.(...
    })
    Method (M029, 1, Serialized)
    {
        If ((M085 == 0x02))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M037 [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf ((M085 >= 0x09))
        {
            If ((M085 >= 0x0B))
            {
                If ((M085 >= 0x0D))
                {
                    Return (M011 ((M084 + 0x1502), (DerefOf (M32B [Arg0]) * 
                        0x04), Zero, One))
                }
                Else
                {
                    Return (M011 ((M084 + 0x1502), (DerefOf (M32A [Arg0]) * 
                        0x04), Zero, One))
                }
            }
            Else
            {
                Return (M011 ((M084 + 0x1502), (DerefOf (M330 [Arg0]) * 
                    0x04), Zero, One))
            }
        }
        ElseIf ((M085 == 0x08))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M329 [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf ((M085 >= 0x03))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M227 [Arg0]) * 
                0x04), Zero, One))
        }
        Else
        {
            Return (M011 ((M084 + 0x0160), Arg0, 0x07, One))
        }
    }

    Method (M031, 1, Serialized)
    {
        Local0 = M011 ((M084 + 0x0240), Arg0, Zero, 0x05)
        Return (M011 ((M084 + 0x0208), (Local0 / 0x08), (Local0 & 
            0x07), One))
    }

    Method (M032, 2, Serialized)
    {
        Local0 = M011 ((M084 + 0x0240), Arg0, Zero, 0x05)
        M012 ((M084 + 0x0208), (Local0 / 0x08), (Local0 & 0x07
            ), One, Arg1)
    }

    Method (M013, 4, Serialized)
    {
        Local0 = (Arg0 + Arg1)
        OperationRegion (VARM, SystemMemory, Local0, 0x04)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VARR,   32
        }

        Local1 = VARR /* \M013.VARR */
        Local5 = 0x7FFFFFFF
        Local5 |= 0x80000000
        Local2 = ((Local1 >> Arg2) & (Local5 >> (0x20 - Arg3)
            ))
        Return (Local2)
    }

    Method (M014, 5, Serialized)
    {
        Local0 = (Arg0 + Arg1)
        OperationRegion (VARM, SystemMemory, Local0, 0x04)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VARR,   32
        }

        Local1 = VARR /* \M014.VARR */
        Local5 = 0x7FFFFFFF
        Local5 |= 0x80000000
        Local2 = (Arg2 + Arg3)
        Local2 = (0x20 - Local2)
        Local2 = (((Local5 << Local2) & Local5) >> Local2)
        Local2 = ((Local2 >> Arg2) << Arg2)
        Local3 = (Arg4 << Arg2)
        Local4 = ((Local1 & (Local5 ^ Local2)) | Local3)
        VARR = Local4
    }

    Method (M011, 4, Serialized)
    {
        Local0 = (Arg0 + Arg1)
        OperationRegion (VARM, SystemMemory, Local0, One)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            VARR,   8
        }

        Local1 = VARR /* \M011.VARR */
        Local2 = ((Local1 >> Arg2) & (0xFF >> (0x08 - Arg3)
            ))
        Return (Local2)
    }

    Method (M012, 5, Serialized)
    {
        Local0 = (Arg0 + Arg1)
        OperationRegion (VARM, SystemMemory, Local0, One)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            VARR,   8
        }

        Local1 = VARR /* \M012.VARR */
        Local2 = (Arg2 + Arg3)
        Local2 = (0x08 - Local2)
        Local2 = (((0xFF << Local2) & 0xFF) >> Local2)
        Local2 = ((Local2 >> Arg2) << Arg2)
        Local3 = (Arg4 << Arg2)
        Local4 = ((Local1 & (0xFF ^ Local2)) | Local3)
        VARR = Local4
    }

    Method (M017, 6, Serialized)
    {
        Local0 = M083 /* External reference */
        Local1 = (M083 >> 0x14)
        Local2 = (Local1 & 0x0F00)
        Local2 += 0x0100
        If (((Local1 + Arg0) >= Local2))
        {
            Local3 = 0x7FFFFFFF
            Local3 |= 0x80000000
            Local4 = ((Local3 >> Arg4) & (Local3 >> (0x20 - Arg5)
                ))
            Return (Local4)
        }

        Local0 += (Arg0 << 0x14)
        Local0 += (Arg1 << 0x0F)
        Local0 += (Arg2 << 0x0C)
        Return (M013 (Local0, Arg3, Arg4, Arg5))
    }

    Method (M018, 7, Serialized)
    {
        Local0 = M083 /* External reference */
        Local1 = (M083 >> 0x14)
        Local2 = (Local1 & 0x0F00)
        Local2 += 0x0100
        If (((Local1 + Arg0) < Local2))
        {
            Local0 += (Arg0 << 0x14)
            Local0 += (Arg1 << 0x0F)
            Local0 += (Arg2 << 0x0C)
            If ((M013 (Local0, Zero, Zero, 0x20) != Ones))
            {
                M014 (Local0, Arg3, Arg4, Arg5, Arg6)
            }
        }
    }

    Method (M265, 3, Serialized)
    {
        Local0 = Zero
        Local1 = M017 (Arg0, Arg1, Arg2, 0x34, Zero, 0x08)
        While ((Local1 != Zero))
        {
            Local2 = M017 (Arg0, Arg1, Arg2, Local1, Zero, 0x08)
            If (((Local2 == Zero) || (Local2 == 0xFF)))
            {
                Break
            }

            If ((Local2 == 0x10))
            {
                Local3 = M017 (Arg0, Arg1, Arg2, (Local1 + 0x0C), 0x12, One)
                Local4 = M017 (Arg0, Arg1, Arg2, (Local1 + 0x10), 0x08, One)
                If (((Local3 == One) && (Local4 == One)))
                {
                    Local0 = One
                }

                Break
            }

            Local1 = M017 (Arg0, Arg1, Arg2, (Local1 + One), Zero, 0x08)
        }

        Return (Local0)
    }

    Method (M033, 3, Serialized)
    {
        Local0 = Zero
        Local1 = M017 (Arg0, Arg1, Arg2, 0x34, Zero, 0x08)
        While ((Local1 != Zero))
        {
            Local2 = M017 (Arg0, Arg1, Arg2, Local1, Zero, 0x08)
            If (((Local2 == Zero) || (Local2 == 0xFF)))
            {
                Break
            }

            If ((Local2 == 0x10))
            {
                Local0 = M017 (Arg0, Arg1, Arg2, (Local1 + 0x0C), 0x0A, 0x02)
                Break
            }

            Local1 = M017 (Arg0, Arg1, Arg2, (Local1 + One), Zero, 0x08)
        }

        Return (Local0)
    }

    Method (M027, 3, Serialized)
    {
        Local0 = Zero
        Local1 = M017 (Arg0, Arg1, Arg2, 0x34, Zero, 0x08)
        While ((Local1 != Zero))
        {
            Local2 = M017 (Arg0, Arg1, Arg2, Local1, Zero, 0x08)
            If (((Local2 == Zero) || (Local2 == 0xFF)))
            {
                Break
            }

            If ((Local2 == 0x10))
            {
                Local0 = M017 (Arg0, Arg1, Arg2, (Local1 + 0x10), Zero, 0x02)
                Break
            }

            Local1 = M017 (Arg0, Arg1, Arg2, (Local1 + One), Zero, 0x08)
        }

        Return (Local0)
    }

    Method (M028, 4, Serialized)
    {
        Local1 = M017 (Arg0, Arg1, Arg2, 0x34, Zero, 0x08)
        While (((Local1 != Zero) && (Local1 < 0xFF)))
        {
            Local2 = M017 (Arg0, Arg1, Arg2, Local1, Zero, 0x08)
            If (((Local2 == Zero) || (Local2 == 0xFF)))
            {
                Break
            }

            If ((Local2 == 0x10))
            {
                M018 (Arg0, Arg1, Arg2, (Local1 + 0x10), Zero, 0x02, Arg3)
                Break
            }

            Local1 = M017 (Arg0, Arg1, Arg2, (Local1 + One), Zero, 0x08)
        }
    }

    Method (M034, 1, Serialized)
    {
        Return (M011 ((M084 + 0x0700), Arg0, Zero, 0x08))
    }

    Method (M015, 1, Serialized)
    {
        Return (M011 ((M084 + 0x0400), Arg0, Zero, 0x08))
    }

    Method (M016, 2, Serialized)
    {
        M012 ((M084 + 0x0400), Arg0, Zero, 0x08, Arg1)
    }

    Method (M035, 1, Serialized)
    {
        Return (M011 (M084, Arg0, Zero, 0x08))
    }

    Method (M036, 2, Serialized)
    {
        M012 (M084, Arg0, Zero, 0x08, Arg1)
    }

    Method (M001, 2, Serialized)
    {
        Local0 = Zero
        If ((Arg0 == 0x15))
        {
            Local0 = One
        }

        Return (Local0)
    }

    Method (M003, 3, Serialized)
    {
        Local0 = (Arg0 << 0x05)
        Local1 = (Local0 + Arg1)
        Local2 = (Local1 << 0x18)
        Local3 = (Local2 + Arg2)
        Return (Local3)
    }

    Method (M004, 1, Serialized)
    {
        OperationRegion (VARM, SystemIO, 0x0CD8, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg0, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Local0 = VAR2 /* \M004.VAR2 */
        Return (Local0)
    }

    Method (M005, 2, Serialized)
    {
        OperationRegion (VARM, SystemIO, 0x0CD8, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg0, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        VAR2 = Arg1
    }

    Method (M006, 3, Serialized)
    {
        Local0 = (M004 (Arg0) & Arg1)
        Local1 = (Local0 | Arg2)
        M005 (Arg0, Local1)
    }

    Method (M002, 2, Serialized)
    {
        If ((Arg0 == Zero))
        {
            If ((Arg1 == Zero))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFEFFF, Zero)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFEFE, Zero)
            }

            If ((Arg1 == One))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFDFFF, Zero)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFDFD, Zero)
            }

            If ((Arg1 == 0x02))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFBFFF, Zero)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFBFB, Zero)
            }

            If ((Arg1 == 0x03))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFF7FFF, Zero)
                M006 (M003 (One, Zero, 0x65), 0xFFFFF7F7, Zero)
            }

            Sleep (One)
        }

        If ((Arg0 == One))
        {
            If ((Arg1 == Zero))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFEFFF, 0x1000)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFEFE, 0x0101)
            }

            If ((Arg1 == One))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFDFFF, 0x2000)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFDFD, 0x0202)
            }

            If ((Arg1 == 0x02))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFBFFF, 0x4000)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFBFB, 0x0404)
            }

            If ((Arg1 == 0x03))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFF7FFF, 0x8000)
                M006 (M003 (One, Zero, 0x65), 0xFFFFF7F7, 0x0808)
            }

            Sleep (One)
        }

        If ((Arg0 == Zero))
        {
            M008 (Arg1)
            Local0 = M004 (M003 (0x03, Arg1, 0xA5))
            Local0 &= 0xFF
            Local1 = 0x01F4
            While (((Local1 > Zero) && (Local0 != 0x10)))
            {
                Local0 = M004 (M003 (0x03, Arg1, 0xA5))
                Local0 &= 0xFF
                Local1--
                Sleep (One)
            }

            If ((Local0 != 0x10))
            {
                M007 (Arg1)
            }
        }
    }

    Method (M008, 1, Serialized)
    {
        Local0 = M019 (Zero, 0x15, Arg0, 0x88)
        Local1 = ((Local0 & 0xFFFFFFF0) | 0x02)
        M020 (Zero, 0x15, Arg0, 0x88, Local1)
        M006 (M003 (0x03, Arg0, 0xA4), 0xFFFFFFFE, One)
        M006 (M003 (0x03, Arg0, 0xA2), 0xFFFFDFFF, 0x2000)
        M006 (M003 (0x03, Arg0, 0xC0), 0xFFFF7FFF, 0x8000)
        M006 (M003 (0x03, Arg0, 0xA4), 0xDFFFFFFF, 0x20000000)
        Sleep (One)
    }

    Method (M007, 1, Serialized)
    {
        Local0 = M019 (Zero, 0x15, Arg0, 0x88)
        Local1 = ((Local0 & 0xFFFFFFF0) | One)
        M020 (Zero, 0x15, Arg0, 0x88, Local1)
        M006 (M003 (0x03, Arg0, 0xA4), 0xFFFFFFFE, Zero)
        M006 (M003 (0x03, Arg0, 0xA2), 0xFFFFDFFF, 0x2000)
        Sleep (One)
    }

    Method (M111, 2, Serialized)
    {
        If ((Arg0 != Zero))
        {
            Local0 = M110 /* External reference */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        Local3 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                        If ((Local3 != Zero))
                        {
                            Local4 = M013 ((Local0 + Local1), 0x02, Zero, 0x08)
                            If ((Local4 == Zero))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                M010 (Local5, Local6)
                            }

                            If ((Local4 == One))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                While ((M009 (Local5) != Local6)){}
                            }

                            If ((Local4 == 0x02))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                                Sleep (((Local5 + 0x03E7) / 0x03E8))
                            }
                        }
                    }

                    Local1 += 0x08
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                }
            }
        }
    }

    Method (M228, 1, Serialized)
    {
        If ((Arg0 > 0x03))
        {
            Local0 = M110 /* External reference */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local3 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                    If ((Local3 == Arg0))
                    {
                        Local4 = M013 ((Local0 + Local1), 0x02, Zero, 0x08)
                        If ((Local4 == Zero))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                            M010 (Local5, Local6)
                        }

                        If ((Local4 == One))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                            While ((M009 (Local5) != Local6)){}
                        }

                        If ((Local4 == 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                            Sleep (((Local5 + 0x03E7) / 0x03E8))
                        }
                    }

                    Local1 += 0x08
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                }
            }
        }
    }

    Method (M219, 2, Serialized)
    {
        If ((Arg0 != Zero))
        {
            Local0 = M221 /* External reference */
            If ((Local0 & 0x02))
            {
                Local0 = M220 /* External reference */
                If (Local0)
                {
                    Local0 += 0x10
                    Local1 = Zero
                    Local2 = One
                    While ((Local2 != 0xFF))
                    {
                        Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                        Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                        Local4 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                        Local5 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                        Local7 = M013 ((Local0 + Local1), 0x08, Zero, 0x20)
                        If ((Local4 == Arg0))
                        {
                            If (((Local2 < 0x0A) && (Local5 & 0x80)))
                            {
                                If ((Arg1 == Zero))
                                {
                                    If ((M085 >= 0x04))
                                    {
                                        If (((Local7 >> 0x10) > Zero))
                                        {
                                            If (((Local7 >> 0x1C) == 0x02))
                                            {
                                                Local6 = M249 (((Local7 >> 0x18) & 0x0F), ((
                                                    Local7 >> 0x14) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D02300)
                                            }
                                            Else
                                            {
                                                Local6 = M249 (((Local7 >> 0x18) & 0x0F), ((
                                                    Local7 >> 0x14) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D01E00)
                                            }

                                            Local6 &= (Ones ^ (0x03 << (Local2 << One)))
                                            If (((Local7 >> 0x1C) == 0x02))
                                            {
                                                M250 (((Local7 >> 0x18) & 0x0F), ((Local7 >> 0x14
                                                    ) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D02300, Local6)
                                            }
                                            Else
                                            {
                                                M250 (((Local7 >> 0x18) & 0x0F), ((Local7 >> 0x14
                                                    ) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D01E00, Local6)
                                            }
                                        }
                                        ElseIf ((Local2 >= 0x04))
                                        {
                                            M012 ((M084 + 0x0E00), One, ((Local2 - 0x04) * 0x02
                                                ), 0x02, Zero)
                                        }
                                        Else
                                        {
                                            M012 ((M084 + 0x0E00), Zero, (Local2 * 0x02), 0x02, Zero)
                                        }
                                    }
                                    Else
                                    {
                                        M012 ((M084 + 0x0E00), (Local2 / 0x02), ((Local2 & 
                                            One) * 0x04), 0x04, Zero)
                                    }
                                }
                                ElseIf ((Local5 & 0x04))
                                {
                                    If ((Arg1 == One))
                                    {
                                        If ((M085 >= 0x04))
                                        {
                                            If (((Local7 >> 0x10) > Zero))
                                            {
                                                If (((Local7 >> 0x1C) == 0x02))
                                                {
                                                    Local6 = M249 (((Local7 >> 0x18) & 0x0F), ((
                                                        Local7 >> 0x14) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D02300)
                                                }
                                                Else
                                                {
                                                    Local6 = M249 (((Local7 >> 0x18) & 0x0F), ((
                                                        Local7 >> 0x14) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D01E00)
                                                }

                                                Local6 &= (Ones ^ (0x03 << (Local2 << One)))
                                                Local6 |= (0x03 << (Local2 << One))
                                                If (((Local7 >> 0x1C) == 0x02))
                                                {
                                                    M250 (((Local7 >> 0x18) & 0x0F), ((Local7 >> 0x14
                                                        ) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D02300, Local6)
                                                }
                                                Else
                                                {
                                                    M250 (((Local7 >> 0x18) & 0x0F), ((Local7 >> 0x14
                                                        ) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D01E00, Local6)
                                                }
                                            }
                                            ElseIf ((Local2 >= 0x04))
                                            {
                                                M012 ((M084 + 0x0E00), One, ((Local2 - 0x04) * 0x02
                                                    ), 0x02, 0x03)
                                            }
                                            Else
                                            {
                                                M012 ((M084 + 0x0E00), Zero, (Local2 * 0x02), 0x02, 0x03)
                                            }
                                        }
                                        Else
                                        {
                                            M012 ((M084 + 0x0E00), (Local2 / 0x02), ((Local2 & 
                                                One) * 0x04), 0x04, 0x0F)
                                        }
                                    }

                                    If ((Arg1 == 0x02))
                                    {
                                        Local6 = M017 (Zero, M013 ((Local0 + Local1), 0x05, Zero, 0x08), 
                                            M013 ((Local0 + Local1), 0x06, Zero, 0x08), 0x19, Zero, 0x08)
                                        If ((M265 (Local6, Zero, Zero) == One))
                                        {
                                            If ((M085 >= 0x04))
                                            {
                                                If (((Local7 >> 0x10) > Zero))
                                                {
                                                    If (((Local7 >> 0x1C) == 0x02))
                                                    {
                                                        Local6 = M249 (((Local7 >> 0x18) & 0x0F), ((
                                                            Local7 >> 0x14) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D02300)
                                                    }
                                                    Else
                                                    {
                                                        Local6 = M249 (((Local7 >> 0x18) & 0x0F), ((
                                                            Local7 >> 0x14) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D01E00)
                                                    }

                                                    Local6 &= (Ones ^ (0x03 << (Local2 << One)))
                                                    Local6 |= (Local3 << (Local2 << One))
                                                    If (((Local7 >> 0x1C) == 0x02))
                                                    {
                                                        M250 (((Local7 >> 0x18) & 0x0F), ((Local7 >> 0x14
                                                            ) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D02300, Local6)
                                                    }
                                                    Else
                                                    {
                                                        M250 (((Local7 >> 0x18) & 0x0F), ((Local7 >> 0x14
                                                            ) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D01E00, Local6)
                                                    }
                                                }
                                                ElseIf ((Local2 >= 0x04))
                                                {
                                                    M012 ((M084 + 0x0E00), One, ((Local2 - 0x04) * 0x02
                                                        ), 0x02, Local3)
                                                }
                                                Else
                                                {
                                                    M012 ((M084 + 0x0E00), Zero, (Local2 * 0x02), 0x02, Local3)
                                                }
                                            }
                                            Else
                                            {
                                                M012 ((M084 + 0x0E00), (Local2 / 0x02), ((Local2 & 
                                                    One) * 0x04), 0x04, Local3)
                                            }
                                        }
                                    }
                                }
                                ElseIf ((M085 >= 0x04))
                                {
                                    M012 ((M084 + 0x0E00), Zero, (Local2 * 0x02), 0x02, 0x03)
                                }
                                Else
                                {
                                    M012 ((M084 + 0x0E00), (Local2 / 0x02), ((Local2 & 
                                        One) * 0x04), 0x04, Local3)
                                }

                                Local2 = 0xFF
                            }
                        }

                        Local1 += 0x0C
                    }
                }
            }
        }
    }

    Method (M112, 2, Serialized)
    {
        If ((Arg0 != Zero))
        {
            Local0 = M109 /* External reference */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = One
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                    Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        If ((Local3 < 0x02))
                        {
                            Local4 = M013 ((Local0 + Local1), 0x02, Zero, 0x08)
                            If ((Local4 == Zero))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                M010 (Local5, Local6)
                            }

                            If ((Local4 == One))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                M010 (Local5, Local6)
                                Local7 = M009 (Local5)
                                Local4 = 0x03F2
                                While (((Local4 > Zero) && (Local7 != Local6)))
                                {
                                    Local4 = (Local4 - One)
                                    Stall (0x63)
                                    Local7 = M009 (Local5)
                                }
                            }
                        }

                        If ((Local3 == 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                            Sleep (((Local5 + 0x03E7) / 0x03E8))
                        }
                    }

                    Local1 += 0x08
                }
            }
        }
    }

    Method (M275, 2, Serialized)
    {
        Local7 = Zero
        If ((Arg0 != Zero))
        {
            Local0 = M109 /* External reference */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = One
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                    Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        If ((Local3 < 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                            If ((M009 (Local5) == Local6))
                            {
                                Local7 = One
                            }
                        }
                    }

                    Local1 += 0x08
                }
            }
        }

        Return (Local7)
    }

    Method (M113, 1, Serialized)
    {
        If ((Arg0 != Zero))
        {
            Local0 = M108 /* External reference */
            Local7 = One
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = One
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                    If ((Local2 == Arg0))
                    {
                        Local2 = 0xFF
                        Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                        If ((Local3 == Zero))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 (Local5) == Local6)
                        }

                        If ((Local3 == One))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x05, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                            Local7 &= (M009 (Local5) == Local6)
                        }

                        If ((Local3 == 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x05, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                            Local7 &= (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x08, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x0A, Zero, 0x08)
                            Local7 &= (M009 (Local5) == Local6)
                        }

                        If ((Local3 == 0x03))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x05, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                            Local7 |= (M009 (Local5) == Local6)
                        }

                        If ((Local3 == 0x04))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x05, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                            Local7 |= (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x08, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x0A, Zero, 0x08)
                            Local7 |= (M009 (Local5) == Local6)
                        }
                    }
                    Else
                    {
                        Local1 += 0x0B
                    }
                }
            }
        }
        Else
        {
            Local7 = Zero
        }

        If (Local7)
        {
            Local7 = One
        }

        Return (Local7)
    }

    Method (M114, 4, Serialized)
    {
        Local7 = Zero
        If (!M001 (Arg0, Arg1))
        {
            Name (M115, Buffer (0x05){})
            CreateWordField (M115, Zero, M116)
            CreateField (M115, 0x10, 0x03, M117)
            CreateField (M115, 0x13, 0x05, M118)
            CreateByteField (M115, 0x03, M119)
            CreateByteField (M115, 0x04, M120)
            M116 = 0x05
            M119 = Zero
            M118 = Arg0
            M117 = Arg1
            If ((Arg2 == Zero))
            {
                If ((Arg3 != One))
                {
                    M120 = Zero
                    \_SB.ALIB (0x06, M115)
                }
            }
            Else
            {
                If ((Arg3 != One))
                {
                    M120 = One
                    \_SB.ALIB (0x06, M115)
                }

                Local0 = M017 (Zero, Arg0, Arg1, 0x19, Zero, 0x08)
                If (((Local0 != Zero) && (Local0 != 0xFF)))
                {
                    Local1 = M019 (Local0, Zero, Zero, Zero)
                    Local2 = 0x7FFFFFFF
                    Local2 |= 0x80000000
                    If (((Local1 != Zero) && (Local1 != Local2)))
                    {
                        Local7 = One
                    }
                }
            }
        }
        ElseIf ((Arg2 == Zero))
        {
            M002 (One, Arg1)
        }
        Else
        {
            M002 (Zero, Arg1)
            Local0 = M017 (Zero, Arg0, Arg1, 0x19, Zero, 0x08)
            If (((Local0 != Zero) && (Local0 != 0xFF)))
            {
                Local1 = M019 (Local0, Zero, Zero, Zero)
                Local2 = 0x7FFFFFFF
                Local2 |= 0x80000000
                If (((Local1 != Zero) && (Local1 != Local2)))
                {
                    Local7 = One
                }
            }
        }

        Return (Local7)
    }

    Method (M252, 3, Serialized)
    {
        If ((M085 >= 0x08))
        {
            Local0 = M251 /* External reference */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = Zero
                While ((Local2 != 0xFF))
                {
                    Local2 = M011 ((Local0 + Local1), Zero, Zero, 0x08)
                    Local3 = M011 ((Local0 + Local1), One, Zero, 0x08)
                    Local4 = M011 ((Local0 + Local1), 0x02, Zero, 0x08)
                    Local5 = M011 ((Local0 + Local1), 0x03, Zero, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        If ((Local4 == Arg2))
                        {
                            Return (Local5)
                        }
                    }

                    Local1 += 0x04
                }
            }
        }

        Return (Ones)
    }

    Name (M046, Zero)
    Name (M047, Ones)
    Method (M045, 0, Serialized)
    {
        Local0 = Zero
        If ((M047 == Ones))
        {
            M047 = Zero
            M046 = Zero
            If (CondRefOf (\_OSI))
            {
                If (\_OSI ("Windows 2012"))
                {
                    M046 = One
                }

                If (\_OSI ("Windows 2013"))
                {
                    M046 = One
                }

                If (\_OSI ("Windows 2015"))
                {
                    M046 = One
                }

                If (\_OSI ("Windows 2016"))
                {
                    M046 = One
                }

                If (\_OSI ("Windows 2017"))
                {
                    M046 = One
                }
            }
        }

        If ((M046 == One))
        {
            Local0 = One
        }

        Return (Local0)
    }

    Method (M049, 2, Serialized)
    {
        Local0 = Zero
        If ((Arg0 != Zero))
        {
            Local0 = M011 (Arg0, Arg1, Zero, 0x08)
        }

        Return (Local0)
    }

    Method (M04A, 2, Serialized)
    {
        Local0 = Zero
        If ((Arg0 != Zero))
        {
            Local0 = M011 (Arg0, Arg1, Zero, 0x08)
            Local1 = M011 (Arg0, (Arg1 + One), Zero, 0x08)
            Local0 |= (Local1 << 0x08)
        }

        Return (Local0)
    }

    Method (M04B, 2, Serialized)
    {
        Local0 = Zero
        If ((Arg0 != Zero))
        {
            Local0 = M011 (Arg0, Arg1, Zero, 0x08)
            Local1 = M011 (Arg0, (Arg1 + One), Zero, 0x08)
            Local2 = M011 (Arg0, (Arg1 + 0x02), Zero, 0x08)
            Local3 = M011 (Arg0, (Arg1 + 0x03), Zero, 0x08)
            Local0 |= (Local1 << 0x08)
            Local0 |= (Local2 << 0x10)
            Local0 |= (Local3 << 0x18)
        }

        Return (Local0)
    }

    Mutex (M230, 0x00)
    Method (M232, 3, Serialized)
    {
        Local0 = Arg0
        Local1 = Arg1
        Local2 = Arg2
        Acquire (M230, 0xFFFF)
        Local0 = Arg0
        OperationRegion (VARM, SystemIO, M231, 0x02)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            VAR1,   8, 
            VAR2,   8
        }

        VAR2 = Local1
        VAR1 = Local0
        Sleep (Local2)
        Release (M230)
    }

    Method (M043, 3, Serialized)
    {
        If (CondRefOf (MOEM))
        {
            Return (MOEM (Arg0, Arg1, Arg2))
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (MLIB, 2, Serialized)
    {
        Switch (ToInteger (Arg0))
        {
            Case (Zero)
            {
                Local0 = DerefOf (Arg1 [0x02])
                Switch (ToInteger (Local0))
                {
                    Case (0x03)
                    {
                        M228 (0x04)
                        M228 (0x05)
                    }
                    Case (0x04)
                    {
                        M228 (0x04)
                        M228 (0x06)
                    }
                    Case (0x05)
                    {
                        M228 (0x04)
                        M228 (0x07)
                    }

                }
            }

        }
    }

    Method (M248, 1, Serialized)
    {
        If ((M085 == 0x08))
        {
            If ((Arg0 == Zero))
            {
                Return (M017 (Zero, 0x07, One, 0x19, Zero, 0x08))
            }
            Else
            {
                Return (M017 (Zero, 0x08, One, 0x19, Zero, 0x08))
            }
        }
        ElseIf ((M085 >= 0x0B))
        {
            If ((M085 >= 0x0D))
            {
                Return (M017 (Zero, 0x08, (Arg0 + One), 0x19, Zero, 0x08))
            }
            ElseIf ((Arg0 == Zero))
            {
                Return (M017 (Zero, 0x07, One, 0x19, Zero, 0x08))
            }
            Else
            {
                Return (M017 (Zero, 0x08, Arg0, 0x19, Zero, 0x08))
            }
        }
        ElseIf ((M085 >= 0x09))
        {
            If ((Arg0 == Zero))
            {
                Return (M017 (Zero, 0x08, One, 0x19, Zero, 0x08))
            }
            Else
            {
                Return (M017 (Zero, 0x08, 0x02, 0x19, Zero, 0x08))
            }
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (M401, 2, NotSerialized)
    {
        Local0 = (Arg0 & 0x1F)
        Local0 = ((Local0 << 0x03) | (Arg1 & 0x07))
        Local1 = Zero
        If (((M085 >= 0x09) && (M085 <= 0x0A)))
        {
            Local2 = 0x07
        }
        Else
        {
            Local2 = 0x0A
        }

        Local3 = 0x14301000
        Local4 = M249 (Zero, Zero, Zero, ((Local1 * 0x04) + Local3
            ))
        While (((Local1 < Local2) && (Local4 != Local0)))
        {
            Local1++
            Local4 = M249 (Zero, Zero, Zero, ((Local1 * 0x04) + Local3
                ))
        }

        If ((Local1 <= Local2))
        {
            Return (Local1)
        }
        Else
        {
            Return (0xFF)
        }
    }

    Method (M402, 2, NotSerialized)
    {
        Local4 = M401 (Arg0, Arg1)
        If ((Local4 != 0xFF))
        {
            If (((M085 >= 0x08) && (M085 <= 0x0B)))
            {
                Local0 = M249 (Zero, Zero, Zero, 0x11180188)
                Local0 &= 0xFFFFDFFF
                M250 (Zero, Zero, Zero, 0x11180188, (Local0 | 0x2000))
            }

            Local1 = (M019 (Zero, Zero, Zero, 0x84) & 0xFF00FCFF)
            Local2 = ((Arg0 << 0x13) | (Arg1 << 0x10))
            Local1 |= Local2
            M020 (Zero, Zero, Zero, 0x84, (Local1 | 0x0100))
            M020 (Zero, Zero, Zero, 0x84, (Local1 | 0x0300))
            If ((M085 >= 0x0C))
            {
                Local3 = M019 (Zero, Zero, Zero, 0x84)
                Local5 = 0x4EEA
                While (((Local5 > Zero) && ((Local3 & 0x0400) != 0x0400)))
                {
                    Local5 = (Local5 - One)
                    Stall (0x63)
                    Local3 = M019 (Zero, Zero, Zero, 0x84)
                }
            }

            If (((M085 == 0x0D) && (Local4 >= 0x03)))
            {
                Local2 = (0x11240294 + ((Local4 - 0x03) << 0x0C))
            }
            Else
            {
                Local2 = (0x11140294 + (Local4 << 0x0C))
            }

            Local3 = M249 (Zero, Zero, Zero, Local2)
            Local5 = 0x4EEA
            While (((Local5 > Zero) && ((Local3 & 0x3F) != 0x1F)))
            {
                Local5 = (Local5 - One)
                Stall (0x63)
                Local3 = M249 (Zero, Zero, Zero, Local2)
            }

            M020 (Zero, Zero, Zero, 0x84, (Local1 | 0x0100))
            If (((M085 >= 0x08) && (M085 <= 0x0B)))
            {
                M250 (Zero, Zero, Zero, 0x11180188, Local0)
            }
        }
    }

    Method (M403, 3, NotSerialized)
    {
        Local4 = M401 (Arg0, Arg1)
        If ((Local4 != 0xFF))
        {
            If (((M085 == 0x0D) && (Local4 >= 0x03)))
            {
                Local2 = (0x11240280 + ((Local4 - 0x03) << 0x0C))
            }
            Else
            {
                Local2 = (0x11140280 + (Local4 << 0x0C))
            }

            Local0 = M249 (Zero, Zero, Zero, Local2)
            Local0 &= 0xFFBFFFFF
            Local1 = Arg2
            Local0 |= (Local1 << 0x16)
            M250 (Zero, Zero, Zero, Local2, Local0)
        }
    }

    Name (M404, Buffer (0x07)
    {
         0x00, 0x02, 0x06, 0x08, 0x04, 0x0A, 0x0C         // .......
    })
    Method (M405, 5, Serialized)
    {
        If ((M085 >= 0x04))
        {
            Local1 = DerefOf (M404 [Arg4])
            If ((((Arg0 > Zero) || (Arg1 > Zero)) || ((Arg2 > 
                Zero) || (Arg3 > Zero))))
            {
                If ((Arg3 == 0x02))
                {
                    Local0 = M249 (Arg0, Arg1, Arg2, 0x02D02300)
                }
                Else
                {
                    Local0 = M249 (Arg0, Arg1, Arg2, 0x02D01E00)
                }

                Local0 <<= (Local1 * 0x02)
                Local0 &= 0x03
            }
            ElseIf ((Local1 >= 0x04))
            {
                Local0 = M011 ((M084 + 0x0E00), One, ((Local1 - 0x04
                    ) * 0x02), 0x02)
            }
            Else
            {
                Local0 = M011 ((M084 + 0x0E00), Zero, (Local1 * 0x02), 
                    0x02)
            }
        }
        Else
        {
            Local0 = M011 ((M084 + 0x0E00), (Arg4 / 0x02), (
                (Arg4 & One) * 0x04), 0x04)
        }

        Return (Local0)
    }

    Method (M406, 6, Serialized)
    {
        If ((M085 >= 0x04))
        {
            Local1 = DerefOf (M404 [Arg4])
            If ((((Arg0 > Zero) || (Arg1 > Zero)) || ((Arg2 > 
                Zero) || (Arg3 > Zero))))
            {
                If ((Arg3 == 0x02))
                {
                    Local0 = M249 (Arg0, Arg1, Arg2, 0x02D02300)
                }
                Else
                {
                    Local0 = M249 (Arg0, Arg1, Arg2, 0x02D01E00)
                }

                Local0 &= (Ones ^ (0x03 << (Local1 << One)))
                Local0 |= (Arg5 << (Local1 << One))
                If ((Arg3 == 0x02))
                {
                    M250 (Arg0, Arg1, Arg2, 0x02D02300, Local0)
                }
                Else
                {
                    M250 (Arg0, Arg1, Arg2, 0x02D01E00, Local0)
                }
            }
            ElseIf ((Local1 >= 0x04))
            {
                M012 ((M084 + 0x0E00), One, ((Local1 - 0x04) * 0x02
                    ), 0x02, Arg5)
            }
            Else
            {
                M012 ((M084 + 0x0E00), Zero, (Local1 * 0x02), 0x02, Arg5)
            }
        }
        Else
        {
            M012 ((M084 + 0x0E00), (Arg4 / 0x02), ((Arg4 & 
                One) * 0x04), 0x04, Arg5)
        }
    }

    Mutex (M408, 0x00)
    Method (M409, 3, Serialized)
    {
        Acquire (M408, 0xFFFF)
        Local0 = (M414 + (Arg0 << 0x05))
        OperationRegion (VARM, SystemIO, Local0, 0x09)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            SMB0,   8, 
            SMB1,   8, 
            SMB2,   8, 
            SMB3,   8, 
            SMB4,   8, 
            SMB5,   8, 
            SMB6,   8, 
            SMB7,   8, 
            SMB8,   8
        }

        Local5 = M011 ((M084 + 0x0300), 0x02, Zero, 0x08)
        M012 ((M084 + 0x0300), 0x02, Zero, 0x08, (Local5 | One))
        Local1 = Zero
        Local2 = 0x64
        While (((Local2 > Zero) && ((Local1 & 0x10) != 0x10)))
        {
            SMB8 |= 0x10
            Local2 = (Local2 - One)
            Stall (0x05)
            Local1 = SMB8 /* \M409.SMB8 */
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            Local1 = One
            Local2 = 0x64
            While (((Local2 > Zero) && ((Local1 & One) != Zero)))
            {
                SMB0 = 0x1F
                Local2 = (Local2 - One)
                Stall (0x05)
                Local1 = SMB0 /* \M409.SMB0 */
            }

            If ((Local2 == Zero))
            {
                SMB2 = 0x02
                Local3 = (Local3 - One)
            }
            Else
            {
                Local3 = Zero
            }
        }

        If (((Local2 == Zero) && (Local3 == Zero)))
        {
            M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
            Release (M408)
            Return (Zero)
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            Local1 = One
            Local2 = 0x64
            While (((Local2 > Zero) && ((Local1 & One) != Zero)))
            {
                SMB1 = 0x3F
                Local2 = (Local2 - One)
                Stall (0x05)
                Local1 = SMB1 /* \M409.SMB1 */
            }

            If ((Local2 == Zero))
            {
                SMB1 = 0x02
                Local3 = (Local3 - One)
            }
            Else
            {
                Local3 = Zero
            }
        }

        If (((Local2 == Zero) && (Local3 == Zero)))
        {
            M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
            Release (M408)
            Return (Zero)
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            SMB0 = 0x1F
            SMB4 = ((Arg1 << One) | One)
            SMB3 = Arg2
            SMB2 = 0x08
            Local1 = SMB2 /* \M409.SMB2 */
            SMB2 = 0x48
            Local1 = One
            Local2 = 0x03E8
            While (((Local2 > Zero) && ((Local1 & One) != Zero)))
            {
                Local2 = (Local2 - One)
                Stall (0x05)
                Local1 = SMB0 /* \M409.SMB0 */
            }

            If ((Local2 == Zero))
            {
                SMB2 = 0x02
                M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
                Release (M408)
                Return (Zero)
            }

            Local1 = SMB0 /* \M409.SMB0 */
            If (((Local1 & 0x04) != Zero))
            {
                Local3 = Zero
                Local4 = Zero
            }
            ElseIf (((Local1 & 0x08) != Zero))
            {
                SMB0 = 0x08
                Local3 = (Local3 - One)
                Local4 = Zero
            }
            Else
            {
                Local3 = Zero
                Local4 = SMB5 /* \M409.SMB5 */
            }
        }

        SMB0 = 0x1F
        SMB8 |= 0x20
        M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
        Release (M408)
        Return (Local4)
    }

    Method (M410, 4, Serialized)
    {
        Acquire (M408, 0xFFFF)
        Local0 = (M414 + (Arg0 << 0x05))
        OperationRegion (VARM, SystemIO, Local0, 0x09)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            SMB0,   8, 
            SMB1,   8, 
            SMB2,   8, 
            SMB3,   8, 
            SMB4,   8, 
            SMB5,   8, 
            SMB6,   8, 
            SMB7,   8, 
            SMB8,   8
        }

        Local5 = M011 ((M084 + 0x0300), 0x02, Zero, 0x08)
        M012 ((M084 + 0x0300), 0x02, Zero, 0x08, (Local5 | One))
        Local1 = Zero
        Local2 = 0x64
        While (((Local2 > Zero) && ((Local1 & 0x10) != 0x10)))
        {
            SMB8 |= 0x10
            Local2 = (Local2 - One)
            Stall (0x05)
            Local1 = SMB8 /* \M410.SMB8 */
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            Local1 = One
            Local2 = 0x64
            While (((Local2 > Zero) && ((Local1 & One) != Zero)))
            {
                SMB0 = 0x1F
                Local2 = (Local2 - One)
                Stall (0x05)
                Local1 = SMB0 /* \M410.SMB0 */
            }

            If ((Local2 == Zero))
            {
                SMB2 = 0x02
                Local3 = (Local3 - One)
            }
            Else
            {
                Local3 = Zero
            }
        }

        If (((Local2 == Zero) && (Local3 == Zero)))
        {
            M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
            Release (M408)
            Return (Zero)
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            Local1 = One
            Local2 = 0x64
            While (((Local2 > Zero) && ((Local1 & One) != Zero)))
            {
                SMB1 = 0x3F
                Local2 = (Local2 - One)
                Stall (0x05)
                Local1 = SMB1 /* \M410.SMB1 */
            }

            If ((Local2 == Zero))
            {
                SMB1 = 0x02
                Local3 = (Local3 - One)
            }
            Else
            {
                Local3 = Zero
            }
        }

        If (((Local2 == Zero) && (Local3 == Zero)))
        {
            M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
            Release (M408)
            Return (Zero)
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            SMB0 = 0x1F
            SMB4 = (Arg1 << One)
            SMB3 = Arg2
            SMB2 = 0x08
            Local1 = SMB2 /* \M410.SMB2 */
            SMB5 = Arg3
            SMB2 = 0x48
            Local1 = One
            Local2 = 0x03E8
            While (((Local2 > Zero) && ((Local1 & One) != Zero)))
            {
                Local2 = (Local2 - One)
                Stall (0x05)
                Local1 = SMB0 /* \M410.SMB0 */
            }

            If ((Local2 == Zero))
            {
                SMB2 = 0x02
                M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
                Release (M408)
                Return (Zero)
            }

            Local1 = SMB0 /* \M410.SMB0 */
            If (((Local1 & 0x04) != Zero))
            {
                Local3 = Zero
                Local4 = Zero
            }
            ElseIf (((Local1 & 0x08) != Zero))
            {
                SMB0 = 0x08
                Local3 = (Local3 - One)
                Local4 = Zero
            }
            Else
            {
                Local3 = Zero
                Local4 = Zero
            }
        }

        SMB0 = 0x1F
        SMB8 |= 0x20
        M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
        Release (M408)
        Return (Local4)
    }

    Method (MPTS, 1, NotSerialized)
    {
        Local0 = M049 (M128, 0x67)
        If (((Local0 & 0x03) == 0x03))
        {
            If ((M085 >= 0x08))
            {
                If (CondRefOf (\_SB.PCXX.GPXX.SAXX.TPTS))
                {
                    \_SB.PCXX.GPXX.SAXX.TPTS (Arg0)
                }
            }
            ElseIf (CondRefOf (\_SB.PCXX.SAXX.TPTS))
            {
                \_SB.PCXX.SAXX.TPTS (Arg0)
            }
        }

        If ((M226 != Zero))
        {
            If (CondRefOf (\_SB.M263))
            {
                \_SB.M263 (Arg0)
            }
        }

        If ((M331 != Zero))
        {
            Local0 = M049 (M331, 0x10)
            Local1 = M049 (M331, 0x1D)
            If (((Local0 != Zero) && (Local1 != Zero)))
            {
                If (CondRefOf (\_SB.IPTS))
                {
                    \_SB.IPTS (Arg0)
                }
            }
        }
    }

    Method (MWAK, 1, NotSerialized)
    {
        Local0 = M049 (M128, 0x67)
        If (((Local0 & 0x03) == 0x03))
        {
            If ((M085 >= 0x08))
            {
                If (CondRefOf (\_SB.PCXX.GPXX.SAXX.TWAK))
                {
                    \_SB.PCXX.GPXX.SAXX.TWAK (Arg0)
                }
            }
            ElseIf (CondRefOf (\_SB.PCXX.SAXX.TWAK))
            {
                \_SB.PCXX.SAXX.TWAK (Arg0)
            }
        }

        If ((M226 != Zero))
        {
            If (CondRefOf (\_SB.M264))
            {
                \_SB.M264 (Arg0)
            }
        }

        If ((M280 != Zero))
        {
            If (CondRefOf (\_SB.M284))
            {
                \_SB.M284 (Arg0)
            }
        }

        If ((M331 != Zero))
        {
            Local0 = M049 (M331, 0x10)
            Local1 = M049 (M331, 0x1D)
            If (((Local0 != Zero) && (Local1 != Zero)))
            {
                If (CondRefOf (\_SB.IWAK))
                {
                    \_SB.IWAK (Arg0)
                }
            }
        }
    }

    Scope (\_SB.GPIO)
    {
        Method (XINI, 0, NotSerialized)
        {
            If ((\_GPE.M420 != 0xFF))
            {
                Local0 = (\_GPE.M415 & One)
                Local1 = (\_GPE.M416 & 0x07)
                Local1 += \_GPE.M411
                \_GPE.M419 = M409 (Local0, Local1, Zero)
            }
        }
    }

    Scope (\_GPE)
    {
        Name (M411, 0x20)
        Name (M415, One)
        Name (M416, 0x04)
        Name (M417, 0x40)
        Name (M418, 0x40)
        Name (M419, 0xFF)
        Name (M420, 0xFF)
        Method (XL0A, 0, NotSerialized)
        {
            Local0 = (\_GPE.M415 & One)
            Local1 = (\_GPE.M416 & 0x07)
            Local1 += \_GPE.M411
            Local2 = \_GPE.M419
            Local3 = M409 (Local0, Local1, Zero)
            \_GPE.M419 = Local3
            Local3 ^= Local2
            Local3 |= \_GPE.M418
            Local3 &= \_GPE.M417
            If (((Local3 & One) == One))
            {
                If (CondRefOf (\_GPE.SP00))
                {
                    \_GPE.SP00 ()
                }
            }

            If (((Local3 & 0x02) == 0x02))
            {
                If (CondRefOf (\_GPE.SP01))
                {
                    \_GPE.SP01 ()
                }
            }

            If (((Local3 & 0x04) == 0x04))
            {
                If (CondRefOf (\_GPE.SP02))
                {
                    \_GPE.SP02 ()
                }
            }

            If (((Local3 & 0x08) == 0x08))
            {
                If (CondRefOf (\_GPE.SP03))
                {
                    \_GPE.SP03 ()
                }
            }

            If (((Local3 & 0x10) == 0x10))
            {
                If (CondRefOf (\_GPE.SP04))
                {
                    \_GPE.SP04 ()
                }
            }

            If (((Local3 & 0x20) == 0x20))
            {
                If (CondRefOf (\_GPE.SP05))
                {
                    \_GPE.SP05 ()
                }
            }

            If (((Local3 & 0x40) == 0x40))
            {
                If (CondRefOf (\_GPE.SP06))
                {
                    \_GPE.SP06 ()
                }
            }

            If (((Local3 & 0x80) == 0x80))
            {
                If (CondRefOf (\_GPE.SP07))
                {
                    \_GPE.SP07 ()
                }
            }
        }
    }

    Scope (\_SB.PLTF)
    {
        Name (_LPI, Package (0x04)  // _LPI: Low Power Idle States
        {
            Zero, 
            Zero, 
            One, 
            Package (0x0A)
            {
                0x000F4240, 
                0xC350, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "S0i3"
            }
        })
    }

    Name (M278, One)
    Name (M279, One)
    Name (M27A, One)
    Name (APGE, One)
    Name (ACGE, One)
    Method (M276, 0, NotSerialized)
    {
        If ((M27A == Zero))
        {
            M278 = Zero
        }

        If (((M278 == One) || (M279 == One)))
        {
            Local0 = M017 (Zero, 0x08, One, 0x19, Zero, 0x08)
            Local1 = M019 (Local0, Zero, 0x05, Zero)
            If ((M27A == Zero))
            {
                Local1 = 0x15E21022
            }

            If (((Local0 != Zero) && (Local0 != 0xFF)))
            {
                If ((Local1 != Ones))
                {
                    M000 (0xB4)
                    If ((ACGE != Zero))
                    {
                        M250 (Zero, Zero, Zero, 0x03B10564, Zero)
                        M250 (Zero, Zero, Zero, 0x03B10998, 0xC8)
                        M250 (Zero, Zero, Zero, 0x03B10528, 0x59)
                        Local4 = M249 (Zero, Zero, Zero, 0x03B10564)
                        While ((Local4 == Zero))
                        {
                            Local4 = M249 (Zero, Zero, Zero, 0x03B10564)
                            If ((Local4 != Zero))
                            {
                                Break
                            }
                        }
                    }

                    If ((APGE != Zero))
                    {
                        M250 (Zero, Zero, Zero, 0x0900E784, 0x0103)
                        Local4 = One
                        Local5 = 0x64
                        While (((Local4 != Zero) && Local5))
                        {
                            Local4 = M249 (Zero, Zero, Zero, 0x0900E784)
                            Local4 |= 0x06
                            Local4 &= 0xFFFFFF0F
                            M250 (Zero, Zero, Zero, 0x0900E784, Local4)
                            Local4 = M249 (Zero, Zero, Zero, 0x0900E78C)
                            Local4 &= 0x03
                            Local5--
                            Stall (0x63)
                        }

                        M250 (Zero, Zero, Zero, 0x0900E784, Zero)
                        M000 (0xB5)
                    }
                }
            }
        }
    }

    Method (M277, 0, NotSerialized)
    {
        If ((M27A == Zero))
        {
            M278 = Zero
        }

        If (((M278 == Zero) && (M279 == Zero)))
        {
            Local0 = M017 (Zero, 0x08, One, 0x19, Zero, 0x08)
            Local1 = M019 (Local0, Zero, 0x05, Zero)
            If ((M27A == Zero))
            {
                Local1 = 0x15E21022
            }

            If (((Local0 != Zero) && (Local0 != 0xFF)))
            {
                If ((Local1 != Ones))
                {
                    M000 (0xB6)
                    If ((ACGE != Zero))
                    {
                        M250 (Zero, Zero, Zero, 0x03B10564, Zero)
                        M250 (Zero, Zero, Zero, 0x03B10998, Zero)
                        M250 (Zero, Zero, Zero, 0x03B10528, 0x59)
                        Local4 = M249 (Zero, Zero, Zero, 0x03B10564)
                        While ((Local4 == Zero))
                        {
                            Local4 = M249 (Zero, Zero, Zero, 0x03B10564)
                            If ((Local4 != Zero))
                            {
                                Break
                            }
                        }
                    }

                    If ((APGE != Zero))
                    {
                        M250 (Zero, Zero, Zero, 0x0900E784, 0x0101)
                        Local4 = One
                        Local5 = 0x64
                        While (((Local4 != 0x02) && Local5))
                        {
                            Local4 = M249 (Zero, Zero, Zero, 0x0900E784)
                            Local4 |= 0x06
                            Local4 &= 0xFFFFFF0F
                            M250 (Zero, Zero, Zero, 0x0900E784, Local4)
                            Local4 = M249 (Zero, Zero, Zero, 0x0900E78C)
                            Local4 &= 0x03
                            Local5--
                            Stall (0x63)
                        }

                        M250 (Zero, Zero, Zero, 0x0900E784, Zero)
                        M000 (0xB7)
                    }
                }
            }
        }
    }

    Scope (\_SB.PCI0.BUSA.ACP)
    {
        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
        {
            M278 = One
            M276 ()
        }

        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
        {
            M278 = Zero
            M277 ()
        }

        Method (MSG0, 3, Serialized)
        {
            M000 (0x5511)
            OperationRegion (VARM, SystemIO, 0x80, 0x04)
            Field (VARM, DWordAcc, NoLock, Preserve)
            {
                VARR,   32
            }

            If ((Arg2 != 0x09))
            {
                M000 (0x5518)
                M250 (Zero, Zero, Zero, 0x00058A74, Arg0)
                M250 (Zero, Zero, Zero, 0x00058A54, Arg1)
                M250 (Zero, Zero, Zero, 0x00058A14, Arg2)
                Local0 = M249 (Zero, Zero, Zero, 0x00058A74)
                While ((Local0 == Zero))
                {
                    Local0 = M249 (Zero, Zero, Zero, 0x00058A74)
                    If ((Local0 != Zero))
                    {
                        Break
                    }
                }

                M000 (0x5519)
                Local1 = M249 (Zero, Zero, Zero, 0x00058A54)
                Return (Local1)
            }

            Name (MBOX, Buffer (0x04){})
            Local0 = M249 (Zero, Zero, Zero, 0x03810570)
            VARR = Local0
            MBOX = Local0
            CreateWordField (MBOX, Zero, STAS)
            CreateByteField (MBOX, 0x02, CMDI)
            CreateField (MBOX, 0x18, 0x05, RESV)
            CreateBitField (MBOX, 0x1D, RSET)
            CreateBitField (MBOX, 0x1E, RCOV)
            CreateBitField (MBOX, 0x1F, REDY)
            VARR = MBOX /* \_SB_.PCI0.BUSA.ACP_.MSG0.MBOX */
            While (((REDY != One) || (CMDI != Zero)))
            {
                Local0 = M249 (Zero, Zero, Zero, 0x03810570)
                MBOX = Local0
                M000 (0x5516)
                VARR = MBOX /* \_SB_.PCI0.BUSA.ACP_.MSG0.MBOX */
            }

            Local0 = Zero
            MBOX = Local0
            REDY = Zero
            CMDI = 0x33
            M000 (0x5514)
            Local0 = MBOX /* \_SB_.PCI0.BUSA.ACP_.MSG0.MBOX */
            VARR = Local0
            M250 (Zero, Zero, Zero, 0x03810570, Local0)
            Sleep (One)
            M000 (0x5515)
            Local0 = M249 (Zero, Zero, Zero, 0x03810570)
            MBOX = Local0
            VARR = MBOX /* \_SB_.PCI0.BUSA.ACP_.MSG0.MBOX */
            While ((CMDI != Zero))
            {
                Local0 = M249 (Zero, Zero, Zero, 0x03810570)
                MBOX = Local0
                M000 (0x5517)
                VARR = MBOX /* \_SB_.PCI0.BUSA.ACP_.MSG0.MBOX */
            }

            If ((STAS != Zero))
            {
                M000 (0x5513)
            }

            M000 (0x5512)
            Return (Local0)
        }
    }

    Scope (\_SB.PCI0.BUSA.HDEF)
    {
        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
        {
            M279 = One
            M276 ()
        }

        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
        {
            M279 = Zero
            M277 ()
        }
    }

    Scope (\_SB.PCI0.LPCB.EC0)
    {
        OperationRegion (HPSF, SystemMemory, 0xB82D3000, 0x00000003)
        Field (HPSF, AnyAcc, Lock, Preserve)
        {
            PSCF,   8, 
            BCIF,   8, 
            BCSC,   8
        }

        Name (PSSS, Zero)
        Method (_Q20, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            Acquire (\_SB.PCI0.LPCB.EC0.ECMX, 0xFFFF)
            If (ECRG)
            {
                Local0 = (PSSS & One)
                Local1 = (\_SB.PCI0.LPCB.EC0.PSSB & One)
                Local2 = (PSSS & 0x02)
                Local3 = (\_SB.PCI0.LPCB.EC0.PSSB & 0x02)
                Local4 = (PSSS & 0x10)
                Local5 = (\_SB.PCI0.LPCB.EC0.PSSB & 0x10)
                If (((Local0 != Local1) && (Local0 == Zero)))
                {
                    \_SB.WMIV.GVWE (0x0F, Zero)
                    PSSS = \_SB.PCI0.LPCB.EC0.PSSB /* External reference */
                }
                ElseIf (((Local4 != Local5) && (Local4 == Zero)))
                {
                    \_SB.WMIV.GVWE (0x0F, 0x03)
                    PSSS = \_SB.PCI0.LPCB.EC0.PSSB /* External reference */
                }
                ElseIf (((Local0 != Local1) && (Local0 == One)))
                {
                    \_SB.WMIV.GVWE (0x0F, One)
                    PSSS = \_SB.PCI0.LPCB.EC0.PSSB /* External reference */
                }
                ElseIf (((Local2 != Local3) && (Local2 == 0x02)))
                {
                    If (!BCIF)
                    {
                        \_SB.WMIV.GVWE (0x10, Zero)
                    }

                    BCIF = Zero
                    PSSS = \_SB.PCI0.LPCB.EC0.PSSB /* External reference */
                }
                ElseIf (((Local2 != Local3) && (Local2 == Zero)))
                {
                    If (!BCIF)
                    {
                        \_SB.WMIV.GVWE (0x10, One)
                    }

                    BCIF = Zero
                    PSSS = \_SB.PCI0.LPCB.EC0.PSSB /* External reference */
                }
            }

            Release (\_SB.PCI0.LPCB.EC0.ECMX)
        }
    }
}

